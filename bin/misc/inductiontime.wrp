{
  _______________________________________________________________________________________________

                                           C F D W A R P

                                CFD Code for Plasma & Reactive Flow
  _______________________________________________________________________________________________

  Version                          23jun29a
  Compiler                         gcc 8.3.0 with OPENMP threads with distributed memory MPI
                                   with assertions
  Compiled on                      Jun 29 2023 at 12:02:02
  Cycle Strategy                   Standard
  Fluid Relaxation                 Block ADI [1,2]
  EM Field Relaxation              None
  Convection Discretization        Reconstruction-Evolution MUSCL with flux FVS [3], FDS [5],
                                   and primitive interpolation TVD [4], WENO [7], CWENO [9],
                                   AOWENO [8], and eigenvalue conditioning HARTEN, GNOFFO [10],
                                   PECLET [11], PASCAL [6], and PARENT positivity-preserving
                                   filter [12]
  Temporal Discretization          Steady-State
  Fluid Model                      Navier-Stokes Multispecies
  Thermodynamic Model              NASA Glenn Polynomials [13].
  Transport Model                  Dixon-Lewis [14]
  Chemical Model                   C2H4-Air 23 species 66 reactions Zettervall [15]
  EM Field Model                   None
  Beam Model                       None
  Number of Dimensions             2
  Number of Flux Components        26
  Number of Species                23
  Number of Charged Species        0
  List of Species                  H, H2, O, O2, OH, H2O, N2, H2O2, C2H, C2H2, C2H3, C2H4, C2H5,
                                   CH, CH2, CH3, CH4, HO2, CHO, CH2O, CH3O, CO, CO2
  _______________________________________________________________________________________________

  [1]  WR Briley and H McDonald. "On the Structure and Use of Linearized Block Implicit
       Schemes", Journal of Computational Physics 34:54-73, 1980.
  [2]  RM Beam and RF Warming. "An Implicit Finite-Difference Algorithm for Hyperbolic Systems
       in Conservation-Law-Form", Journal of Computational Physics 22:87-110, 1976.
  [3]  JL Steger and RF Warming. "Flux Vector Splitting of the Inviscid Gasdynamic Equations
       with Application to Finite-Difference Methods", Journal of Computational Physics 40:263-
       293, 1981.
  [4]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [5]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [6]  B Parent. "Positivity-Preserving Dual Time Stepping Schemes for Gas Dynamics", Journal of
       Computational Physics 361:391-411, 2018.
  [7]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [8]  DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [9]  M Dumbser and M Kaser. "Arbitrary High Order Non-oscillatory Finite Volume Schemes on
       Unstructured Meshes for Linear Hyperbolic Systems", Journal of Computational Physics,
       221:693-723, 2007.
  [10] P Gnoffo and  JA White. "Computational Aerothermodynamic Simulation Issues on
       Unstructured Grids", 37th AIAA Thermophysics Conference, AIAA Paper 2004-2371, 2004.
  [11] B Parent. "Multidimensional High-Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, 55:141-152, 2017.
  [12] B Parent. "Making a Flux Positivity-Preserving: A General Purpose Filter for the Euler
       Equations", AIAA Paper 2019-0906, AIAA Scitech, San Diego CA, 2019.
  [13] BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.
  [14] Dixon-Lewis, G., "Computer Modelling of Combustor Reactions", Springer Verlag, 1984.
  [15] Zettervall, N., Fureby, C., and Nilsson, E. J., "Small skeletal kinetic reaction
       mechanism for ethylene–air combustion." Energy and Fuels 31(12):14138–14149, 2017.


}

P=50000; {Pa}  {inflow pressure}
T=1000; {K}    {inflow temperature}
w_C2H4=0.07;   {inflow mass fraction of C2H4}
qinf=10000.0;   {set to a value high enough that the flow does not become subsonic anywhere}
deltatmax=5e-2; {expected maximum induction time --> the length of the domain will automatically adjust}


is=1;
ie=200;
js=1;
je=8;

L=qinf*deltatmax;
H=L*je/ie;

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, L,0.0e0);
  Point(ie,je, L,H);
  Point(is,je, 0.0e0,H);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
);


Block(
  Fluid(
    {
    Cut(is,js,  ie,je);
    Link(i1,j1,  i2,j2);
    }
  );
);


Bdry(
  NavierStokes(
    {
    _________________________________________________________________________________________

    Boundary Condition Type           ID  Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC             0   Inflow, supersonic
    BDRY_INFLOWSUBSONIC1              7   Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1 g   Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1           1   Outflow, supersonic, 1o
    BDRY_OUTFLOWSUBSONIC1             4   Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1       f   Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                 e   Symmetrical, 2o
    BDRY_SYMMETRICAL1                 9   Symmetrical, 1o
    BDRY_WALLTFIXED1                  3   Wall, T specified, param Twall
    BDRY_WALLTFIXEDCATALYTIC1         h   Wall, T specified, param Twall, specO,specO2,gammaO, ...
    BDRY_WALLTFIXEDINJECTION1         i   Wall, T specified, param Twall, specCs,mdotCs[kg/m2s], ...
    BDRY_WALLADIABATIC1               6   Wall, Adiabatic
    BDRY_SLIPWALL1                    c   Slip wall, Adiabatic, 1o
    BDRY_FREESTREAM1                  2   Freestream, 1o, params Vx,Vy, P, T
    _________________________________________________________________________________________
    }
    Twall=300.0; {K}
    All(BDRY_WALLTFIXED1,Twall);
    Plane("i",is,BDRY_INFLOWSUPERSONIC);
    Plane("i",ie,BDRY_OUTFLOWSUPERSONIC1);
    Plane("j",js,BDRY_SYMMETRICAL1);
    Plane("j",je,BDRY_SYMMETRICAL1);
    {
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
);
 
 
Model(
  NavierStokes(
    DIFFUSION=YES;
    REACTING=YES;
    Pmin=10000;    Pmax=9.9e99;   {Pa}
    Tmin=4.0e2;     Tmax=26.0e3;    {K}
    Twmin=Tmin;     Twmax=Tmax;    {K}
    wmin=1.0e-50;
    AXISYMMETRIC=NO;
    SetBodyForce(is,js, ie,je, 0.0{N/m3},0.0{N/m3});
    SetHeatDeposited(is,js, ie,je, 0.0 {W/m3});
    {
    AddHeatPoint(0.0{x,m},0.0{y,m}, 0.1{radius,m}, 0.0{W/m});
    }
  );
);


Init(
  NavierStokes(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns]
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns]
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns]
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns]
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns]
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns]
    _______________________________________________________________________________________

    }
    Species("O2", "N2", "C2H4", "default");
    w_O2=0.235*(1-w_C2H4);
    w_N2=0.765*(1-w_C2H4);
    w_default=1e-30;
    All(INIT_TYPE5,qinf,0,P,T,w_O2,w_N2,w_C2H4,w_default);
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE2,Mx,My,P,T,w_O2,w_N2,w_default);
    Region(is,js,  ie,je, INIT_TYPE2,Mx,My,P,T,w_O2,w_N2,w_default);
    }
  );
);


Disc(
  NavierStokes(
    zetaA1=0.1e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.2e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
  );
  MUSCL(
    FLUX=FLUX_FVS;
    AVERAGING=AVERAGING_ARITH;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.85;
    AOWENO_gammahi=0.85;
    INTERPOL=INTERPOL_FIRSTORDER;
    EIGENVALCOND=EIGENVALCOND_HARTEN;
    POSFILTER=POSFILTER_NONE;
    POSFILTER_numiter=4;
  );
);


Cycle(
  NavierStokes(
    xiverge=1e-3;  {residual convergence threshold}
    rhoref=1.0;  {reference density in kg/m3}
    aref=300.0;  {reference sound speed in m/s}
    for (spec,1,numspec,
      Uref[spec]=rhoref;
    );
    for (dim,1,numdim,
      Uref[numspec+dim]=rhoref*aref;
    );
    Uref[numspec+numdim+1]=rhoref*aref*aref;
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.0;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.01;
    );
    CFLmax=0.04;
    {if (iter>500, CFLmax=0.3;);}
    CFL=min(CFL*1.05,CFLmax);
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%2ld %4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,flux_ximax,i_ximax,
           j_ximax,clipinfo);
  );
);


Post(
  xstation[1]=0.1; {m}
  xstation[2]=0.2; {m}
  xstation[3]=0.3; {m}
  numsteps=300;
  qmin=1.0; {m/s, as small a value as possible}
  Pback_min=400; {Pa}
  Pback_max=40000; {Pa}
  Aback=1.0; {m2/m}
  for (cnt,1,3,
    XSTATION_Set(xstation[cnt]);
    Pback=XSTATION_Pback(Aback, Pback_min, Pback_max, numsteps, qmin);
    Fpot=XSTATION_Fpot(Pback, numsteps, qmin);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag(numsteps);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    fprintf(postfilename,"x      = %E m\n"
           "Pback  = %E Pa\n"
           "Fpot   = %E Ns/kg\n"
           "mdot   = %E kg/ms\n"
           "htstar = %E J/kg\n"
           "Tstag  = %E K\n"
           "Pstag  = %E Pa\n"
           "Pstar  = %E Pa\n"
           "T      = %E K\n"
           "q      = %E m/s\n"
           "rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  fprintf(postfilename,"\n");
  for (dim,1,2,
    Area[dim]=_Area(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,je, dim,BDRY_WALLTFIXED1);
  );
  fprintf(postfilename,"Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  fprintf(postfilename,"Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  fprintf(postfilename,"Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  fprintf(postfilename,"metotal   = %+E J/m\n",_metotal(is,js, ie,je));
  fprintf(postfilename,"m         = %+E J/m\n",_m(is,js, ie,je));
  fprintf(postfilename,"\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js, ie,je, "post.01", "tecplot", POSTGRIDONLY);
  }
);

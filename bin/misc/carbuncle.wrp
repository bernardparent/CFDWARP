{
  Number of Dimensions    : nd           : 2
  Number of Species       : ns           : 2
    [  O2  N2  ]
}
Rgas=286.0;
rhoref=1;
aref=300;

Mx=12.0;
My=0.0;
P=10200;
T=300;


CFLref=1.0;



meshtype=2; {set to 1 for gridline on axis of symmetry ; 
             set to 2 for no gridline on axis of symmetry ;}
meshfact=20.0;
sizefact=1.0;


is=1;  js=1; 
if (meshtype==1,
  ie=round(64*meshfact)+1; 
);
if (meshtype==2,
  ie=round(64*meshfact); 
);

je=round(32*meshfact)+1;
Rin_x=0.6*sizefact;
Rin_y=Rin_x/2.4;
Rout_x=Rin_x*1.38;
Rout_y=Rin_y*4.6;

Grid(
  Size(is,js, ie,je);

  if (meshtype==1 || meshtype==2,
    theta=-pi/2;
    dtheta=pi/(ie-is);
    im=(ie+is)/2;
    for (i,is,ie,
      theta=((abs(i-im)/(ie-im))^1.3)*pi/2;
      x_in=-sqrt(1/(1/sqr(Rin_x)+sqr(tan(theta)/Rin_y)));
      y_in=Rin_y*sqrt(1-sqr(x_in/Rin_x));
      if (i-im<0, y_in=-y_in;);
      Point(i,js, x_in,y_in);  
    );

    theta=-pi/2;
    dtheta=pi/(ie-is);
    im=(ie+is)/2;
    for (i,is,ie,
      theta=((abs(i-im)/(ie-im))^1.1)*pi/2;
      x_in=-sqrt(1/(1/sqr(Rout_x)+sqr(tan(theta)/Rout_y)));
      y_in=Rout_y*sqrt(1-sqr(x_in/Rout_x));
      if (i-im<0, y_in=-y_in;);
      Point(i,je, x_in,y_in);  
    );

    Join(is,js,ie,je,j,FE,0.8,Rin_x/300/meshfact,1);
  );
);



Bdry(

  NavierStokesPerfect(
    {
    ******************************************************************
    * Fluid Flow Boundary Conditions Types:                           
    ******************************************************************
    *  0   : Inflow, supersonic                                         
    *  1   : Outflow, supersonic                                        
    *  2   : Slip wall, 1st order                                       
    *  3   : Slip wall, 2nd order                                       
    *  4   : Wall, T specified                                          
    *  5   : Wall, adiabatic                                            
    *  104 : Wall, T specified, flux at the interface set to bdry flux  
    ******************************************************************
    }

    { first, create cuts in the computational domain; a cut is a region 
     which is not computed by the solver }
    { second, apply a default boundary condition (BC) type to all boundary nodes }
    All(2{BC type});

    { impose BC type at faces i=is, i=ie, j=js, j=je}
    Faces(1,1,  2,0);
    { apply BC type only to the boundary nodes in a specific region of the computational domain}
    { Region(10{is},10{js},  17{ie},17{je},  3{BC type});}
  );
  FavreReynolds(
    {
    ******************************************************************
    * Fluid Flow Boundary Conditions Types:                           
    ******************************************************************
    *  0 : Inflow, supersonic                                         
    *  7 : Inflow, subsonic, Tstag, Pstag specified                   
    * 16 : Inflow, subsonic, Pstag, Massflow/Area                     
    *  1 : Outflow, supersonic                                        
    *  4 : Outflow, subsonic, P specified                             
    * 15 : Outflow, subsonic, M specified                             
    * 14 : Symmetrical, 2nd order                                     
    *  9 : Symmetrical, 1st order                                     
    *  3 : Wall, T specified                                          
    *  6 : Wall, Adiabatic                                            
    * 12 : Slip wall, 1st order, Adiabatic                            
    ******************************************************************
    }
    { first, create cuts in the computational domain; a cut is a region 
     which is not computed by the solver }
    { Cut(10{is},10{js},  17{ie},17{je});}
    { second, apply a default boundary condition (BC) type to all boundary nodes }
    All(12{BC type});
    { impose BC type at faces i=is, i=ie, j=js, j=je}
    Faces(1,1,  12,0);
    { apply BC type only to the boundary nodes in a specific region of the computational domain}
    { Region(10{is},10{js},  17{ie},17{je},  3{BC type});}
  );

);
 
 
Model(
 

  NavierStokesPerfect(
    gamma=1.4;    {the specific heat ratio }
    R=286.0;    {the gas constant in J/kgK }
    eta=2e-5;    {the viscosity of the gas in kg/ms }
    kappa=1.0e-3;     {the thermal conductivity of the gas in W/mK }
    Pmin=1000;    Pmax=9.9e99;   {min and max pressure allowed in the domain}
    Tmin=100.0;     Tmax=6.0e5;    {min and max temperature allowed in the domain}
    AXISYMMETRIC=NO;
  );
  FavreReynolds(
    TURBMODEL=TURBMODEL_KOMEGA2008;      {set TURBMODEL to 
                     - TURBMODEL_KOMEGA1988 for Wilcox k-omega model (1988)
                     - TURBMODEL_KOMEGA2008 for new Wilcox k-omega model (2008)
                     - TURBMODEL_KEPSILON for Launder-Sharma k-epsilon model}
    DILATDISSIP=DILATDISSIP_NONE; {the dilatational dissipation can be set to DILATDISSIP_WILCOX or DILATDISSIP_SARKAR or NO}
    RAPCOMP=NO;     {the rapid compression correction by Coakley et altrui? (either YES or NO)}
    TURBSOURCE=NO; {solve the turbulence source terms? if set to NO and if the turbulence 
                     kinetic energy k is set to zero in the freestream, then will solve the 
                     flow as laminar}
    DIFFUSION=NO;  {if set to NO, the diffusion matrix K will be set to zero}
    REACTING=NO;   {reacting flow? say either YES or NO -> only effective when a chemical solver is used}
    Prt=0.9e0;      {the turbulent Prandtl number;
                      - recommended value of 0.9 in boundary layers
                      - recommended value of 0.5 in shear layers}
    Sct=1.0e0;      {the turbulent Schmidt number;
                      - set it to a value between 0.2 and 2}
    kdiv=1.0e0;     {set kdiv in m2/s2 to as low a value as possible and
                   - at most one tenth the maximum value of k in the boundary layer
                     profile exhibiting the lowest maximum k for supersonic flow
                   - at most one hundredth the maximum value of k in the boundary layer}
    ADD_ETA_TO_ETAT_WITHIN_QK=NO;  {say NO for standard kinetic energy transport model}
    psidiv=0.1e-3;   {set psidiv to as low a positive value as possible}
    Pmin=1.0e-2;    Pmax=9.9e99;   {min and max pressure allowed in the domain in Pa}
    Tmin=1.0e1;     Tmax=6.0e3;    {min and max temperature allowed in the domain in K}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature allowed on any wall boundary node in K}
    kmin=-1.0e-7;   kmax=9.9e99;   {min and max TKE allowed in the domain in m2/s2}
    psimin=1e-10;   psimax=9.9e99; {min and max omega/epsilon allowed in the domain}
    wmin=-1.0e-9;                  {min mass fraction allowed in the domain}
    AXISYMMETRIC=NO; {not tested yet!!}
  );

);
 
 
Init(
    NavierStokesPerfect(
      All(2,Mx,My,P,T);
    );
    FavreReynolds(
      {
      ************************************************************
      *Initial Conditions Types:                                  
      ************************************************************
      *1, V[1]..V[nd],  T,  rho,  w[1]..w[ns], k, psi     
      *2, M[1]..M[nd],  P,  T,    w[1]..w[ns], k, psi     
      *3, M[1]..M[nd],  Re, T,    w[1]..w[ns], k, psi     
      *4, Mmag, angles, P,  T,    w[1]..w[ns], k, psi     
      *5, V[1]..V[nd],  P,  T,    w[1]..w[ns], k, psi     
      *6, V[1]..V[nd],  P,  T,    chi[1]..chi[ns], k, psi   
      ************************************************************
      NOTE: in the freestream inflow conditions, it is suggested to
            set psi to:
              10*(flow speed) for the 1988 k-omega model          
              110*(flow speed) for the 2008 k-omega model         
      }
      { Init all nodes in the domain}
      All(2,Mx,My,P,T,0.235,0.765,0.0,100*100);
      {
        { Init bdry nodes numbered 3}
        Bdry(3, 1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
        { Init nodes in region}
        Region(3,3,  6,6,
         1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
      }
    );

);


Disc(
  NavierStokesPerfect(
    zetaA1=0.03e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.3e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_COMPRESSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.999;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_PARENT; 
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=4;
     
  );
  MUSCLplus(
    FLUX=FLUX_FDSplusFilter;
    numiter=2;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_COMPRESSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.9999;
    INTERPOL=INTERPOL_AOWENO7;
    EIGENVALCOND=EIGENVALCOND_PASCAL; 
  );
  FVS(
    AOWENO_TYPE=AOWENO_TYPE_COMPRESSIVE;
    AOWENO_gammalo=0.85;
    AOWENO_gammahi=0.85;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_GNOFFO; 
  );
);



Cycle(
  NavierStokesPerfect(
    xiverge=1e2/sizefact;          {residual convergence threshold}
    rhoref=1.0;            {reference density in kg/m3}
    aref=300.0;            {reference sound speed in m/s}
    Uref[1]=rhoref;            
    Uref[2]=rhoref*aref;       
    Uref[3]=rhoref*aref;   
    Uref[4]=rhoref*aref*aref;  
  );
  FavreReynolds(
    xiverge=1e-1/sizefact;  {residual convergence threshold}
    rhoref=1.0;  {reference density in kg/m3}
    aref=300.0;  {reference sound speed in m/s}
    kref=1e4;  {reference turbulence kinetic energy in m2/s2}
    psiref=1e8;  {reference specific dissipation rate of the TKE in 1/s if TURBMODEL=TURBMODEL_KOMEGA*
                  reference dissipation rate of the TKE in m2/s3 if TURBMODEL=TURBMODEL_KEPSILON}
    Uref[1]=rhoref;   
    Uref[2]=rhoref;   
    Uref[3]=rhoref*aref;   
    Uref[4]=rhoref*aref;   
    Uref[5]=rhoref*aref*aref;  
    Uref[6]=rhoref*kref;  
    Uref[7]=rhoref*psiref;  
  );
   Multizone(
    tmax=1e-4;   {simulation time span in seconds}
    dt=tmax/30;  {physical time step in seconds}
    sigma1=0.1;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      if (time==0,
        CFL=0.01;
      ,
        CFL=CFLref;
      );
    );
    if (iter>100,
      CFL=CFLref/2;
    );
    CFL=min(CFL*1.1,CFLref);
    phi1=20;     {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1,dt);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
    if (ximax<xiverge || iter>130,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
   );
  SteadyState(
    if (mod(iter,500)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.1;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.05;
    );
    CFL=min(CFL*1.006,CFLref);
    system("date");
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );
   MultizoneSteady(
    if (mod(iter,50)==0,
      WriteDataFile();
    );
    sigma1=0.1;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.05;
    );
    CFL=min(CFL*1.006,CFLref);
    phi1=20;     {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
   );
);

Post(


  im=1*(ie-1)/4+1;
  ResetPostDomain();
  RestrictPostDomainToRegion(im,js, im,je);
  WritePostFile("post.2Dchannel.POSFLCW2.mf1.x=0.5", "tecplot",POSTFILE_ALL);

);

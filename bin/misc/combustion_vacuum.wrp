{
  _______________________________________________________________________________________________

  WARP: a CFD Code for Plasma & Reactive Flows [a]
  _______________________________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block ADI [1,2]
  EM Field Integration                    none
  Convection Derivative Discretization    FDS [3] WENO 5th Order [4]
  Time Derivative Discretization          Backward Difference Formula 2nd-Order
  Fluid Transport Model                   Navier-Stokes Multispecies
  Chemical Model                          H2-Air 9 species 20 reactions Jachimowsky [5]
  Beam Model                              None
  EM Field Model                          None
  Thermodynamic Model                     NASA Glenn Polynomials [6]
  Number of Dimensions                    2
  Number of Flux Components               12
  Number of Species                       9
  Number of Charged Species               0
  List of Species                         H2, O2, H, O, OH, H2O, HO2, H2O2, N2
  _______________________________________________________________________________________________

  [a]  B Parent. "WARP: a CFD Code for Plasma & Reactive Flows", WARP version 17jun24a compiled
       on Jul 17 2017 at 14:11:46 by parent on CLEO using gcc 4.9.2 with OPENMP threads. WARP is
       a Copyright (c) 1998-2017 of Bernard Parent. Copying and distribution of WARP is
       prohibited.
  [1]  WR Briley and H McDonald. "On the Structure and Use of Linearized Block Implicit Schemes",
       Journal of Computational Physics 34:54-73, 1980.
  [2]  RM Beam and RF Warming. "An Implicit Finite-Difference Algorithm for Hyperbolic Systems in
       Conservation-Law-Form", Journal of Computational Physics 22:87-110, 1976.
  [3]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [4]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [5]  CJ Jachimowsky. "An Analytical Study of the Hydrogen-Air Reaction Mechanism With
       Application To Scramjet Combustion", NASA TP-2791, 1988.
  [6]  BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.

}

 

{bug when reading interpolation file created with mf=2 and when mf is set to 0.9 --> check this}
mf=2.0;
tf=5.0;  {tf=1 gives a CFL of about 1 }
tmax=0.3e-3;    {simulation time span in seconds}
maxiter=100;

CONVERGENCEHISTORY=FALSE;

is=1;  js=1; 
im=round(15*mf); jm=round(10*mf);
ie=round(30*mf); je=round(20*mf);

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, 1.0e0,0.0e0);
  Point(ie,je, 1.0e0,0.5e0);
  Point(is,je, 0.0e0,0.5e0);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
  Rotate(is,js, ie,je, 0.0,0.0, rad(15));
);



Bdry(
  NavierStokes(
    {
    _________________________________________________________________________________________

    Boundary Condition Type           Number  Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC             0       Inflow, supersonic
    BDRY_INFLOWSUBSONIC1              7       Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1 16      Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1           1       Outflow, supersonic, 1o
    BDRY_OUTFLOWSUBSONIC1             4       Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1       15      Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                 14      Symmetrical, 2o
    BDRY_SYMMETRICAL1                 9       Symmetrical, 1o
    BDRY_WALLTFIXED1                   3       Wall, T specified
    BDRY_WALLADIABATIC1                6       Wall, Adiabatic
    BDRY_SLIPWALL1                    12      Slip wall, Adiabatic, 1o
    _________________________________________________________________________________________
    }
    Cut(is,js, im,jm);
    All(BDRY_SLIPWALL1);
    {Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_SLIPWALL1,BDRY_INFLOWSUPERSONIC);}
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
);
 
    REACTING=YES;
 
Model(
  NavierStokes(
    DIFFUSION=YES;
    Pmin=0.001;    Pmax=9.9e99;   {Pa}
    Tmin=20;     Tmax=30.0e3;    {K}
    Twmin=Tmin;     Twmax=Tmax;    {K}
    wmin=-1e-99;
    AXISYMMETRIC=NO;
  );
);


Init(
  NavierStokes(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns]
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns]
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns]
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns]
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns]
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns]
    _______________________________________________________________________________________

    }
    Mx=4;
    My=0;
    P=10000; {Pa}
    T=1700; {K}
    w_H2=0.03;
    w_O2=0.235;
    w_H=1e-30;
    w_O=1e-30;
    w_OH=1e-30;
    w_H2O=1e-30;
    w_HO2=1e-30;
    w_H2O2=1e-30;
    w_N2=0.735;
    All(INIT_TYPE2,Mx,My,P,T,w_H2,w_O2,w_H,w_O,w_OH,w_H2O,w_HO2,w_H2O2,w_N2);
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE2,Mx,My,P,T,w_H2,w_O2,w_H,w_O,w_OH,w_H2O,w_HO2,w_H2O2,w_N2);
    Region(is,js,  ie,je, INIT_TYPE2,Mx,My,P,T,w_H2,w_O2,w_H,w_O,w_OH,w_H2O,w_HO2,w_H2O2,w_N2);
    }
  );
);


Disc(
  NavierStokes(
    zetaA1=0.1;     {conditions the eigenvalues of the A jacobian}
    zetaA2=0.5;  {eigenvalue clipping factor: 2.0-20.0}
  );
  MUSCLplus(
    FLUX=FLUX_FDSplus;
    numiter=2;
    AOWENO_TYPE=AOWENO_TYPE_COMPRESSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.95;
    INTERPOL=INTERPOL_WENO5;
    EIGENVALCOND=EIGENVALCOND_PASCAL;
    AVERAGING=AVERAGING_ARITH;
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.95;
    INTERPOL=INTERPOL_WENO5;
     
    EIGENVALCOND=EIGENVALCOND_PARENT;
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=4;
  );
  CDFplus(
    xi[1]=0.5; {should be set to 0.5 or less when used with 2nd order or higher convective fluxes}
    xi[2]=0.5;
    xi[3]=0.5;
    xi[4]=0.5;
    xi[5]=0.5;
    xi[6]=0.5;
    xi[7]=0.5;
    xi[8]=0.5;
    xi[9]=0.5;
    xi[10]=0.5;
    xi[11]=0.5;
    xi[12]=0.5;
);
);



globiter=0;

Cycle(
  NavierStokes(
    xiverge=1e3;  {residual convergence threshold}
    rhoref=1.0;  {reference density in kg/m3}
    aref=300.0;  {reference sound speed in m/s}
    Uref[1]=rhoref;   
    Uref[2]=rhoref;   
    Uref[3]=rhoref;   
    Uref[4]=rhoref;   
    Uref[5]=rhoref;   
    Uref[6]=rhoref;   
    Uref[7]=rhoref;   
    Uref[8]=rhoref;   
    Uref[9]=rhoref;   
    Uref[10]=rhoref*aref;   
    Uref[11]=rhoref*aref;   
    Uref[12]=rhoref*aref*aref;  
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.2;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.1,1.0);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );
  DualTimeStepping(
    sigma1=0.4;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.4;   {exponent of maximum pseudotime step in all fluxes}
    dt=tmax/(10*mf*8*tf);   {physical time step in seconds}
    if (time<3*dt,
      if (iter==1,
        CFL=0.1;
      );
      CFL=min(CFL*1.1,1.0);
    ,{else}
      if (iter==1,
        CFL=5.0;
      );
      CFL=max(CFL/1.14,0.5);
    );
    UpdateFluid(CFL,PRECON_LOCALEIGENVALUE,sigma1,sigma2,dt);
    if (CONVERGENCEHISTORY,
      printf("%ld %6.2f %6ld %9.3f   %E \n",
             globiter,CFL,iter,effiter_U,ximax);
      globiter=globiter+1;
    ,{else}
      printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
             CFL,iter,effiter_U,ximax,i_ximax,
             j_ximax,clipinfo);
    );
    if (ximax<xiverge || iter>maxiter,
      IncreaseTimeLevel();
      if(!CONVERGENCEHISTORY, 
        WriteDataFile(outputfilename"."round(time/dt));
        printf("dt=%E time=%Es\n",dt,time);
      );
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );
  Multizone(
    sigma1=0.4;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.4;   {exponent of maximum pseudotime step in all fluxes}
    dt=tmax/(10*mf*8*tf);   {physical time step in seconds}
    if (time<3*dt,
      if (iter==1,
        CFL=0.1;
      );
      CFL=min(CFL*1.1,1.0);
    ,{else}
      if (iter==1,
        CFL=5.0;
      );
      CFL=max(CFL/1.14,1.0);
    );

    phi1=14;      {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2,phi1,dt);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
    if (ximax<xiverge,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );


  PredictorCorrector(
    dt=tmax/(10*mf*400);   {physical time step in seconds}
    {8000 iterations for mf=1}
    if (REACTING,
      dt=tmax/(10*mf*160000);
    );
    CFL=min(CFL*1.14,1.0);
    if (time>tmax-0.1*dt,
      WriteDataFile(outputfilename"."round(time/dt));
      exit(EXIT_SUCCESS);
    );
    if (mod(iter,5000)==1,
      WriteDataFile(outputfilename"."round(time/dt));
    );
    UpdateFluid(dt);
    printf("%E %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           time,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );

);


Post(
  xstation[1]=0.1; {m}
  xstation[2]=0.2; {m}
  xstation[3]=0.3; {m}
  numsteps=300;
  qmin=1.0; {m/s, as small a value as possible}
  Pback_min=400; {Pa}
  Pback_max=40000; {Pa}
  Aback=1.0; {m2/m}
  for (cnt,1,3,
    XSTATION_Set(xstation[cnt]);
    Pback=XSTATION_Pback(Aback, Pback_min, Pback_max, numsteps, qmin);
    Fpot=XSTATION_Fpot(Pback, numsteps, qmin);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag(numsteps);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("x      = %E m\n"
           "Pback  = %E Pa\n"
           "Fpot   = %E Ns/kg\n"
           "mdot   = %E kg/ms\n"
           "htstar = %E J/kg\n"
           "Tstag  = %E K\n"
           "Pstag  = %E Pa\n"
           "Pstar  = %E Pa\n"
           "T      = %E K\n"
           "q      = %E m/s\n"
           "rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,je, dim,BDRY_WALLTFIXED1);
  );
  printf("Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  printf("\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js, ie,je, "post.01", "tecplot", POSTGRIDONLY);
  }
);

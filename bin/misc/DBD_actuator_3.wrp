
 
meshlevel=1; {the higher the mesh level, the less the grid-induced error}

mf=(1.41)^(-4+meshlevel); 
tf=1.0; {tf=1 works fine, tf=2 more accurate, error coming from tf needs to be assessed }
iterfact=0.5647; {the higher iterfact, the less the solution convergence error; error needs to be assessed}

CFLfact=0.8; {don't set to higher than 1 because this may lead to divergence}

period=1e-3; {period in seconds}
number_periods=6; {the first two periods establish the background plasma; the third and subsequent periods will be similar}
Vpp=10000; {Voltage difference peak to peak in Volts}



itermax=538;{iterfact*140/sqrt(CFLfact/1.6);}
EMFsubiter=1300;  {number of subiterations of the electric field potential equation per fluid iteration: don't change this}

is1=1;
is2=round(mf*28); {start of exposed electrode}
is3=is2+round(mf*65);
is4=is3+round(mf*150); {start of embedded electrode}
is5=is4+round(mf*600); {end of embedded electrode}
is6=is5+round(mf*36);
is=is1;
ie=is6;



js2=1; 
js3=js2+round(mf*13); {exposed electrode is between js3 and js4}
js4=js3+round(mf*9);  {start of plasma/gas}
js5=js4+round(mf*33*6*1.25);
js6=js5+round(mf*50);
js=js2;
je=js6;


xs1=-10.5e-3;
xs2=-9e-3;
xs3=-3e-3;
xs4=0;
xs5=6e-3;
xs6=7.5e-3;
dx=(xs5-xs4)/(is5-is4)/3;
dy=dx/4/6; {?}
ys0=-50e-6;
ys1=0.0;
ys2=37.5e-6;
ys3=0.7e-3-37.5e-6;
ys4=0.7e-3;
ys5=1.0e-3;
ys6=1.7e-3;


Grid(
  Size(is,js, ie,je);
  printf("%ldx%ld..",ie-is+1,je-js+1);
  {left electrode}

  Corners    (is3,js2,is4,js3,  xs3,ys2,xs4,ys3);
  Corners    (is3,js3,is4,js4,  xs3,ys3,xs4,ys4);

  JoinCorners(is3,js3,is4,js4,  EF,0.5e0,1.0e0,dx,  EF,0.1e0,1.0e0,dy);
  JoinCorners(is3,js2,is4,js3,  EF,0.5e0,1.0e0,dx,  EG,0.5e0,1.0e0,1.0e0);


  Copy(is3,js2,is3,js4,is2,js2);
  Translate(is2,js2,is2,js4,xs2-xs3,0);
  Join(is2,js2, is3,js4,  i, EG,0.5e0,1.0e0,1.0e0);

  {left of left electrode}
  Copy(is3,js2,is3,js4,is1,js2);
  Translate(is1,js2,is1,js4,xs1-xs3,0);
  Join(is1,js2, is2,js4,  i, EG,0.66e0,1.0e0,1.0e0);


  {right electrode and dielectric}
  Copy(is4,js2,is4,js4,is5,js2);
  Translate(is5,js2,is5,js4,xs5-xs4,0);
  Join(is4,js2, is5,js4,  i, GE,0.5e0,1.0e0,1.0);



  {right of right electrode}
  Copy(is4,js2,is4,js4,is6,js2);
  Translate(is6,js2,is6,js4,xs6-xs4,0);
  Join(is5,js2, is6,js4,  i, GE,0.34e0,1.0e0,1.0e0);  {7}
  
  {copy js4 to js5}
  Copy(is,js4,ie,js4,is,js5);
  Translate(is,js5,ie,js5,0.0,ys5-ys4);
  Join(is,js4,ie,js5,j,GE,0.3e0,1.0e0,1.0e0);   {8}

  {copy js4 to je}
  Copy(is,js4,ie,js4,is,je);
  Translate(is,je,ie,je,0.0,ys6-ys4);
  Join(is,js5,ie,je,j,GE,0.4e0,1.0e0,1.0e0);    {9}
  
);



Bdry(
  NavierStokesPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            Number  Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0       Inflow, supersonic, 1o
    BDRY_INFLOWSUBSONIC1               7       Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  16      Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1            1       Outflow, supersonic, 1o
    BDRY_OUTFLOWSUPERSONIC2            2       Outflow, supersonic, 2o
    BDRY_OUTFLOWSUBSONIC1              4       Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1        15      Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                  14      Symmetrical, 2o
    BDRY_SYMMETRICAL1                  9       Symmetrical, 1o
    BDRY_WALLTFIXED                    3       Wall, T specified
    BDRY_WALLADIABATIC                 6       Wall, Adiabatic
    BDRY_SLIPWALL1                     12      Slip wall, Adiabatic, 1o
    _________________________________________________________________________________________
    }
    Cut(is,js2,  ie,js4);
    All(BDRY_WALLTFIXED1);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
  Epotential(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   Number     Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0          Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2          Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1          Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
    All(BDRYEMF_DIELECTRIC);
    {cut below the exposed electrode}
    Cut(is2,js2,  is4,js3);
    All(BDRYEMF_DIELECTRIC);

    Region(is2,js3,  is4,js3,  BDRYEMF_ELECTRODE);
    Region(is4,js2,  is5,js2,  BDRYEMF_ELECTRODE);

    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRYEMF_ELECTRODE);
    }
  );
);
 
 
Model(
  NavierStokesPlasma(
    TEMODEL=TEMODEL_LOCAL;
    N2VIBMODEL=N2VIBMODEL_MACHERET;
    N2VIBJOULEHEATING=YES;
    REACTING=YES;
    emfieldworkheatfact=1.0;
    sigmadiv=1e-18; {S/m}
    etdiv=1e-1;     {J/kg}
    Pmin=1.0e3;    Pmax=9.9e99;   {Pa}
    Tmin=1.0e2;     Tmax=12.0e3;    {K}
    Tvmin=Tmin;     Tvmax=10.0e3;  {K}
    Temin=Tmin;     Temax=60.0e3;  {K}
    Twmin=Tmin;     Twmax=Tmax;    {K}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain for neutrals}
    wimin=1e-20;    wimax=1e-3;    {min and max ion mass fraction}
    wemin=1e-20;    wemax=1e-7;    {min and max electron mass fraction}
    Nminbdry=1e8;   {the minimum number density in 1/m3 for the charged species at the bdry nodes}
    gamma=0.05e0;    {secondary emission coefficient}
    AXISYMMETRIC=NO;
  );
  Epotential(
    Te_buffer=3000.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,T+Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Jmax=2000000000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,js4, 5.0 );
    SetRelativePermittivity(is,js4, ie,je, 1.0 );
    SetSolidConductivity(is,js, ie,je, 0.0 {S/m});
    SetSolidConductivity(is2,js3,  is4,js4, 1000 {S/m});
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
  );
);


Init(
  NavierStokesPlasma(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     Tv, Te
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], Tv, Te
    _______________________________________________________________________________________

    }
    Vx=0; {m/s}
    Vy=0; {m/s}
    P=101300; {Pa}
    T=300; {K}
    Tv=T; {K}
    Te=3000; {K}
    chi_eminus=0.5e-15;
    chi_O2minus=1.0e-30;
    chi_O2plus=0.2e-15;
    chi_N2plus=0.3e-15;
    chi_O=1.0e-30;
    chi_N=1.0e-30;
    chi_O2=0.25;
    chi_N2=0.75;
    All(INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,Tv,Te);
    {
    Bdry(BDRY_WALLTFIXED, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,Tv,Te);
    Region(is,js,  ie,je, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,Tv,Te);
    }
  );
  Epotential(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
    phi=0.0; {V}
    All(INITEMF_TYPE1,phi);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,  ie,je,INITEMF_TYPE1,phi);
    }
  );
);


USE_GAUSS_BASED_POTENTIAL=FALSE;

Disc(
  NavierStokesPlasma(
    zetaA1=0.1e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.2e0; {set to 0.25 usually}    {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
    zetaD=1.0;        {conditions the Dstar eigenvalues for the charged species}
    if (USE_GAUSS_BASED_POTENTIAL,
      betag[1]=0;
      betag[2]=0;
      betag[3]=0;
      betag[4]=0;
      betaa[1]=0;
      betaa[2]=0;
      betaa[3]=0.0000;
      betaa[4]=0.0000;
    ,{else}
      betag[1]=-0.0010;
      betag[2]=-0.5000;
      betag[3]=1.0000;
      betag[4]=1.0000;
      betaa[1]=0.9990;
      betaa[2]=0.5000;
      betaa[3]=0.0000;
      betaa[4]=0.0000;
    );
  );
  Epotential(
    if (USE_GAUSS_BASED_POTENTIAL,
      POTENTIAL=POTENTIAL_GAUSSBASED;
    ,{else}
      POTENTIAL=POTENTIAL_OHMBASED;
    );
    Ediv=10.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_COMPRESSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.95;
    INTERPOL=INTERPOL_AOWENO7;
    EIGENVALCOND=EIGENVALCOND_PARENT; 
    POSFILTER_numiter=4;
    POSFILTER=POSFILTER_PARENT;
  );
  CDFplus(
    xi[1]=0.5;
    xi[2]=0.5;
    xi[3]=0.5;
    xi[4]=0.5;
    xi[5]=0.5;
    xi[6]=0.5;
    xi[7]=0.5;
    xi[8]=0.5;
    xi[9]=0.5;
    xi[10]=0.5;
    xi[11]=0.5;
    xi[12]=0.25;
    xi[13]=0.25;
  );
);




Cycle(
  NavierStokesPlasma(
    xiverge=1e-3;         {residual convergence threshold}
    zetaGammai=1.0;       {factor multiplying the pseudotime step of the ion species transport equations}
    zetaGammae=1.0;      {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode when PRECONDITIONER is set to PRECON_LOCALTIMESTEPPLASMA} 
    relaxNi_bdry=0.8;     {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.1;     {the electron density relaxation factor at the boundary }
    relaxTe=0.5;          {the electron temperature relaxation factor }
    rhoref=0.1;           {reference density in kg/m3}
    Tref=300.0;           {reference temperature in K}
    Teref=20000.0;        {reference electron temperature in K}
    Tvref=5000.0;         {reference vibrational temperature in K}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-5;            {average ion mass fraction}
    Uref[1]=wion*1.8e-5*rhoref;   
    Uref[2]=wion*rhoref;   
    Uref[3]=wion*rhoref;   
    Uref[4]=wion*rhoref;   
    Uref[5]=rhoref*1e99;   
    Uref[6]=rhoref*1e99;   
    Uref[7]=rhoref*1e99;   
    Uref[8]=rhoref*1e99;   
    Uref[9]=rhoref*aref*1e99;   
    Uref[10]=rhoref*aref*1e99;   
    Uref[11]=rhoref*aref*aref*1e99;  
    Uref[12]=rhoref*700.0*Tvref*1e99;  
    Uref[13]=rhoref*wion*414*Teref*1e99;  
  );
  Epotential(
    xiverge_emfield=1e-2; {residual convergence threshold for the potential equation}
    sigmaref=3e-6; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );
  DualTimeStepping(
    tmax=period*number_periods;    {total simulation time in seconds}
    dtref=period/round(1.8*(mf*60*tf));   {physical time step in seconds}
    sigma1=0.0;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    dphi=Vpp*sin(time/period*2*pi)*0.5;
    printf("deltaphi=%ldV  ",round(dphi));
    
    if (iter==1,
      Init(Epotential(
        Region(is2,js3,  is4,js3,  INITEMF_TYPE1,dphi/2);
        Region(is4,js2,  is5,js2,  INITEMF_TYPE1,-dphi/2);
      ););
    );
    dt=dtref;   {physical time step in seconds}
    {if (time<40e-9,
      if (tf<1.8, 
        CFL=1.5*CFLfact; 
      ,{else} 
        CFL=2.0*CFLfact;
      );
      CFL=CFLfact; {?????}
      if (iter<3, 
        CFL=0.0;
      );
    ,{else}
      if (iter==1, 
        CFL=0.2;
      ,{else}
        CFL=min(0.8,min(CFLfact,CFL*1.4));
      );
    );}

    if (iter>50,
       CFL = CFLfact;
    );
    if (iter<=50,
       CFL = (iter-1)*CFLfact/50;
    );

    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2,dt);
    {system("date");}
    Lc=1e-3*4;      {characteristic length scale in meters used to solve the emfield equation}
    relaxEMF=1.0; {relaxation factor forced on the update of the emfield variables}
    for (cnt,0,0,
      UpdateEMField(Lc*100000,relaxEMF*1.0,dt,TSEMF_SOR,EMFsubiter); {optional extra parameters:  tsemfmethod [TSEMF_ADI, TSEMF_DDADI, TSEMF_IMAF, etc] and numsubiter_tsemf [default: 4] if supported}
    );

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
   if (iter>itermax,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dtref));
      {printf("%d time steps\n", round(time/dtref));}
      printf("dt=%E time=%Es\n",dt,time);

      if (time>tmax-0.1*dt ,
        exit(EXIT_SUCCESS);
      );
    );
  );
);


Post(

  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(is,js, ie,je, dim);
  );
  printf("Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  printf("Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  fprintf(postfilename,"%+E %+E\n",Femfield[1],Femfield[2]);
  printf("Qbeam     = %+E W/m\n",_Qbeam(is,js, ie,je));
  printf("EdotJ     = %+E W/m\n",_EdotJ(is,js, ie,je));
  printf("Wemfield  = %+E W/m\n",_Wemfield(is,js, ie,je)); {Wemfield=Femfield dot Vn}
  printf("metotal   = %+E J/m\n",_metotal(is,js4, ie,je)); {Wemfield=Femfield dot Vn}
  printf("m         = %+E kg/m\n",_m(is,js4, ie,je)); {Wemfield=Femfield dot Vn}
  printf("\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js, ie,je, "post.01", "tecplot", POSTGRIDONLY);
  }
);



{
  ____________________________________________________________________________

  WARP: a CFD Code for Plasma & Reactive Flows [a]
  ____________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block DDADI [2,1]
  EM Field Integration                    IMAF [3]
  Convection Derivative Discretization    Positivity-Preserving FDS [4] WENO
                                          Adaptive Order 3,5 [5]
  Time Derivative Discretization          Positivity-Preserving
                                          Cross-Difference Formula [6]
  Fluid Transport Model                   Navier-Stokes with drift-diffusion
                                          plasma model [7]
  Chemical Model                          Air Plasma 8 species 28 reactions
                                          Macheret [7]
  Beam Model                              None
  EM Field Model                          Potential based on Ohm's law [8]
  Thermodynamic Model                     NASA Glenn Polynomials [9]
  Number of Dimensions                    2
  Number of Flux Components               13
  Number of Species                       8
  Number of Charged Species               4
  List of Species                         e-, O2-, O2+, N2+, O, N, O2, N2
  ____________________________________________________________________________

  [a]  B Parent. "WARP: a CFD Code for Plasma & Reactive Flows", WARP version
       17sep04a compiled on Sep  4 2017 at 22:49:31 by parent on WAFL101
       using gcc 4.9.2 with OPENMP threads. WARP is a Copyright (c) 1998-2017
       of Bernard Parent. Copying and distribution of WARP is prohibited.
  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th
       Computational Fluid Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow
       Simulations with the CSCM Implicit Upwind Navier-Stokes Method",
       Proceedings of the 8th Computational Fluid Dynamics Conference, AIAA
       Paper 87-1114, 1987.
  [3]  RW MacCormack. "Iterative Modified Approximate Factorization",
       Computers and Fluids 30:917-925, 2001.
  [4]  B Parent. "Positivity-Preserving Flux Difference Splitting Schemes",
       Journal of Computational Physics 243:194-209, 2013.
  [5]  DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes
       with Adaptive Order", Journal of Computational Physics 326:780-804,
       2016.
  [6]  B Parent. "Positive Coefficients, Cross Differences, and
       Dual-Time-Stepping Schemes", under review, 2017.
  [7]  B Parent, MN Shneider, and SO Macheret. "Detailed Modeling of Plasmas
       for Computational Aerodynamics", AIAA Journal, 54:898-911, 2016.
  [8]  B Parent, SO Macheret, and MN Shneider. "Electron and Ion Transport
       Equations in Computational Weakly-Ionized Plasmadynamics", Journal of
       Computational Physics 259:51-69, 2014.
  [9]  BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for
       Calculating Thermodynamic Properties of Individual Species", NASA TP
       2002-211556, 2002.

}


{
  _______________________________________________________________________________________________

  WARP: a CFD Code for Plasma Aerodynamics [a]
  _______________________________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block DDADI [2,1]
  EM Field Integration                    none
  Convection Derivative Discretization    Positivity-Preserving FDS [3] Total Variation
                                          Diminishing 2nd Order [4]
  Time Derivative Discretization          Steady-State
  Fluid Transport Model                   Navier-Stokes Multispecies
  Chemical Model                          CH4-Air 20 species 52 reaction Yungster [5]
  Beam Model                              None
  EM Field Model                          None
  Thermodynamic Model                     NASA Glenn Polynomials [6]
  Number of Dimensions                    2
  Number of Flux Components               23
  Number of Species                       20
  Number of Charged Species               0
  List of Species                         O, O2, H2, H2O, H, OH, HO2, CO, CO2, CH3, CH4, H2O2,
                                          CHO, CH2O, CH3O, C2H3, C2H4, C2H5, C2H6, N2
  _______________________________________________________________________________________________

  [a]  B Parent. "Weakly-ionized Airflow Resolver and Post-processor: a CFD Code for Plasma
       Aerodynamics", WARP version 17jan22b compiled on Jan 23 2017 at 14:48:49 by parent on
       CLEO using gcc 4.8.2 with OPENMP threads. WARP is a Copyright (c) 1998-2017 of Bernard
       Parent. Copying and distribution of WARP is prohibited.
  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  B Parent. "Positivity-Preserving Flux Difference Splitting Schemes", Journal of
       Computational Physics 243:194-209, 2013.
  [4]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [5]  S Yungster and MJ Rabinowitz. "Computation of Shock-Induced Combustion Using a Detailed
       Methane-Air Mechanism", Journal of Propulsion and Power 10:609-617, 1994.
  [6]  BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.

}

 

is=1;  js=1; 
ie=30; je=30;

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, 1.0e0,0.0e0);
  Point(ie,je, 1.0e0,1.0e0);
  Point(is,je, 0.0e0,1.0e0);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
);


Bdry(
  NavierStokes(
    {
    _________________________________________________________________________________________

    Boundary Condition Type           Number  Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC             0       Inflow, supersonic
    BDRY_INFLOWSUBSONIC1              7       Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1 16      Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1           1       Outflow, supersonic, 1o
    BDRY_OUTFLOWSUBSONIC1             4       Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1       15      Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                 14      Symmetrical, 2o
    BDRY_SYMMETRICAL1                 9       Symmetrical, 1o
    BDRY_WALLTFIXED1                   3       Wall, T specified
    BDRY_WALLADIABATIC1                6       Wall, Adiabatic
    BDRY_SLIPWALL1                    12      Slip wall, Adiabatic, 1o
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_SLIPWALL1,BDRY_SLIPWALL1);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
);
 
 
Model(
  NavierStokes(
    DIFFUSION=YES;  {if set to NO, the diffusion matrix K will be set to zero}
    REACTING=YES;   {Chemical reactions?}
    Pmin=1.0e-2;    Pmax=9.9e99;   {min and max pressure allowed in the domain in Pa}
    Tmin=1.0e1;     Tmax=6.0e3;    {min and max temperature allowed in the domain in K}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature allowed on any wall boundary node in K}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain}
    zetaA1=0.1e0;     {conditions the eigenvalues of the A jacobian}
    EIGENVALCOND=EIGENVALCOND_PASCAL; {set the eigenvalue conditioning to EIGENVALCOND_PECLET, EIGENVALCOND_PASCAL [RECOMMENDED], or EIGENVALCOND_HARTEN}
    AXISYMMETRIC=NO; {set to YES to solve axisymmetric problems in 2D}
  );
);


Init(
  NavierStokes(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns]
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns]
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns]
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns]
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns]
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns]
    _______________________________________________________________________________________

    }
    Mx=3;
    My=-1.0;
    P=10000; {Pa}
    T=1500; {K}
    w_O=1.0e-30;
    w_O2=0.235;
    w_H2=1.0e-30;
    w_H2O=1.0e-30;
    w_H=1.0e-30;
    w_OH=1.0e-30;
    w_HO2=1.0e-30;
    w_CO=1.0e-30;
    w_CO2=1.0e-30;
    w_CH3=1.0e-30;
    w_CH4=0.02;
    w_H2O2=1.0e-30;
    w_CHO=1.0e-30;
    w_CH2O=1.0e-30;
    w_CH3O=1.0e-30;
    w_C2H3=1.0e-30;
    w_C2H4=1.0e-30;
    w_C2H5=1.0e-30;
    w_C2H6=1.0e-30;
    w_N2=0.745;
    All(INIT_TYPE2,Mx,My,P,T,w_O,w_O2,w_H2,w_H2O,w_H,w_OH,w_HO2,w_CO,w_CO2,w_CH3,w_CH4,w_H2O2,w_CHO,w_CH2O,w_CH3O,w_C2H3,w_C2H4,w_C2H5,w_C2H6,w_N2);
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE2,Mx,My,P,T,w_O,w_O2,w_H2,w_H2O,w_H,w_OH,w_HO2,w_CO,w_CO2,w_CH3,w_CH4,w_H2O2,w_CHO,w_CH2O,w_CH3O,w_C2H3,w_C2H4,w_C2H5,w_C2H6,w_N2);
    Region(is,js,  ie,je, INIT_TYPE2,Mx,My,P,T,w_O,w_O2,w_H2,w_H2O,w_H,w_OH,w_HO2,w_CO,w_CO2,w_CH3,w_CH4,w_H2O2,w_CHO,w_CH2O,w_CH3O,w_C2H3,w_C2H4,w_C2H5,w_C2H6,w_N2);
    }
  );
);


Cycle(
  NavierStokes(
    xiverge=1e2;  {residual convergence threshold}
    rhoref=1.0;  {reference density in kg/m3}
    aref=300.0;  {reference sound speed in m/s}
    Uref[1]=rhoref;   
    Uref[2]=rhoref;   
    Uref[3]=rhoref;   
    Uref[4]=rhoref;   
    Uref[5]=rhoref;   
    Uref[6]=rhoref;   
    Uref[7]=rhoref;   
    Uref[8]=rhoref;   
    Uref[9]=rhoref;   
    Uref[10]=rhoref;   
    Uref[11]=rhoref;   
    Uref[12]=rhoref;   
    Uref[13]=rhoref;   
    Uref[14]=rhoref;   
    Uref[15]=rhoref;   
    Uref[16]=rhoref;   
    Uref[17]=rhoref;   
    Uref[18]=rhoref;   
    Uref[19]=rhoref;   
    Uref[20]=rhoref;   
    Uref[21]=rhoref*aref;   
    Uref[22]=rhoref*aref;   
    Uref[23]=rhoref*aref*aref;  
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.5;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.05,0.5);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );
);


Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2/m}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min,m (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min,m}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/ms\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js, ie,je);
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
  );
  printf("    Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("    Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

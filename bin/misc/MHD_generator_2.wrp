{
  _______________________________________________________________________________________________

  WARP: a CFD Code for Plasma Aerodynamics [a]
  _______________________________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Pseudo-Time-Step Integration            Block Implicit Diagonally Dominant ADI [2,1]
  Convection Derivative Discretization    Flux Difference Splitting 2nd-Order Parent [3]
  Time Derivative Discretization          Steady-State
  Fluid Transport Model                   Favre-Reynolds with drift-diffusion plasma model [4]
  Chemical Model                          Air Plasma 8 species 28 reactions Macheret [4]
  Electron Beam Model                     Fixed Beam Energy Deposition
  Electromagnetic Fields Model            Generalized-Ohm's-law based potential equation [5,6]
  Thermodynamic Model                     NASA Glenn Polynomials [7]
  Number of Dimensions                    2
  Number of Flux Components               15
  Number of Species                       8
  Number of Charged Species               4
  List of Species                         e-, O2-, O2+, N2+, O, N, O2, N2
  _______________________________________________________________________________________________

  [a]  Parent, B. "Weakly-ionized Airflow Resolver and Post-processor: a CFD Code for Plasma
       Aerodynamics", WARP version HEAD compiled on May 12 2016 at 19:22:03 using gcc 4.8.4 with
       POSIX loop threads with assertions. WARP is a Copyright (c) 1998-2016 of Bernard Parent.
       Copying and distribution of WARP is prohibited.
  [1]  MacCormack, R.W., "A New Implicit Algorithm for Fluid Flow," 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  Bardina, J. and Lombard, C.K. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", AIAA Paper 87-1114, 1987.
  [3]  Parent, B. "Multidimensional High Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, submitted for publication, 2016.
  [4]  Parent, B., Shneider, M.N., and Macheret, S.O. "Detailed Modeling of Plasmas for
       Computational Aerodynamics", AIAA Journal, Article in Press, 2016.
  [5]  Parent, B., Shneider, M.N., and Macheret, S.O. "Generalized Ohm's Law and Potential
       Equation in Computational Weakly-Ionized Plasmadynamics", Journal of Computational
       Physics 230:1439-1453, 2011.
  [6]  Parent, B., Macheret, S.O., and Shneider, M.N. "Modeling Weakly-Ionized Plasmas in
       Magnetic Field: A New Computationally-Efficient Approach", Journal of Computational
       Physics 300:779-799, 2015.
  [7]  McBride, B.J., Zehe, M.J., and Gordon, S. "NASA Glenn Coefficients for Calculating
       Thermodynamic Properties of Individual Species", NASA TP 2002-211556, 2002.

}

 Bz=1.0;
dphi=2000;
Qbeam=2e5;


meshfact=1.3;

is=1;  js=1; 
ie=round(meshfact*44); je=round(meshfact*44);
is1=round(is+(ie-is)/3);
is2=round(is+2*(ie-is)/3);
js1=round(js+(je-js)/3);
js2=round(js+2*(je-js)/3);
 


L=0.1;
H=0.05;
N_eminus=1e17;
N_N2plus=N_eminus*0.75;
N_N2=1.931e24;
Te_init=20000.0;


dwall=1e-3/(ie-is)/5;
dwall=2e-5/meshfact;

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, L,0.0e0);
  Point(ie,je, L,H);
  Point(is,je, 0.0e0,H);
  JoinCorners(is,js, ie,je,  FE,0.5e0,dwall*3,1.0,  ff,0.5e0,dwall,dwall);
  {JoinCorners(is,js, ie,je,  EE,0.5e0,1.0,1.0,  EE,0.5e0,1.0,1.0);}
  {Rotate(is,js,ie,je, 0.0, 0.0, rad(20));}
);




Bdry(
  FavreReynoldsPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            Number     Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0          Inflow, supersonic
    BDRY_INFLOWSUBSONIC1               7          Inflow, subsonic, Tstag, Pstag fixed
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  16         Inflow, subsonic, Pstag, Massflow/Area fixed
    BDRY_OUTFLOWSUPERSONIC1            1          Outflow, supersonic
    BDRY_OUTFLOWSUBSONIC1              4          Outflow, subsonic, P fixed
    BDRY_OUTFLOWSUBSONICMFIXED1        15         Outflow, subsonic, M fixed
    BDRY_SYMMETRICAL2                  14         Symmetrical, 2nd order
    BDRY_SYMMETRICAL1                  9          Symmetrical, 1st order
    BDRY_WALLTFIXED1                    3          Wall, T specified
    BDRY_WALLADIABATIC1                 6          Wall, Adiabatic
    BDRY_SLIPWALL1                     12         Slip wall, 1st order, Adiabatic
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_WALLTFIXED1,BDRY_WALLTFIXED1);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
  EpotentialBfixed(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   Number     Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0          Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2          Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1          Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
      All(BDRYEMF_DIELECTRIC{BC type});
      Region(is1,js,is2,je,BDRYEMF_ELECTRODE);
{      Faces(BDRYEMF_DIELECTRIC,BDRYEMF_DIELECTRIC,BDRYEMF_ELECTRODE,BDRYEMF_ELECTRODE);}
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRYEMF_ELECTRODE);
    }
  );
);
 
 
Model(
 
  FavreReynoldsPlasma(
    TURBMODEL=TURBMODEL_KOMEGA1988;      {set TURBMODEL to 
                     - TURBMODEL_KOMEGA1988 for Wilcox k-omega model (1988)
                     - TURBMODEL_KOMEGA2008 for new Wilcox k-omega model (2008)
                     - TURBMODEL_KEPSILON for Launder-Sharma k-epsilon model}
    DILATDISSIP=DILATDISSIP_NONE; {the dilatational dissipation can be set to DILATDISSIP_WILCOX or DILATDISSIP_SARKAR or NO}
    RAPCOMP=NO;     {the rapid compression correction by Coakley et altrui?}
    MHDTURB=NO;     {MHD source terms to the k and epsilon/omega transport equations by Kenjeres and Hanjalic}
    TURBSOURCE=YES; {solve the turbulence source terms? if set to NO and if the turbulence 
                     kinetic energy k is set to zero in the freestream, then will solve the 
                     flow as laminar}
    TEMODEL=TEMODEL_LOCAL;    {set TE to TEMODEL_LOCAL, TEMODEL_TRANSPORT, or TEMODEL_CONSTANT}
    N2VIBMODEL=N2VIBMODEL_MACHERET;      {solve the nitrogen vibration energy source terms?} 
    N2VIBJOULEHEATING=YES; {solve the nitrogen vibration energy joule heating source terms?  } 
    REACTING=YES;   {solve chemical reactions?}
    Prt=0.9e0;      {the turbulent Prandtl number;
                      - recommended value of 0.9 in boundary layers
                      - recommended value of 0.5 in shear layers}
    Sct=1.0e0;      {the turbulent Schmidt number (0.2 -- 2)}
    kdiv=1.0e0;     {minimum magnitude of k in m2/s2 allowed when k appears on the denominator;
                     make sure that kdiv is
                   - at most one tenth the maximum value of k in the boundary layer
                     profile exhibiting the lowest maximum k for supersonic flow
                   - at most one hundredth the maximum value of k in the boundary layer}
    ADD_ETA_TO_ETAT_WITHIN_QK=NO;  {say NO for standard kinetic energy transport model}
    psidiv=0.1e-3;   {minimum magnitude of psi allowed when psi appears on the denominator}
    sigmadiv=1e-10;  {minimum magnitude of sigma in S/m allowed when sigma appears on the denominator }
    etdiv=1e-1;      {minimum magnitude of et in J/kg allowed when et appears on the denominator}
    Pmin=2000;    Pmax=9.9e99;   {min and max pressure in Pa allowed in the domain}
    Tmin=100;     Tmax=6.0e3;    {min and max temperature in K allowed in the domain}
    Tvmin=Tmin;     Tvmax=10.0e3;    {min and max vibrational temperature in K allowed in the domain}
    Temin=Tmin;     Temax=60.0e3;    {min and max electron temperature in K allowed in the domain}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature in K allowed on any wall boundary node}
    kmin=1.0e-10;   kmax=9.9e99;   {min and max TKE in m2/s2 allowed in the domain}
    psimin=1e-10;   psimax=9.9e99; {min and max omega/epsilon allowed in the domain}
    wmin=1.0e-20;                  {min mass fraction allowed in the domain for neutrals}
    wimin=1e-15;    wimax=1e-4;                {min and max ion mass fraction }
    wemin=1e-20;    wemax=1e-9;                {min and max electron mass fraction }
    Nminbdry=1e8;  {the minimum number density in 1/m3 for the charged species at the bdry nodes}
    gamma=0.1e0;   {secondary emission coefficient used to calculate the electron density at the cathode}
    zetaA1=0.0e0;   {conditions the eigenvalues of the A jacobian}
    zetaA2=0.2;
    zetaA3=0.8e0;  {conditions the eigenvalues of the inverted A jacobian }
    
    EIGENVALCOND=EIGENVALCOND_PECLET; {set the Lambda conditioning to EIGENVALCOND_PECLET or EIGENVALCOND_HARTEN}
    zetaD=1.0;     {conditions the Dstar eigenvalues for the charged species}
    AXISYMMETRIC=NO; {set to YES to solve axisymmetric problems in 2D}
  );
 
  EpotentialBfixed(
    Te_buffer=3000.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,T+Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Ediv=100.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
    Jmax=20000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetSolidConductivity(is,js, ie,je, 0.0 {S/m});
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
    SetMagneticField(is,js, ie,je, 0{T},0{T},Bz{T});
    {make sure that (A_x,A_y,A_z) or (B_x,B_y,B_z) do not lie on top of a node }
    {AddMagnetDipole({A_x}0, {A_y}0, {A_z}0, {B_x}0, {B_y}0.01, {B_z}0, {Bd}1);} {add a dipole with the origin at A, and strength Bd at B}
    {AddMagnetDipoleRow({A_x}0, {A_y}0, {A_z}0, {B_x}0, {B_y}0.01, {B_z}0, {Bd}1, {numsteps}200);} {add a dipole row starting from A and ending at B, with Bd the flux}
  );
 
  EbeamFixed(
    SetQbeam(is1,js, is2,je,  Qbeam{W/m3});
  );
);


Init(
  FavreReynoldsPlasma(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     k, psi, Tv, Te
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     k, psi, Tv, Te
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     k, psi, Tv, Te
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     k, psi, Tv, Te
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     k, psi, Tv, Te
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], k, psi, Tv, Te
    _______________________________________________________________________________________

    (a) in the freestream inflow conditions, it is suggested to set psi to 10*(flow speed)
        for the 1988 k-omega model and 110*(flow speed) for the 2008 k-omega model
    (b) for hypersonic flows, the freestream value of psi can be further multiplied by
        up to 5 times if necessary
    }
    Vx=600; {m/s}
    Vy=0; {m/s}
    P=10000; {Pa}
    T=300; {K}
    k=0;   {J/kg}
    psi=10*sqrt(Vx^2+Vy^2); {1/s for TURBMODEL=TURBMODEL_KOMEGA*}
    Tv=T; {K}
    Te=3000; {K}
    chi_eminus=1e-12;
    chi_O2minus=0.0;
    chi_O2plus=1e-12;
    chi_N2plus=0.0;
    chi_O2=0.25;
    chi_N2=0.75;
    chi_O=0.0;
    chi_N=0.0;
    All(6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,k,psi,Tv,Te);
    {
    Bdry(BDRY_WALLTFIXED1, 6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,k,psi,Tv,Te);
    Region(is,js,  ie,je, 6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,k,psi,Tv,Te);
    }
  );
  EpotentialBfixed(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
        All(1,dphi);
        Region(is,js,  ie,js,
               1,0);
    {
    Bdry(BDRYEMF_ELECTRODE, 1,phi);
    Region(is,js,  ie,je,1,phi);
    }
  );
);


Cycle(
  FavreReynoldsPlasma(
    xiverge=1e-3;         {residual convergence threshold}
    zetaGammai=0.1;       {factor multiplying the pseudotime step of the ion species transport equations
                           when PRECONDITIONER is set to TRUE} 
    zetaGammae=0.003;      {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode when PRECONDITIONER is set to TRUE} 
    relaxNi_bdry=1.0; {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.2;    {the electron density relaxation factor at the boundary }
    relaxTe=0.3;      {the electron temperature relaxation factor }
    rhoref=0.1;           {reference density in kg/m3}
    Tref=300.0;           {reference electron temperature in K}
    Teref=20000.0;        {reference electron temperature in K}
    Tvref=5000.0;         {reference vibrational temperature in K}
    kref=1e4;             {reference turbulence kinetic energy in m2/s2}
    psiref=1e8;           {reference specific dissipation rate of the TKE in 1/s if TURBMODEL=TURBMODEL_KOMEGA*
                           reference dissipation rate of the TKE in m2/s3 if TURBMODEL=TURBMODEL_KEPSILON}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-7;            {average ion mass fraction}
    Uref[1]=wion*1.8e-5*rhoref;   
    Uref[2]=wion*rhoref;   
    Uref[3]=wion*rhoref;   
    Uref[4]=wion*rhoref;   
    Uref[5]=rhoref;   
    Uref[6]=rhoref;   
    Uref[7]=rhoref;   
    Uref[8]=rhoref;   
    Uref[9]=rhoref*aref;   
    Uref[10]=rhoref*aref;   
    Uref[11]=rhoref*aref*aref;  
    Uref[12]=rhoref*kref;  
    Uref[13]=rhoref*psiref;  
    Uref[14]=rhoref*700.0*Tvref;  
    Uref[15]=rhoref*wion*414*Teref;  
  );
  EpotentialBfixed(
    xiverge_emfield=1e-2; {residual convergence threshold for the potential equation}
    relaxEk=0.5; {relaxation factor for E in species frame}
    relaxphi_bdry=1.0; {relaxation factor for phi at the dielectric boundaries}
    sigmaref=0.003; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALEIGENVALUE;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.05,2.0);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    Lc=2e-3;  {characteristic length scale used to solve the emfield equation}
    relaxEMF=1.0;  {relaxation factor forced on the update of the emfield variables}
    UpdateEMField(Lc,relaxEMF);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %6.0f %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,Lc,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
  );
);


Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2/m}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min,m (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min,m}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/ms\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js, ie,je);
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(dim);
  );
  printf("    Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("    Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("    Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  printf("    Qbeam     = %+E W/m\n",_Qbeam());
  printf("    EdotJ     = %+E W/m\n",_EdotJ());
  printf("    Wemfield  = %+E W/m\n",_Wemfield()); {Wemfield=Femfield dot Vn}
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

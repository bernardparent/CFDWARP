{
  _______________________________________________________________________________________________

                                           C F D W A R P

                                CFD Code for Plasma & Reactive Flow
  _______________________________________________________________________________________________

  Version                          20aug18a
  Compiler                         gcc 8.3.0 with OPENMP threads
  Compiled on                      Aug 19 2020 at 21:59:07
  Cycle Strategy                   Standard
  Fluid Relaxation                 Block DDADI [2,1]
  EM Field Relaxation              Implicit schemes based on approximate factorization including
                                   ADI [4], DDADI [2,1], and IMAF [3]
  Convection Discretization        Reconstruction-Evolution MUSCL with flux FVS [5], FDS [7],
                                   and primitive interpolation TVD [6], WENO [9], CWENO [11],
                                   AOWENO [10], and eigenvalue conditioning HARTEN, GNOFFO
                                   [12], PECLET [13], PASCAL [8], and PARENT positivity-
                                   preserving filter [14]
  Temporal Discretization          Steady-State
  Fluid Model                      Navier-Stokes with drift-diffusion plasma model [15]
  Thermodynamic Model              NASA Glenn Polynomials [16]
  Chemical Model                   Air Plasma 11s Dunn-Kang [17]
  EM Field Model                   Electric field potential [18]
  Beam Model                       None
  Number of Dimensions             2
  Number of Flux Components        16
  Number of Species                11
  Number of Charged Species        6
  List of Species                  e-, O+, N+, O2+, N2+, NO+, O, N, NO, O2, N2
  _______________________________________________________________________________________________

  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  RW MacCormack. "Iterative Modified Approximate Factorization", Computers and Fluids
       30:917-925, 2001.
  [4]  DW Peaceman and HH Rachford. "The Numerical Solution of Parabolic and Elliptic
       Differential Equations", J. Soc. Ind. Appl. Math. 3:28-41, 1955.
  [5]  JL Steger and RF Warming. "Flux Vector Splitting of the Inviscid Gasdynamic Equations
       with Application to Finite-Difference Methods", Journal of Computational Physics 40:263-
       293, 1981.
  [6]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [7]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [8]  B Parent. "Positivity-Preserving Dual Time Stepping Schemes for Gas Dynamics", Journal of
       Computational Physics 361:391-411, 2018.
  [9]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [10] DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [11] M Dumbser and M Kaser. "Arbitrary High Order Non-oscillatory Finite Volume Schemes on
       Unstructured Meshes for Linear Hyperbolic Systems", Journal of Computational Physics,
       221:693-723, 2007.
  [12] P Gnoffo and  JA White. "Computational Aerothermodynamic Simulation Issues on
       Unstructured Grids", 37th AIAA Thermophysics Conference, AIAA Paper 2004-2371, 2004.
  [13] B Parent. "Multidimensional High-Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, 55:141-152, 2017.
  [14] B Parent. "Making a Flux Positivity-Preserving: A General Purpose Filter for the Euler
       Equations", AIAA Paper 2019-0906, AIAA Scitech, San Diego CA, 2019.
  [15] B Parent, MN Shneider, and SO Macheret. "Detailed Modeling of Plasmas for Computational
       Aerodynamics", AIAA Journal, 54:898-911, 2016.
  [16] BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.
  [17] MG Dunn and SW Kang. "Theoretical and Experimental Studies of Reentry Plasmas", NASA CR-
       2232, 1973.
  [18] B Parent, SO Macheret, and MN Shneider. "Electron and Ion Transport Equations in
       Computational Weakly-Ionized Plasmadynamics", Journal of Computational Physics 259:51-
       69, 2014.


}

 




mf=4;


is=1;  
im1=round(15*mf/2);
im2=round(105*mf/2);
im3=round(145*mf/2); 
im4=round(235*mf/2); 
ie=round(250*mf/2); 

js=1;
jm=round(120*mf/2);
je=round(150*mf/2);


Rin=0.003;
Rout=0.03;
Rbow=Rin+0.002;
Rbowstag=Rin+0.0008;
Routstag=0.02;
H=0.04;
Lplate=0.1;
delta=16/180*pi; {wedge angle}
phi=rad(36);
Lwake=0.04;
Hbdry=0.015; {height of boundary layer at the domain exit}
dxwall=0.25e-6/mf;

dywall=4e-6/mf;





Grid(
  Size(is,js, ie,je);

  for (i,im2,im3,
    theta=-(pi/2-delta)+(i-im2)/(im3-im2)*(pi-2*delta);
    fact=abs(theta/(pi/2-delta))^3;
    Rbowx=Rbow*fact+Rbowstag*(1-fact); 
    Routx=Rout*fact+Routstag*(1-fact); 
    Point(i,js, -Rin*cos(theta),Rin*sin(theta));  
    Point(i,jm, -Rbowx*cos(theta),Rbow*sin(theta));  
    Point(i,je, -Routx*cos(theta),Rout*sin(theta));  
  );

  Join(im2,js,im3,jm,j,FE,0.5,dxwall,1);
  Join(im2,jm,im3,je,j,GE,0.5,1,1);

  Point(im4,js, Lplate*cos(delta), Lplate*sin(delta)+Rin);
  Point(im4,jm, Lplate*cos(delta), Lplate*sin(delta)+Rin+Hbdry);
  Point(im4,je, Lplate*cos(delta), Lplate*sin(delta)+Rin+H);
  Join(im4,js,im4,jm, j, FE,0.2,dywall,1.0);
  Join(im4,jm,im4,je, j, GE,0.9,1.0,1.0);


  Point(im1,js, Lplate*cos(delta), -Lplate*sin(delta)-Rin);
  Point(im1,jm, Lplate*cos(delta), -Lplate*sin(delta)-Rin-Hbdry);
  Point(im1,je, Lplate*cos(delta), -Lplate*sin(delta)-Rin-H);
  Join(im1,js,im1,jm, j, FE,0.2,dywall,1.0);
  Join(im1,jm,im1,je, j, GE,0.9,1.0,1.0);

  
  Join(im3,js,im4,je, i, GE,0.2,1,1);
  Join(im1,js,im2,je, i, EG,0.8,1,1);
  
  

  Point(ie,js,Lplate*cos(delta)+Lwake*cos(delta-phi),Lplate*sin(delta)-Lwake*sin(phi-delta));
  Point(ie,jm,Lplate*cos(delta)+Lwake*cos(delta-phi),Lplate*sin(delta)-Lwake*sin(phi-delta)+Hbdry*2);
  Point(ie,je,Lplate*cos(delta)+Lwake*cos(delta-phi),(Lplate+Lwake)*sin(delta)+H);
  Join(ie,js,ie,jm, j, FE,0.2,dywall*2,1.0);
  Join(ie,jm,ie,je, j, GE,0.9,1.0,1.0);

  Join(im4,js,ie,je, i, GE, 0.5,1.0,1.0);



  Point(is,js,Lplate*cos(delta)+Lwake*cos(delta-phi),-Lplate*sin(delta)+Lwake*sin(phi-delta));
  Point(is,jm,Lplate*cos(delta)+Lwake*cos(delta-phi),-Lplate*sin(delta)+Lwake*sin(phi-delta)-Hbdry*2);
  Point(is,je,Lplate*cos(delta)+Lwake*cos(delta-phi),-(Lplate+Lwake)*sin(delta)-H);
  Join(is,js,is,jm, j, FE,0.2,dywall*2,1.0);
  Join(is,jm,is,je, j, GE,0.9,1.0,1.0);

  Join(is,js,im1,je, i, EG, 0.5,1.0,1.0);


);



Bdry(
  NavierStokesPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            ID   Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0    Inflow, supersonic, 1o
    BDRY_INFLOWSUBSONIC1               7    Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  g    Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1            1    Outflow, supersonic, 1o
    BDRY_OUTFLOWSUPERSONIC2            2    Outflow, supersonic, 2o
    BDRY_OUTFLOWSUBSONIC1              4    Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1        f    Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                  e    Symmetrical, 2o
    BDRY_SYMMETRICAL1                  9    Symmetrical, 1o
    BDRY_WALLTFIXED1                   3    Wall, T specified
    BDRY_WALLADIABATIC1                6    Wall, Adiabatic
    BDRY_SLIPWALL1                     c    Slip wall, Adiabatic, 1o
    BDRY_FREESTREAM1                   5    Freestream, 1o, params Vx,Vy, P, T
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    Faces(BDRY_OUTFLOWSUPERSONIC1,BDRY_OUTFLOWSUPERSONIC1,  BDRY_WALLTFIXED1,BDRY_INFLOWSUPERSONIC);
    Region(is,js,  im1,js,  BDRY_SLIPWALL1);
    Region(im4,js,  ie,js,  BDRY_SLIPWALL1);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    Link(i1,j1,  i2,j2);
    Param(is,js,  ie,je,  BDRY_FREESTREAM1, Vx,Vy,P,T);
    }
  );
  Epotential(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   ID   Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0    Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2    Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1    Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
    All(BDRYEMF_DIELECTRIC);
    {Faces(BDRYEMF_ELECTRODE,BDRYEMF_ELECTRODE,  BDRYEMF_DIELECTRIC,BDRYEMF_DIELECTRIC);}
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRYEMF_ELECTRODE);
    Link(i1,j1,  i2,j2);
    }
  );
);
 
 
Model(
  NavierStokesPlasma(
    TEMODEL=TEMODEL_TRANSPORT;
    TETRANSPORT_WEEE_TWOTEMPERATURE=FALSE;
    N2VIBMODEL=N2VIBMODEL_MACHERET;
    N2VIBJOULEHEATING=YES;
    REACTING=YES;
    emfieldworkheatfact=1.0;   {factor multiplying the emfield work and heat source terms}
    sigmadiv=1e-10; {S/m}
    etdiv=1e-1;     {J/kg}
    Pmin=1.0e-2;    Pmax=9.9e99;   {Pa}
    Tmin=1.0e1;     Tmax=16.0e3;    {K}
    Tvmin=Tmin;     Tvmax=16.0e3;  {K}
    Temin=240;     Temax=60.0e3;  {K}
    Twmin=Tmin;     Twmax=Tmax;    {K}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain for neutrals}
    chiimin=1e-30;  chiimax=1.0;    {min and max ion molar fraction}
    chiemin=1e-12;  chiemax=1.0;    {min and max electron molar fraction}
    Nminbdry=1e8;   {the minimum number density in 1/m3 for the charged species at the bdry nodes}
    gamma=0.1e0;    {secondary emission coefficient}
    AXISYMMETRIC=NO;
  );
  AirPlasma11s(
    CHEMMODEL=CHEMMODEL_LENARD1964;
    TOWNSENDIONIZATION=TRUE; {include reactions function of EoverN}
    TOWNSENDIONIZATIONIMPLICIT=FALSE; {keep this to FALSE even if TOWNSENDIONIZATION=TRUE}
  );
  Epotential(
    Te_buffer=0.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Jmax=20000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,je, 1.0 );
    SetSolidConductivity(is,js, ie,je, 0.0 {S/m});
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
  );
);


Init(
  NavierStokesPlasma(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     Tv, Te
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], Tv, Te
    _______________________________________________________________________________________

    }
    Pdyn=10000; {Pa}
    Vx=5270; {m/s}
    Vy=0; {m/s}
    rho=Pdyn/(Vx^2+Vy^2);
    T=240; {K}
    P=rho*286*T; {Pa}
    Twall=1800; {K}
    Tv=T; {K}
    Te=T; {K}
    chi_eminus=1e-13;
    chi_Oplus=1e-13;
    chi_Nplus=1.0e-30;
    chi_O2plus=1.0e-30;
    chi_N2plus=1.0e-30;
    chi_NOplus=1.0e-30;
    chi_O=1.0e-30;
    chi_N=1.0e-30;
    chi_NO=1.0e-30;
    chi_O2=0.21;
    chi_N2=0.79;

    
    All(INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_Oplus,chi_Nplus,chi_O2plus,chi_N2plus,chi_NOplus,chi_O,chi_N,chi_NO,chi_O2,chi_N2,Tv,Te);
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE6,Vx,Vy,P,Twall,chi_eminus,chi_Oplus,chi_Nplus,chi_O2plus,chi_N2plus,chi_NOplus,chi_O,chi_N,chi_NO,chi_O2,chi_N2,Tv,Te);
    
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_Oplus,chi_Nplus,chi_O2plus,chi_N2plus,chi_NOplus,chi_O,chi_N,chi_NO,chi_O2,chi_N2,Tv,Te);
    Region(is,js,  ie,je, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_Oplus,chi_Nplus,chi_O2plus,chi_N2plus,chi_NOplus,chi_O,chi_N,chi_NO,chi_O2,chi_N2,Tv,Te);
    }
  );
  Epotential(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
    phi=0.0; {V}
    All(INITEMF_TYPE1,phi);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,  ie,je,INITEMF_TYPE1,phi);
    }
  );
);


Disc(
  NavierStokesPlasma(
    zetaA1=0.1e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.2e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
    zetaD=1.0;        {conditions the Dstar eigenvalues for the charged species}
    betag[1]=-0.0010;
    betag[2]=1.0000;
    betag[3]=1.0000;
    betag[4]=1.0000;
    betag[5]=1.0000;
    betag[6]=1.0000;
    betaa[1]=0.9990;
    betaa[2]=0.0000;
    betaa[3]=0.0000;
    betaa[4]=0.0000;
    betaa[5]=0.0000;
    betaa[6]=0.0000;
  );
  Epotential(
    POTENTIAL=POTENTIAL_OHMBASED;
    Ediv=10.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.999;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_PARENT;
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=4;
  );
);


Cycle(
  NavierStokesPlasma(
    xiverge=1e-3;         {residual convergence threshold}
    zetaGammai=1.0;       {factor multiplying the pseudotime step of the ion species transport equations} 
    zetaGammae=1.0;       {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode}
    relaxNi_bdry=1.0;     {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.2;     {the electron density relaxation factor at the boundary }
    relaxTe=0.3;          {the electron temperature relaxation factor }
    rhoref=0.1;           {reference density in kg/m3}
    Tref=300.0;           {reference temperature in K}
    Teref=20000.0;        {reference electron temperature in K}
    Tvref=5000.0;         {reference vibrational temperature in K}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-7;            {average ion mass fraction}
    Uref[1]=wion*1.8e-5*rhoref;   
    Uref[2]=wion*rhoref;   
    Uref[3]=wion*rhoref;   
    Uref[4]=wion*rhoref;   
    Uref[5]=wion*rhoref;   
    Uref[6]=wion*rhoref;   
    Uref[7]=rhoref;   
    Uref[8]=rhoref;   
    Uref[9]=rhoref;   
    Uref[10]=rhoref;   
    Uref[11]=rhoref;   
    Uref[12]=rhoref*aref;   
    Uref[13]=rhoref*aref;   
    Uref[14]=rhoref*aref*aref;  
    Uref[15]=rhoref*700.0*Tvref;  
    Uref[16]=rhoref*wion*414*Teref;  
  );
  Epotential(
    xiverge_emfield=1e-2; {residual convergence threshold for the potential equation}
    sigmaref=3e-6; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );
  SteadyState(
    if (mod(iter,250)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.0;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.01;
    );
    if (iter==1 || iter==(round(200*mf)-1),
      CFL=0.01;
    );
    if (iter<round(200*mf),
      Model(
        NavierStokesPlasma(TEMODEL=TEMODEL_CONSTANT; Temax=15000; emfieldworkheatfact=0.0; wimax=0.001;);
        Epotential(Jmax=0.0;);
      );
      Cycle(
        NavierStokesPlasma(relaxTe=0.3;);
      );
      sigma1=0.0;
      CFLmax=0.3;
    ,{else}
      Model(
        NavierStokesPlasma(TEMODEL=TEMODEL_TRANSPORT; Temax=50000;  emfieldworkheatfact=1.0;wimax=0.001; );
        Epotential(Jmax=200000.0;);
      );
      Cycle(
        NavierStokesPlasma(relaxTe=0.8;); {used to be 0.1}
      );
      sigma1=0.0;
      CFLmax=0.3;
    );
    if (iter>2000*mf/2, CFLmax=0.6;);
    if (iter>4000*mf/2, CFLmax=1.2;);
    if (iter>10000*mf/2, CFLmax=2.2;);
    system("date");
    CFL=min(CFL*1.01,CFLmax);
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2);
    Lc=3e3;      {characteristic length scale in meters used to solve the emfield equation}
    relaxEMF=0.9; {relaxation factor forced on the update of the emfield variables}
    if (TRUE,
      if (iter>100000*mf, 
        UpdateEMField(Lc,relaxEMF, TSEMF_SOR, round(600));
        UpdateEMField(Lc,relaxEMF, TSEMF_IMAF, 100); 
        UpdateEMField(Lc,relaxEMF, TSEMF_SOR, round(600)); 
      , {else}
        UpdateEMField(Lc,relaxEMF, TSEMF_SOR, round(200));
      
      );
    ,{else}
      UpdateEMField(Lc,relaxEMF, TSEMF_NEWTON);
    );
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
  );
);


Post(
  xstation[1]=0.1; {m}
  xstation[2]=0.2; {m}
  xstation[3]=0.3; {m}
  numsteps=300;
  qmin=1.0; {m/s, as small a value as possible}
  Pback_min=400; {Pa}
  Pback_max=40000; {Pa}
  Aback=1.0; {m2/m}
  for (cnt,1,3,
    XSTATION_Set(xstation[cnt]);
    Pback=XSTATION_Pback(Aback, Pback_min, Pback_max, numsteps, qmin);
    Fpot=XSTATION_Fpot(Pback, numsteps, qmin);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag(numsteps);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    fprintf(postfilename,"x      = %E m\n"
           "Pback  = %E Pa\n"
           "Fpot   = %E Ns/kg\n"
           "mdot   = %E kg/ms\n"
           "htstar = %E J/kg\n"
           "Tstag  = %E K\n"
           "Pstag  = %E Pa\n"
           "Pstar  = %E Pa\n"
           "T      = %E K\n"
           "q      = %E m/s\n"
           "rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  fprintf(postfilename,"\n");
  for (dim,1,2,
    Area[dim]=_Area(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(is,js, ie,je, dim);
  );
  fprintf(postfilename,"Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  fprintf(postfilename,"Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  fprintf(postfilename,"Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  fprintf(postfilename,"metotal   = %+E J/m\n",_metotal(is,js, ie,je));
  fprintf(postfilename,"m         = %+E J/m\n",_m(is,js, ie,je));
  fprintf(postfilename,"Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  fprintf(postfilename,"Qbeam     = %+E W/m\n",_Qbeam(is,js, ie,je));
  fprintf(postfilename,"EdotJ     = %+E W/m\n",_EdotJ(is,js, ie,je));
  fprintf(postfilename,"Wemfield  = %+E W/m\n",_Wemfield(is,js, ie,je)); {Wemfield=Femfield dot Vn}
  fprintf(postfilename,"\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js, ie,je, "post.01", "tecplot", POSTGRIDONLY);
  }
);

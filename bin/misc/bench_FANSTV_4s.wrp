{
  _______________________________________________________________________________________________

  WARP: a CFD Code for Plasma Aerodynamics [a]
  _______________________________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Explicit
  EM Field Integration                    none
  Convection Derivative Discretization    Flux Difference Splitting 2nd-Order Parent [1]
  Time Derivative Discretization          Steady-State
  Fluid Transport Model                   Favre-Reynolds Multispecies N2 Vibrational Energy
                                          Transport
  Chemical Model                          Air Plasma 4 species 13 reactions
  Beam Model                              None
  EM Field Model                          None
  Thermodynamic Model                     NASA Glenn Polynomials [2]
  Number of Dimensions                    2
  Number of Flux Components               10
  Number of Species                       4
  Number of Charged Species               0
  List of Species                         O2, N2, O, N
  _______________________________________________________________________________________________

  [a]  Parent, B. "Weakly-ionized Airflow Resolver and Post-processor: a CFD Code for Plasma
       Aerodynamics", WARP version HEAD compiled on May 28 2016 at 10:44:22 using gcc 4.8.4 with
       assertions. WARP is a Copyright (c) 1998-2016 of Bernard Parent. Copying and distribution
       of WARP is prohibited.
  [1]  Parent, B. "Multidimensional High Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, submitted for publication, 2016.
  [2]  McBride, B.J., Zehe, M.J., and Gordon, S. "NASA Glenn Coefficients for Calculating
       Thermodynamic Properties of Individual Species", NASA TP 2002-211556, 2002.

}

 

is=1;  js=1; 
ie=40; je=40;

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, 1.0e0,0.0e0);
  Point(ie,je, 1.0e0,1.0e0);
  Point(is,je, 0.0e0,1.0e0);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
  Rotate(is,js,ie,je,0.0,0.0,rad(20));
);


Bdry(
  FavreReynoldsTv(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            Number    Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0         Inflow, supersonic
    BDRY_INFLOWSUBSONIC1               7         Inflow, subsonic, Tstag, Pstag fixed
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  16        Inflow, subsonic, Pstag, Massflow/Area fixed
    BDRY_OUTFLOWSUPERSONIC1            1         Outflow, supersonic
    BDRY_OUTFLOWSUBSONIC1              4         Outflow, subsonic, P fixed
    BDRY_OUTFLOWSUBSONICMFIXED1        15        Outflow, subsonic, M fixed
    BDRY_SYMMETRICAL2                  14        Symmetrical, 2nd order
    BDRY_SYMMETRICAL1                  9         Symmetrical, 1st order
    BDRY_WALLTFIXED1                    3         Wall, T specified
    BDRY_WALLADIABATIC1                 6         Wall, Adiabatic
    BDRY_SLIPWALL1                     12        Slip wall, 1st order, Adiabatic
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_SYMMETRICAL1,BDRY_SYMMETRICAL1);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
);
 
 
Model(
 
  FavreReynoldsTv(
    TURBMODEL=TURBMODEL_KOMEGA2008;      {set TURBMODEL to 
                     - TURBMODEL_KOMEGA1988 for Wilcox k-omega model (1988)
                     - TURBMODEL_KOMEGA2008 for new Wilcox k-omega model (2008)
                     - TURBMODEL_KEPSILON for Launder-Sharma k-epsilon model}
    DILATDISSIP=DILATDISSIP_NONE; {the dilatational dissipation can be set to DILATDISSIP_WILCOX or DILATDISSIP_SARKAR or NO}
    RAPCOMP=NO;     {the rapid compression correction by Coakley et altrui? (either YES or NO)}
    TURBSOURCE=YES; {solve the turbulence source terms? if set to NO and if the turbulence 
                     kinetic energy k is set to zero in the freestream, then will solve the 
                     flow as laminar}
    N2VIBMODEL=N2VIBMODEL_MACHERET;      {the nitrogen vibration energy source terms can be set to N2VIBMODEL_MACHERET or N2VIBMODEL_MILLIKAN } 
    
    REACTING=YES;   {reacting flow? say either YES or NO -> only effective when a chemical solver is used}
    Prt=0.9e0;      {the turbulent Prandtl number;
                      - recommended value of 0.9 in boundary layers
                      - recommended value of 0.5 in shear layers}
    Sct=1.0e0;      {the turbulent Schmidt number;
                      - set it to a value between 0.2 and 2}
    kdiv=1.0e0;     {minimum magnitude of k in m2/s2 allowed when k appears on the denominator;
                     make sure that kdiv is
                   - at most one tenth the maximum value of k in the boundary layer
                     profile exhibiting the lowest maximum k for supersonic flow
                   - at most one hundredth the maximum value of k in the boundary layer}
    ADD_ETA_TO_ETAT_WITHIN_QK=NO;  {say NO for standard kinetic energy transport model}
    psidiv=0.1e-3;   {minimum magnitude of psi allowed when psi appears on the denominator}
    Pmin=1.0e-2;    Pmax=9.9e99;   {min and max pressure in Pa allowed in the domain}
    Tmin=1.0e1;     Tmax=6.0e3;    {min and max temperature in K allowed in the domain}
    Tvmin=Tmin;     Tvmax=Tmax;    {min and max vibrational temperature in K allowed in the domain}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature in K allowed on any wall boundary node}
    kmin=1.0e-10;   kmax=9.9e99;   {min and max TKE in m2/s2 allowed in the domain}
    psimin=1e-10;   psimax=9.9e99; {min and max omega/epsilon allowed in the domain}
    wmin=1.0e-20;                  {min mass fraction allowed in the domain}
    zetaA1=0.2e0;    {conditions the eigenvalues of the A jacobian}
    zetaA2=0.2;
    zetaA3=0.2e0; {conditions the eigenvalues of the inverted A jacobian}
    
    EIGENVALCOND=EIGENVALCOND_PECLET; {set the Lambda conditioning to EIGENVALCOND_PECLET or EIGENVALCOND_HARTEN}
    AXISYMMETRIC=NO; {set to YES to solve axisymmetric problems in 2D}
  );
);


Init(
  FavreReynoldsTv(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     k, psi, Tv
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     k, psi, Tv
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     k, psi, Tv
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     k, psi, Tv
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     k, psi, Tv
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], k, psi, Tv
    _______________________________________________________________________________________

    (a) in the freestream inflow conditions, it is suggested to set psi to 10*(flow speed)
        for the 1988 k-omega model and 110*(flow speed) for the 2008 k-omega model
    (b) for hypersonic flows, the freestream value of psi can be further multiplied by
        up to 5 times if necessary
    }
    Mx=2;
    My=0;
    P=10000; {Pa}
    T=3000; {K}
    k=0; {J/kg}
    psi=110*sqrt(Mx^2+My^2)*sqrt(1.4*287*T); {1/s for TURBMODEL=TURBMODEL_KOMEGA*}
    Tv=3000; {K}
    w_O2=0.235-0.01;
    w_N2=0.765-0.01;
    w_O=0.01;
    w_N=0.01;
    All(2,Mx,My,P,T,w_O2,w_N2,w_O,w_N,k,psi,Tv);
    {
    Bdry(BDRY_WALLTFIXED1, 2,Mx,My,P,T,w_O2,w_N2,w_O,w_N,k,psi,Tv);
    Region(is,js,  ie,je, 2,Mx,My,P,T,w_O2,w_N2,w_O,w_N,k,psi,Tv);
    }
  );
);


Cycle(
  FavreReynoldsTv(
    xiverge=1e-3;  {residual convergence threshold}
    rhoref=0.1;  {reference density in kg/m3}
    Tref=300.0;  {reference electron temperature in K}
    Tvref=5000.0;  {reference vibrational temperature in K}
    kref=1e4;  {reference turbulence kinetic energy in m2/s2}
    psiref=1e8;  {reference specific dissipation rate of the TKE in 1/s if TURBMODEL=TURBMODEL_KOMEGA*
                  reference dissipation rate of the TKE in m2/s3 if TURBMODEL=TURBMODEL_KEPSILON}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    Uref[1]=rhoref;   
    Uref[2]=rhoref;   
    Uref[3]=rhoref;   
    Uref[4]=rhoref;   
    Uref[5]=rhoref*aref;   
    Uref[6]=rhoref*aref;   
    Uref[7]=rhoref*aref*aref;  
    Uref[8]=rhoref*kref;  
    Uref[9]=rhoref*psiref;  
    Uref[10]=rhoref*700.0*Tvref;  
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.1,0.1);
    if (iter==20,
      exit(1);
    );
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );
);


Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2/m}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min,m (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min,m}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/ms\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js, ie,je);
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
  );
  printf("    Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("    Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

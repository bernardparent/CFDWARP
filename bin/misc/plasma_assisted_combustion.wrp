{
  _______________________________________________________________________________________________

  WARP: a CFD Code for Plasma Aerodynamics [a]
  _______________________________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block DDADI [2,1]
  EM Field Integration                    IMAF [3]
  Convection Derivative Discretization    Positivity-Preserving FDS [4] with TVD 2nd Order for
                                          the mass fractions and WENO 7th Order [5] for other
                                          MUSCL variables
  Time Derivative Discretization          Positivity-Preserving Cross-Difference Formula Parent
                                          First-Order [6]
  Fluid Transport Model                   Navier-Stokes with drift-diffusion plasma model [7]
  Chemical Model                          H2 Air Plasma 14 species 47 reactions [8,7]
  Beam Model                              None
  EM Field Model                          Potential based on Ohm's law [9]
  Thermodynamic Model                     NASA Glenn Polynomials [10]
  Number of Dimensions                    2
  Number of Flux Components               19
  Number of Species                       14
  Number of Charged Species               4
  List of Species                         e-, O2-, O2+, N2+, O, N, H, OH, H2O, HO2, H2O2, H2, O2,
                                          N2
  _______________________________________________________________________________________________

  [a]  B Parent. "Weakly-ionized Airflow Resolver and Post-processor: a CFD Code for Plasma
       Aerodynamics", WARP version 17jan05a compiled on Jan  5 2017 at 15:30:14 using gcc 4.8.4
       with OPENMP threads. WARP is a Copyright (c) 1998-2017 of Bernard Parent. Copying and
       distribution of WARP is prohibited.
  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  RW MacCormack. "Iterative Modified Approximate Factorization", Computers and Fluids
       30:917-925, 2001.
  [4]  B Parent. "Positivity-Preserving Flux Difference Splitting Schemes", Journal of
       Computational Physics 243:194-209, 2013.
  [5]  DS Balsara and CW Shu. "Monotonicity Preserving Weighted Essentially Non-Oscillatory
       Schemes with Increasingly High Order of Accuracy", Journal of Computational Physics
       160:405-452, 2000.
  [6]  B Parent. "Positive Coefficients, Cross Differences, and Dual-Time-Stepping Schemes",
       under review, 2017.
  [7]  B Parent, MN Shneider, and SO Macheret. "Detailed Modeling of Plasmas for Computational
       Aerodynamics", AIAA Journal, 54:898-911, 2016.
  [8]  CJ Jachimowsky. "An Analytical Study of the Hydrogen-Air Reaction Mechanism With
       Application To Scramjet Combustion", NASA TP-2791, 1988.
  [9]  B Parent, SO Macheret, and MN Shneider. "Electron and Ion Transport Equations in
       Computational Weakly-Ionized Plasmadynamics", Journal of Computational Physics 259:51-69,
       2014.
  [10] BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.

}


if (UNSTEADY,
  mf=0.4; 
,{else}
  mf=0.7;
);


xs0=0.0;
xs1=0.215; {start of exposed electrode}
xs2=0.22; {end of exposed electrode}
xs3=0.227; {start of buried electrode}
xs4=0.25; {end of buried electrode}
xs5=0.42; {end of high resolution region}  

Hdielectric=300e-6; {depth of buried electrode}
Hfluid=0.1; 
Hbdry=0.0013;
itermin=10;

INITIAL_CONDITIONS=FALSE;

if (INITIAL_CONDITIONS,
  tmax=3e-4*1e5;   {simulation time span in seconds}
  Vpp=0; 
  numcycle=1;
  CFLmin=0.1;
  CFLmax=2.0;
  itermax=4800;
  REACTING=NO;
,{else}
  freq=10000; {Hz} {was 50000}
  Vpp=80000;{V} {was 50000}
  numcycle=3;
  tmax=numcycle/freq; {was 1e-5}  {simulation time span in seconds}
  
  CFLmin=0.02;
  CFLmax=2.5; {was 1.3}
  itermax=150; {was 130}
  REACTING=YES;
);


is0=1;
is1=round(is0+100*mf);
is2=round(is1+12*mf);
is3=round(is2+18*mf);
is4=round(is3+54*mf);
is5=round(is4+70*mf);

js0=1;
js1=round(js0+12*mf);
js2=round(js1+12*mf);
js3=round(js2+45*mf);
js4=round(js3+90*mf);

is=is0;  js=js0; 
ie=is5; je=js4;

dy=1e-5/mf;
dx=3e-4/mf;

if (dx>(xs3-xs2)/(is3-is2),
  printf("\nproblem with the mesh, make dx smaller\n");
);


Grid(
  Size(is,js, ie,je);
  printf("%ldx%ld..",(ie-is+1),(je-js+1));
  Corners(is0,js1,is1,js2, 0.0,-Hdielectric,xs1,0.0);
  JoinCorners(is0,js1, is1,js2,  ff,0.5e0,dx,dx,  EF,0.5e0,1.0e0,dy);
  Corners(is1,js1,is2,js2, xs1,-Hdielectric,xs2,0.0);
  JoinCorners(is1,js1, is2,js2,  FF,0.5e0,dx,dx,  EF,0.5e0,1.0e0,dy);
  Corners(is2,js1,is3,js2, xs2,-Hdielectric,xs3,0.0);
  JoinCorners(is2,js1, is3,js2,  FF,0.5e0,dx,dx,  EF,0.5e0,1.0e0,dy);
  Corners(is3,js1,is4,js2, xs3,-Hdielectric,xs4,0.0);
  JoinCorners(is3,js1, is4,js2,  FF,0.5e0,dx,dx,  EF,0.5e0,1.0e0,dy);
  Corners(is4,js1,is5,js2, xs4,-Hdielectric,xs5,0.0);
  JoinCorners(is4,js1, is5,js2,  FE,0.3e0,dx,1.0,  EF,0.5e0,1.0e0,dy);

  {copy the row j=js2 on j=js3}
  Copy(is,js2,ie,js2, is,js3);
  {translate row j=js3 from y=0 to y=Hbdry}
  Translate(is,js3,ie,js3,0.0,Hbdry);
  {Join row j=js2 to row j=js3}
  Join(is,js2,ie,js3, j, FE, 0.25,dy,1.0); 

  {copy the row j=js2 on j=je}
  Copy(is,js2,ie,js2, is,je);
  {translate row j=je from y=0 to y=Hfluid}
  Translate(is,je,ie,je,0.0,Hfluid);
  {Join row j=js3 to row j=je}
  Join(is,js3,ie,je, j, GE, 0.5,1.0,1.0); 

  {copy the row j=js1 on j=js0}
  Copy(is,js1,ie,js1, is,js0);
  {translate row j=js0 from y= to y=Hfluid}
  Translate(is,js,ie,js,0.0,-Hdielectric);
  {Join row j=js0 to row j=js1}
  Join(is,js0,ie,js1, j, EG, 0.5,1.0,1.0); 
  
);



Bdry(
  NavierStokesPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            Number  Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0       Inflow, supersonic, 1o
    BDRY_INFLOWSUBSONIC1               7       Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  16      Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1            1       Outflow, supersonic, 1o
    BDRY_OUTFLOWSUBSONIC1              4       Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1        15      Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                  14      Symmetrical, 2o
    BDRY_SYMMETRICAL1                  9       Symmetrical, 1o
    BDRY_WALLTFIXED1                    3       Wall, T specified
    BDRY_WALLADIABATIC1                 6       Wall, Adiabatic
    BDRY_SLIPWALL1                     12      Slip wall, Adiabatic, 1o
    _________________________________________________________________________________________
    }
    if (FALSE, {only for testing}
      Cut(is,js,is3,js2);
      Cut(is4,js,ie,js2);
    , {else}
      Cut(is,js,  ie,js2);
    );
    All(BDRY_WALLTFIXED1);
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_WALLTFIXED1,BDRY_OUTFLOWSUPERSONIC1);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
  Epotential(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   Number     Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0          Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2          Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1          Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
    Cut(is,js,  is1,js2);
    Cut(is2,js1,  is3,js2);
    Cut(is4,js,  ie,js2);
    All(BDRYEMF_DIELECTRIC);
    {Region(is1,js2,  is2,js2,  BDRYEMF_ELECTRODE);
    Region(is3,js,  is4,js,  BDRYEMF_ELECTRODE);}
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRYEMF_ELECTRODE);
    }
  );
);
 
 
Model(
  NavierStokesPlasma(
    TEMODEL=TEMODEL_LOCAL;    {set TEMODEL to TEMODEL_LOCAL, TEMODEL_TRANSPORT, or TEMODEL_CONSTANT}
    N2VIBMODEL=N2VIBMODEL_MACHERET;
    emfieldworkheatfact=1.0;   {factor multiplying the emfield work and heat source terms}
    N2VIBJOULEHEATING=YES; {solve the nitrogen vibration energy joule heating source terms?}
    REACTING=YES;   {solve chemical reactions?}
    sigmadiv=1e-10; {minimum magnitude of sigma in S/m allowed when sigma appears on the denominator }
    etdiv=1e-1;     {minimum magnitude of et in J/kg allowed when et appears on the denominator}
    Pmin=10000;    Pmax=9.9e99;   {min and max pressure in Pa allowed in the domain}
    Tmin=200;     Tmax=6.0e3;    {min and max temperature in K allowed in the domain}
    Tvmin=Tmin;     Tvmax=10.0e3;  {min and max vibrational temperature in K allowed in the domain}
    Temin=Tmin;     Temax=60.0e3;  {min and max electron temperature in K allowed in the domain}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature in K allowed on any wall boundary node}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain for neutrals}
    wimin=1e-15;    wimax=1e-4;    {min and max ion mass fraction }
    wemin=1e-20;    wemax=1e-9;    {min and max electron mass fraction }
    Nminbdry=1e8;   {the minimum number density in 1/m3 for the charged species at the bdry nodes}
    gamma=0.1e0;    {secondary emission coefficient used to calculate the electron density at the cathode}
    AXISYMMETRIC=NO;
  );
  Epotential(
    Te_buffer=3000.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,T+Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Jmax=200000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,je, 1.0 );
    SetSolidConductivity(is,js, ie,je, 1000.0 {S/m}); {conductor}
    SetSolidConductivity(is3,js1, is4,js2, 0.0 {S/m}); {dielectric}
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
    SetElectroMotiveForce(is2,js0, is3,js1, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
  );
);


Init(
  NavierStokesPlasma(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     Tv, Te
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], Tv, Te
    _______________________________________________________________________________________

    }
    Vx=600; {m/s}
    Vy=0; {m/s}
    P=100000; {Pa}
    T=900; {K}
    Tv=T; {K}
    Te=3000; {K}
    chi_eminus=1e-12;
    chi_O2minus=1.0e-30;
    chi_O2plus=1e-12;
    chi_N2plus=1.0e-30;
    chi_O=1.0e-30;
    chi_N=1.0e-30;
    chi_H=1.0e-30;
    chi_OH=1.0e-30;
    chi_H2O=1.0e-30;
    chi_HO2=1.0e-30;
    chi_H2O2=1.0e-30;
    chi_H2=0.32/1.32;
    chi_O2=0.24/1.32;
    chi_N2=0.76/1.32;
    All(INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_N,chi_H2,chi_O2,chi_H,chi_O,
                            chi_OH,chi_H2O,chi_HO2,chi_H2O2,chi_N2,Tv,Te);
  );
  Epotential(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
    phi=0.0; {V}
    All(INITEMF_TYPE1,phi);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,  ie,je,INITEMF_TYPE1,phi);
    }
  );
);



Disc(
  NavierStokesPlasma(
    zetaA1=0.1e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.3e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
    zetaD=1.0;        {conditions the Dstar eigenvalues for the charged species}
    betag[1]=-0.0010;
    betag[2]=-0.5000;
    betag[3]=1.0000;
    betag[4]=1.0000;
    betaa[1]=0.9990;
    betaa[2]=0.5000;
    betaa[3]=0.0000;
    betaa[4]=0.0000;
  );
  Epotential(
    POTENTIAL=POTENTIAL_OHMBASED;
    Ediv=10.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.999;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_GNOFFO;
    POSFILTER=POSFILTER_NONE;
    POSFILTER_numiter=4;
  );
  CDFplus(
    xi[1]=0.5;
    xi[2]=0.5;
    xi[3]=0.5;
    xi[4]=0.5;
    xi[5]=0.5;
    xi[6]=0.5;
    xi[7]=0.5;
    xi[8]=0.5;
    xi[9]=0.5;
    xi[10]=0.5;
    xi[11]=0.5;
    xi[12]=0.5;
    xi[13]=0.5;
    xi[14]=0.5;
    xi[15]=0.5;
    xi[16]=0.5;
    xi[17]=0.5;
    xi[18]=0.25;
    xi[19]=0.25;
  );
);



Cycle(
  NavierStokesPlasma(
    xiverge=1e2;         {residual convergence threshold}
    zetaGammai=1.0;       {factor multiplying the pseudotime step of the ion species transport equations
                           when PRECONDITIONER is set to TRUE} 
    zetaGammae=1.0;      {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode when PRECONDITIONER is set to TRUE} 
    relaxNi_bdry=1.0; {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.2;    {the electron density relaxation factor at the boundary }
    relaxTe=0.3;      {the electron temperature relaxation factor }
    rhoref=0.1;           {reference density in kg/m3}
    Tref=300.0;           {reference temperature in K}
    Teref=20000.0;        {reference electron temperature in K}
    Tvref=5000.0;         {reference vibrational temperature in K}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-7;            {average ion mass fraction}
    Uref[1]=wion*1.8e-5*rhoref;   
    Uref[2]=wion*rhoref;   
    Uref[3]=wion*rhoref;   
    Uref[4]=wion*rhoref;   
    Uref[5]=rhoref;   
    Uref[6]=rhoref;   
    Uref[7]=rhoref;   
    Uref[8]=rhoref;   
    Uref[9]=rhoref;   
    Uref[10]=rhoref;   
    Uref[11]=rhoref;   
    Uref[12]=rhoref;   
    Uref[13]=rhoref;   
    Uref[14]=rhoref;   
    Uref[15]=rhoref*aref;   
    Uref[16]=rhoref*aref;   
    Uref[17]=rhoref*aref*aref;  
    Uref[18]=rhoref*700.0*Tvref;  
    Uref[19]=rhoref*wion*414*Teref;  
  );
  Epotential(
    xiverge_emfield=1e2; {residual convergence threshold for the potential equation}
    sigmaref=0.0000001; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );
  DualTimeStepping(
    sigma1=0.4;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=CFLmin;
      Lc=3e-1;  {characteristic length scale used to solve the emfield equation}
    );
    CFL=min(CFL*1.1,CFLmax);
    if (ximax>1e10, CFL=min(CFL,0.3););


    period=tmax/numcycle;
    if(mod(floor((time)/period),3)==0,
      POTENTIAL_DIFFERENCE=TRUE;
    ,{else}
      POTENTIAL_DIFFERENCE=FALSE;
    );
    

    dtref=period/(90*mf);
    if (POTENTIAL_DIFFERENCE,
      dt=dtref;  {was tmax/(60*mf*numcycle) physical time step in seconds}
      phiL=Vpp/2*sin((time+dt)/period*2*pi);
      phiR=-phiL;
      printf("xx ");
    ,{else}
      phiL=0.0;
      phiR=0.0;
      dt=dtref;  {was tmax/(60*mf*numcycle) physical time step in seconds}
    );
 
    if(iter==1,
      Model(
        Epotential(
          SetElectroMotiveForce(is2,js0, is3,js1, -(phiR-phiL)/(xs3-xs2){V/m},0.0{V/m}, 1e99{max power in W/m3});
        );
      );
    );

    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,dt);
    relaxEMF=0.8;  {relaxation factor forced on the update of the emfield variables}
    Lc=1.0;
    UpdateEMField(Lc,relaxEMF,dt,TSEMF_SOR,500);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %6.0f %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,Lc,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
    if (INITIAL_CONDITIONS && mod(iter,100)==0,
      WriteDataFile();
    );
    system("date");
    if (iter>itermin && (iter>itermax || (ximax<xiverge && ximax_emfield<xiverge_emfield)),
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dtref));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.05,2.2);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    Lc=3e-3;      {characteristic length scale in meters used to solve the emfield equation}
    relaxEMF=0.3; {relaxation factor forced on the update of the emfield variables}
    UpdateEMField(Lc,relaxEMF); {optional extra parameters:  tsemfmethod [ADI, DDADI, etc; default: 0] and numsubiter_tsemf [default: 4] if supported}
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
  );



);


Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2/m}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min,m (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min,m}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/ms\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js, ie,je);
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(dim);
  );
  printf("    Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("    Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("    Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  printf("    Qbeam     = %+E W/m\n",_Qbeam());
  printf("    EdotJ     = %+E W/m\n",_EdotJ());
  printf("    Wemfield  = %+E W/m\n",_Wemfield()); {Wemfield=Femfield dot Vn}
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

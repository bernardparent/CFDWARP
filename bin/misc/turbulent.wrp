 

{
  Number of Dimensions    : nd           : 2
  Number of Species       : ns           : 1
    [  Air  ]
}

Mx=2.23;
My=0.0;
P=8000;
T=150;
L=0.55;
H=0.02;
mf=1;
dwall=1e-6/(P/286/T)/mf/5;
  is=1;  js=1; 
  ie=round(mf*70); je=round(mf*70);

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, L,0.0e0);
  Point(ie,je, L,H);
  Point(is,je, 0.0e0,H);
  JoinCorners(is,js, ie,je,  FE,0.5e0,dwall*sqrt(Mx),1.0e0,  FE,0.5e0,dwall,1.0e0);
);


Bdry(
  FavreReynolds(
    {
    ******************************************************************
    * Fluid Flow Boundary Conditions Types:                           
    ******************************************************************
    *  0 : Inflow, supersonic                                         
    *  7 : Inflow, subsonic, Tstag, Pstag specified                   
    * 16 : Inflow, subsonic, Pstag, Massflow/Area                     
    *  1 : Outflow, supersonic                                        
    *  4 : Outflow, subsonic, P specified                             
    * 15 : Outflow, subsonic, M specified                             
    * 14 : Symmetrical, 2nd order                                     
    *  9 : Symmetrical, 1st order                                     
    *  3 : Wall, T specified                                          
    *  6 : Wall, Adiabatic                                            
    * 12 : Slip wall, 1st order, Adiabatic                            
    * 21 : Wall, Adiabatic, Cathode                                   
    * 22 : Wall, Adiabatic, Anode                                     
    * 23 : Wall, Adiabatic, Dielectric                                
    ******************************************************************
    }
    { first, create cuts in the computational domain; a cut is a region 
     which is not computed by the solver }
    { Cut(10{is},10{js},  17{ie},17{je});}
    { second, apply a default boundary condition (BC) type to all boundary nodes }
    All(3{BC type});
    { impose BC type at faces i=is, i=ie, j=js, j=je}
    Faces(0,1,  3,1);
    { apply BC type only to the boundary nodes in a specific region of the computational domain}
    { Region(10{is},10{js},  17{ie},17{je},  3{BC type});}
  );
);
 
 
Model(
 
  FavreReynolds(
    TURBMODEL=TURBMODEL_KOMEGA2008;      {set TURBMODEL to 
                     - TURBMODEL_KOMEGA1988 for Wilcox k-omega model (1988)
                     - TURBMODEL_KOMEGA2008 for new Wilcox k-omega model (2008)
                     - TURBMODEL_KEPSILON for Launder-Sharma k-epsilon model}
    DILATDISSIP=DILATDISSIP_NONE; {the dilatational dissipation can be set to DILATDISSIP_WILCOX or DILATDISSIP_SARKAR or NO}
    RAPCOMP=NO;     {the rapid compression correction by Coakley et altrui? (either YES or NO)}
    TURBSOURCE=YES; {solve the turbulence source terms? if set to NO and if the turbulence 
                     kinetic energy k is set to zero in the freestream, then will solve the 
                     flow as laminar}
    
    REACTING=YES;   {reacting flow? say either YES or NO -> only effective when a chemical solver is used}
    Prt=0.9e0;      {the turbulent Prandtl number;
                      - recommended value of 0.9 in boundary layers
                      - recommended value of 0.5 in shear layers}
    Sct=1.0e0;      {the turbulent Schmidt number;
                      - set it to a value between 0.2 and 2}
    kdiv=1e-10;     {set kdiv to as low a value as possible and
                   - at most one tenth the maximum value of k in the boundary layer
                     profile exhibiting the lowest maximum k for supersonic flow
                   - at most one hundredth the maximum value of k in the boundary layer}
    ADD_ETA_TO_ETAT_WITHIN_QK=NO;  {say NO for standard kinetic energy transport model}
    psidiv=1e3;   {set psidiv to as low a positive value as possible}
    Pmin=1000;    Pmax=9.9e99;   {min and max pressure allowed in the domain}
    Tmin=50;     Tmax=6.0e4;    {min and max temperature allowed in the domain}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature allowed on any wall boundary node}
    kmin=1e-99;   kmax=9.9e99;   {min and max TKE allowed in the domain}
    psimin=1e-10;   psimax=9.9e99; {min and max omega/epsilon allowed in the domain}
    wmin=1.0e-9;                  {min mass fraction allowed in the domain}
    
    AXISYMMETRIC=NO; {not tested yet!!}
  );
);
 
 
Init(
    FavreReynolds(
      {
      ************************************************************
      *Initial Conditions Types:                                  
      ************************************************************
      *1, V[1]..V[nd],  T,  rho,  w[1]..w[ns], k, psi     
      *2, M[1]..M[nd],  P,  T,    w[1]..w[ns], k, psi     
      *3, M[1]..M[nd],  Re, T,    w[1]..w[ns], k, psi     
      *4, Mmag, angles, P,  T,    w[1]..w[ns], k, psi     
      *5, V[1]..V[nd],  P,  T,    w[1]..w[ns], k, psi     
      *6, V[1]..V[nd],  P,  T,    chi[1]..chi[ns], k, psi   
      ************************************************************
      NOTE: in the freestream inflow conditions, it is suggested to
            set psi to:
              10*(flow speed) for the 1988 k-omega model          
              110*(flow speed) for the 2008 k-omega model         
      }
      { Init all nodes in the domain}
      All(2,Mx,My,P,T,1.0,0.1,110*Mx*sqrt(1.4*287*T));
      {
        { Init bdry nodes numbered 3}
        Bdry(3, 1,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
        { Init nodes in region}
        Region(3,3,  6,6,
         1,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
      }
    );
);


Disc(
  FavreReynolds(
    zetaA1=0.1e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.2e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.999;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_PECLET;
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=10;
  );
);


Cycle(
  FavreReynolds(
    xiverge=3e2;  {residual convergence threshold}
    rhoref=P/(286*T);  {reference density in kg/m3}
    aref=300.0;  {reference sound speed in m/s}
    kref=1e4;  {reference turbulence kinetic energy in m2/s2}
    psiref=1e8;  {reference specific dissipation rate of the TKE in 1/s if TURBMODEL=TURBMODEL_KOMEGA*
                  reference dissipation rate of the TKE in m2/s3 if TURBMODEL=TURBMODEL_KEPSILON}
    Uref[1]=rhoref;   
    Uref[2]=rhoref*aref;   
    Uref[3]=rhoref*aref;   
    Uref[4]=rhoref*aref*aref;  
    Uref[5]=rhoref*kref;  
    Uref[6]=rhoref*psiref;  
  );
  MultizoneSteady(
    if (mod(iter,50)==0,
      WriteDataFile();
    );
    sigma1=0.3;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.2;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.01;
    );
    CFL=min(CFL*1.01,0.5);
    phi1=20;     {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
    {system("date");}
  );
  MultizoneMarching(
    if (mod(iter,50)==0,
      WriteDataFile();
    );
    sigma1=0.3;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.3;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    
    CFL=min(CFL*1.1,1.0);
    phi1=20;         {maximum number of gridlines per zone in each dimension}
    phi2=6;          {minimum number of iterations before advancing the marching-window downstream boundary}
    phi3=27;         {minimum width of the marching window}
    varphiverge=1e4; {parameter related to the streamwise ellipticity sensor}
    entrance=1;      {force the marching window upstream boundary to be at least as high as entrance}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1,phi2,phi3,varphiverge,entrance);

    printf("%6.2f %4ld %4ld %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld    %s \n",
           CFL,window.is,window.ie,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.2;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.2;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.01;
    );
    CFL=min(CFL*1.02,0.5);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    { dtau=1e-7; {pseudotime step in seconds}
      UpdateFluidConstantPseudotimeStep(dtau); }
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );


);




Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    Pback=XSTATION_Pback({Aback,m2}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/s\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js, ie,je);
  printf("\n");
  for (dim,1,2,
    printf("    Fshear[%ld]    = %+E N/m\n",dim,_Fshear(dim,BDRY_WALLTFIXED1));
    printf("    Fpressure[%ld] = %+E N/m\n",dim,_Fpressure(dim,BDRY_WALLTFIXED1));
  );
  printf("\n");
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
);


{
  _______________________________________________________________________________________________

  WARP: a CFD Code for Plasma Aerodynamics [a]
  _______________________________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block DDADI [2,1]
  EM Field Integration                    IMAF [3]
  Convection Derivative Discretization    FDS Cauchy Second-Order [4]
  Time Derivative Discretization          Steady-State
  Fluid Transport Model                   Navier-Stokes with drift-diffusion plasma model [5]
  Chemical Model                          Air Plasma 8 species 28 reactions Macheret [5]
  Beam Model                              Fixed Electron Beam Energy Deposition
  EM Field Model                          Potential based on the Generalized Ohm's law [6,7]
  Thermodynamic Model                     NASA Glenn Polynomials [8]
  Number of Dimensions                    2
  Number of Flux Components               13
  Number of Species                       8
  Number of Charged Species               4
  List of Species                         e-, O2-, O2+, N2+, O, N, O2, N2
  _______________________________________________________________________________________________

  [a]  B Parent. "Weakly-ionized Airflow Resolver and Post-processor: a CFD Code for Plasma
       Aerodynamics", WARP version 17jan02b compiled on Jan  3 2017 at 14:45:36 using gcc 4.8.4
       with OPENMP threads. WARP is a Copyright (c) 1998-2017 of Bernard Parent. Copying and
       distribution of WARP is prohibited.
  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  RW MacCormack. "Iterative Modified Approximate Factorization", Computers and Fluids
       30:917-925, 2001.
  [4]  B Parent. "Multidimensional High Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, submitted for publication, 2016.
  [5]  Parent, B., Shneider, M.N., and Macheret, S.O. "Detailed Modeling of Plasmas for
       Computational Aerodynamics", AIAA Journal, Article in Press, 2016.
  [6]  B Parent, MN Shneider, and SO Macheret. "Generalized Ohm's Law and Potential Equation in
       Computational Weakly-Ionized Plasmadynamics", Journal of Computational Physics
       230:1439-1453, 2011.
  [7]  B Parent, SO Macheret, and MN Shneider. "Modeling Weakly-Ionized Plasmas in Magnetic
       Field: A New Computationally-Efficient Approach", Journal of Computational Physics
       300:779-799, 2015.
  [8]  BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.

}

 

Bz=1.0; 
dphi=3500.0;
L=0.2;
H=0.02;
Qbeam=1e5;
LbeamoverL=0.2;
N_eminus=1e7;
N_O2minus=N_eminus*0.01;
N_N2plus=(N_O2minus+N_eminus)*0.75;
N_O2plus=(N_O2minus+N_eminus)*0.25;
N_O2=0.25*2.414e24;
N_N2=0.75*2.414e24;
N_O=N_O2/1e5;
N_N=N_N2/1e5;
Nn=N_O2+N_N2;
Vmag=600.0;
theta=rad(0);
Vx=Vmag*cos(theta);
Vy=Vmag*sin(theta);
P=10000;
T=300;
Te=5000.0;

meshfact=1.0;

dwall=1e-5/meshfact;

is=1;    
ie=round(meshfact*60); 
 
js=1;
je=round(meshfact*60);

is1=round((is+ie)/2)-round((is+ie)*LbeamoverL/2);
is2=round((is+ie)/2)+round((is+ie)*LbeamoverL/2);


Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, L,0.0e0);
  Point(ie,je, L,H);
  Point(is,je, 0.0e0,H);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  FF,0.5e0,dwall,dwall); 
  Rotate(is,js,ie,je, 0.0,0.0,theta);
);

Bdry(
  NavierStokesPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            Number  Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0       Inflow, supersonic, 1o
    BDRY_INFLOWSUBSONIC1               7       Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  16      Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1            1       Outflow, supersonic, 1o
    BDRY_OUTFLOWSUBSONIC1              4       Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1        15      Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                  14      Symmetrical, 2o
    BDRY_SYMMETRICAL1                  9       Symmetrical, 1o
    BDRY_WALLTFIXED1                    3       Wall, T specified
    BDRY_WALLADIABATIC1                 6       Wall, Adiabatic
    BDRY_SLIPWALL1                     12      Slip wall, Adiabatic, 1o
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_WALLTFIXED1,BDRY_WALLTFIXED1);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
  EpotentialBfixed(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   Number     Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0          Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2          Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1          Extrapolated, similar to outflow, 1o
    _________________________________________________________________________________________

    }
    All(BDRYEMF_DIELECTRIC);
    Region(is1,js,is2,js,BDRYEMF_ELECTRODE);
    Region(is1,je,is2,je,BDRYEMF_ELECTRODE);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRYEMF_ELECTRODE);
    }
  );
);
 
 
Model(
  NavierStokesPlasma(
    TEMODEL=TEMODEL_LOCAL;    {set TEMODEL to TEMODEL_LOCAL, TEMODEL_TRANSPORT, or TEMODEL_CONSTANT}
    N2VIBMODEL=N2VIBMODEL_MACHERET;
    N2VIBJOULEHEATING=YES; {solve the nitrogen vibration energy joule heating source terms?}
    REACTING=YES;   {solve chemical reactions?}
    sigmadiv=1e-10; {minimum magnitude of sigma in S/m allowed when sigma appears on the denominator }
    etdiv=1e-1;     {minimum magnitude of et in J/kg allowed when et appears on the denominator}
    Pmin=5000;    Pmax=9.9e99;   {min and max pressure in Pa allowed in the domain}
    Tmin=200;     Tmax=14.0e3;    {min and max temperature in K allowed in the domain}
    Tvmin=Tmin;     Tvmax=Tmax;  {min and max vibrational temperature in K allowed in the domain}
    Temin=Tmin;     Temax=60.0e3;  {min and max electron temperature in K allowed in the domain}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature in K allowed on any wall boundary node}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain for neutrals}
    wimin=1e-15;    wimax=1e-4;    {min and max ion mass fraction }
    wemin=1e-20;    wemax=1e-9;    {min and max electron mass fraction }
    Nminbdry=1e12;   {the minimum number density in 1/m3 for the charged species at the bdry nodes}
    gamma=0.1e0;    {secondary emission coefficient used to calculate the electron density at the cathode}
    AXISYMMETRIC=NO;
  );
  EpotentialBfixed(
    Te_buffer=3000.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,T+Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Jmax=40000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,je, 1.0 );
    SetSolidConductivity(is,js, ie,je, 1e-7 {S/m});
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
    SetMagneticField(is,js, ie,je, 0{T},0{T},Bz{T});
    {make sure that (A_x,A_y,A_z) or (B_x,B_y,B_z) do not lie on top of a node }
    {AddMagnetDipole({A_x}0, {A_y}0, {A_z}0, {B_x}0, {B_y}0.01, {B_z}0, {Bd}1);} {add a dipole with the origin at A, and strength Bd at B}
    {AddMagnetDipoleRow({A_x}0, {A_y}0, {A_z}0, {B_x}0, {B_y}0.01, {B_z}0, {Bd}1, {numsteps}200);} {add a dipole row starting from A and ending at B, with Bd the flux}
  );
 
  EbeamFixed(
    SetQbeam(is, js, ie, je,   {Qbeam, W/m3}Qbeam/1000);
    SetQbeam(is1-6, js, is2+6, je,   {Qbeam, W/m3}Qbeam/100);
    SetQbeam(is1-5, js, is2+5, je,   {Qbeam, W/m3}Qbeam/10);
    
    SetQbeam(is1-4, js, is2+4, je,   {Qbeam, W/m3}Qbeam);
  );
);


Init(
  NavierStokesPlasma(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     Tv, Te
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], Tv, Te
    _______________________________________________________________________________________

    }
    All(INIT_TYPE6,Vx,Vy,P,T,N_eminus/Nn,N_O2minus/Nn,N_O2plus/Nn,N_N2plus/Nn,N_O/Nn,N_N/Nn,N_O2/Nn,N_N2/Nn,T,Te);
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,Tv,Te);
    Region(is,js,  ie,je, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,Tv,Te);
    }
  );
  EpotentialBfixed(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
      All(INITEMF_TYPE1,dphi);
      Region(is1,js,is2,js,INITEMF_TYPE1,0.0);
      Region(is1,je,is2,je,INITEMF_TYPE1,dphi);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,  ie,je,INITEMF_TYPE1,phi);
    }
  );
);

Disc(
  NavierStokesPlasma(
    zetaA1=0.2e0;    {conditions the eigenvalues of the A jacobian}
    zetaA2=0.2;
    zetaA3=0.2e0;  {conditions the eigenvalues of the inverted A jacobian}
    zetaD=0.0;     {conditions the Dstar eigenvalues for the charged species}
  );
  EpotentialBfixed(
    Ediv=10.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
  );
  MUSCLplus(
    FLUX=FLUX_FDSplus;
    numiter=2;
    AVERAGING=AVERAGING_ARITH;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.85;
    AOWENO_gammahi=0.85;
    INTERPOL=INTERPOL_AOWENO5;
    EIGENVALCOND=EIGENVALCOND_PECLET; {set the eigenvalue conditioning to EIGENVALCOND_PECLET, EIGENVALCOND_PASCAL [RECOMMENDED], or EIGENVALCOND_HARTEN}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ARITH;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.85;
    AOWENO_gammahi=0.85;
    INTERPOL=INTERPOL_AOWENO5;
    EIGENVALCOND=EIGENVALCOND_PECLET; {set the eigenvalue conditioning to EIGENVALCOND_PECLET, EIGENVALCOND_PASCAL [RECOMMENDED], or EIGENVALCOND_HARTEN}
  );
  CDFplus(

    xi=0.5;
  );
);

Cycle(
  NavierStokesPlasma(
    xiverge=6e3;         {residual convergence threshold}
    zetaGammai=1.0;       {factor multiplying the pseudotime step of the ion species transport equations
                           when PRECONDITIONER is set to TRUE} 
    zetaGammae=1.0;      {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode when PRECONDITIONER is set to TRUE} 
    relaxNi_bdry=0.6; {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.2;    {the electron density relaxation factor at the boundary }
    relaxTe=0.1;      {the electron temperature relaxation factor }
    rhoref=0.1;           {reference density in kg/m3}
    Tref=300.0;           {reference temperature in K}
    Teref=20000.0;        {reference electron temperature in K}
    Tvref=5000.0;         {reference vibrational temperature in K}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-4;            {average ion mass fraction}
    Uref[1]=wion*1.8e-5*rhoref;   
    Uref[2]=wion*rhoref;   
    Uref[3]=wion*rhoref;   
    Uref[4]=wion*rhoref;   
    Uref[5]=rhoref;   
    Uref[6]=rhoref;   
    Uref[7]=rhoref;   
    Uref[8]=rhoref;   
    Uref[9]=rhoref*aref;   
    Uref[10]=rhoref*aref;   
    Uref[11]=rhoref*aref*aref;  
    Uref[12]=rhoref*700.0*Tvref;  
    Uref[13]=rhoref*wion*414*Teref;  
  );
  EpotentialBfixed(
    xiverge_emfield=1e2; {residual convergence threshold for the potential equation}
    relaxEk=0.5; {relaxation factor for E in species frame}
    sigmaref=0.001; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=dphi; {reference value for the electric field potential in Volts -> used to determine xi}
  );
  DualTimeStepping(
    tmax=1e-4;    {simulation time span in seconds}
    dt=tmax/30;   {physical time step in seconds}
    sigma1=0.25;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.25;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALEIGENVALUE;
    if (iter==1,
      CFL=0.4;
    );
    CFL=min(CFL*1.05,1.5);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,dt);
    Lc=1e1;      {characteristic length scale in meters used to solve the emfield equation}
    relaxEMF=1.4; {relaxation factor forced on the update of the emfield variables}
    UpdateEMField(Lc,relaxEMF,dt,TSEMF_SOR,30); {optional extra parameters:  tsemfmethod [ADI, DDADI, etc; default: 0] and numsubiter_tsemf [default: 4] if supported}
    UpdateEMField(Lc,relaxEMF,dt,TSEMF_IMAF,20);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
    if (iter>50 || (ximax<xiverge && ximax_emfield<xiverge_emfield),
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );

  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.002;
    );
    CFL=min(CFL*1.08,0.7);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    Lc=1e-3;  {characteristic length scale used to solve the emfield equation}
    relaxEMF=0.8;  {relaxation factor forced on the update of the emfield variables}
    subiter_tsemf=4;
    for (cnt,0,0,
      UpdateEMField(Lc,relaxEMF,TSEMF_IMAF,subiter_tsemf);
      {UpdateEMField(Lc,relaxEMF,TSEMF_DDADI);}
      UpdateEMField(Lc,relaxEMF,TSEMF_ADI);
    );
    system("date");
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
  );
);


Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2/m}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min,m (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min,m}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/ms\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js, ie,je);
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(dim);
  );
  printf("    Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("    Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("    Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  printf("    Qbeam     = %+E W/m\n",_Qbeam());
  printf("    EdotJ     = %+E W/m\n",_EdotJ());
  printf("    Wemfield  = %+E W/m\n",_Wemfield()); {Wemfield=Femfield dot Vn}
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

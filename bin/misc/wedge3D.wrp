{
  _______________________________________________________________________________________________

  WARP: a CFD Code for Plasma Aerodynamics [a]
  _______________________________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block ADI [1,2]
  EM Field Integration                    none
  Convection Derivative Discretization    Positivity-Preserving FDS 2nd Order TVD for the mass
                                          fractions and 5th Order WENO for other MUSCL variables
                                          [4,3]
  Time Derivative Discretization          Steady-State
  Fluid Transport Model                   Navier-Stokes Perfect Gas
  Chemical Model                          Air 1 species 0 reaction
  Beam Model                              None
  EM Field Model                          None
  Thermodynamic Model                     Perfect Gas
  Number of Dimensions                    3
  Number of Flux Components               5
  _______________________________________________________________________________________________

  [a]  Parent, B. "Weakly-ionized Airflow Resolver and Post-processor: a CFD Code for Plasma
       Aerodynamics", WARP version 16nov17b compiled on Nov 18 2016 at 09:05:25 by parent on
       CLEO using gcc 4.8.2 with distributed memory MPI with assertions. WARP is a Copyright (c)
       1998-2016 of Bernard Parent. Copying and distribution of WARP is prohibited.
  [1]  Briley, W.R. and McDonald, H., "On the Structure and Use of Linearized Block Implicit
       Schemes," Journal of Computational Physics 34:54-73, 1980.
  [2]  Beam, R.M. and Warming, R.F. "An Implicit Finite-Difference Algorithm for Hyperbolic
       Systems in Conservation-Law-Form", Journal of Computational Physics 22:87-110, 1976.
  [3]  Parent, B. "Positivity-Preserving Flux Difference Splitting Schemes", Journal of
       Computational Physics 243:194-209, 2013.
  [4]  Jiang, G. and Shu, C.-W. "Efficient Implementation of Weighted ENO Schemes," Journal of
       Computational Physics 126:202-228, 1996.

}

 

mf=4.0;

is=1;  js=1;  ks=1;
ie=round(50*mf); je=round(30*mf); ke=round(20*mf);


L=1.0;
H=0.2;
D=0.2;

Grid(
  Size(is,js,ks, ie,je,ke);
  Point(is,js,ks, 0.0e0,0.0e0,0.0e0);
  Point(ie,js,ks, L,0.0e0,0.0e0);
  Point(ie,je,ks, L,H,0.0e0);
  Point(is,je,ks, 0.0e0,H,0.0e0);
  Point(is,js,ke, 0.0e0,0.0e0,D);
  Point(ie,js,ke, L,0.0e0,D);
  Point(ie,je,ke, L,H,D);
  Point(is,je,ke, 0.0e0,H,D);
  JoinCorners(is,js,ks, ie,je,ke,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
  Rotate(is,js,ks,ie,je,ke, 0,0,0, rad(10), z);
);


Bdry(
  NavierStokesPerfect(
    {
    _________________________________________________________________________________________

    Boundary Condition Type    Number   Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC      0        Inflow, supersonic
    BDRY_OUTFLOWSUPERSONIC1         1        Outflow, supersonic
    BDRY_SYMMETRICAL1               2        Symmetrical, 1st order (can be used as a "slip wall")
    BDRY_SYMMETRICAL2               3        Symmetrical, 2nd order (can be used as a "slip wall")
    BDRY_WALLTFIXED1               4        Wall, T specified
    BDRY_WALLADIABATIC1             5        Wall, adiabatic
    BDRY_INFLOWSUBSONIC1       6        Subsonic Inflow (Constant Tstag, Pstag at inflow)
    BDRY_OUTFLOWSUBSONIC1           7        Subsonic Outflow (Constant P at outflow)
    _________________________________________________________________________________________
    }
    All(BDRY_OUTFLOWSUPERSONIC1);
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_SYMMETRICAL1,BDRY_INFLOWSUPERSONIC,  BDRY_SYMMETRICAL1,BDRY_SYMMETRICAL1);
    {
    Cut(is,js,ks,  ie,je,ke);
    Region(is,js,ks,  ie,je,ke,  BDRY_INFLOWSUPERSONIC);
    }
  );
);
 
 
Model(
 
  NavierStokesPerfect(
    gamma=1.4;
    R=286.0; {J/kgK }
    eta=2e-5; {kg/ms}
    kappa=0.03; {W/mK}
    Pmin=1.0e-2;    Pmax=9.9e99;   {min and max pressure allowed in the domain in Pa}
    Tmin=1.0e1;     Tmax=6.0e3;    {min and max temperature allowed in the domain in K}
    zetaA1=0.2e0;    {parameter related to the eigenvalue conditioning of the A jacobian}
    zetaA2=0.2;
    zetaA3=0.2e0;   {parameter related to the eigenvalue conditioning of the inverted A jacobian}
    
    EIGENVALCOND=EIGENVALCOND_PECLET; {set the Lambda conditioning to EIGENVALCOND_PECLET, EIGENVALCOND_GNOFFO, or EIGENVALCOND_HARTEN}
    SetBodyForce(is,js,ks, ie,je,ke, 0.0{N/m3},0.0{N/m3},0.0{N/m3});
    SetHeatDeposited(is,js,ks, ie,je,ke, 0.0 {W/m3});
    {
    AddHeatPoint(0.0{x,m},0.0{y,m},0.0{z,m}, 0.1{radius,m}, 0.0{W});
    }
  );
);


Init(
  NavierStokesPerfect(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  P,  T     
    INIT_TYPE2                   M[1]..M[nd],  P,  T     
    _______________________________________________________________________________________
    }
    Mx=2;
    My=0;
    Mz=0;
    P=10000; {Pa}
    T=300; {K}
    All(2,Mx,My,Mz,P,T);
    {
    Bdry(BDRY_WALLTFIXED1, 2, Mx,My,Mz,P,T);
    Region(is,js,ks,  ie,je,ke,  2, Mx,My,Mz,P,T);
    }
  );
);


Cycle(
  NavierStokesPerfect(
    xiverge=1e-3;          {residual convergence threshold}
    rhoref=1.0;            {reference density in kg/m3}
    aref=300.0;            {reference sound speed in m/s}
    Uref[1]=rhoref;            
    Uref[2]=rhoref*aref;       
    Uref[3]=rhoref*aref;   
    Uref[4]=rhoref*aref;   
    Uref[5]=rhoref*aref*aref;  
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.05,0.5);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,k_ximax,clipinfo);
    system("date");
  );
);


Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min,m (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min,m}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/s\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js,ks, ie,je,ke);
  printf("\n");
  for (dim,1,3,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
  );
  printf("    Fshear    = (%+E,%+E,%+E) N\n",Fshear[1],Fshear[2],Fshear[3]);
  printf("    Fpressure = (%+E,%+E,%+E) N\n",Fpressure[1],Fpressure[2],Fpressure[3]);
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

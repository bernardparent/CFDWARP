{
  _____________________________________________________________________________

  WARP: a CFD Code for Plasma & Reactive Flows [a]
  _____________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block DDADI [2,1]
  EM Field Integration                    IMAF [3]
  Convection Derivative Discretization    None
  Time Derivative Discretization          Steady-State
  Fluid Transport Model                   Drift-Diffusion [4,5]
  Chemical Model                          N2 Plasma 3 species 3 reactions
  Beam Model                              None
  EM Field Model                          Potential based on Ohm's law [4]
  Thermodynamic Model                     NASA Glenn Polynomials [6]
  Number of Dimensions                    2
  Number of Flux Components               4
  Number of Species                       3
  Number of Charged Species               2
  List of Species                         e-, N2+, N2
  _____________________________________________________________________________

  [a]  B Parent. "WARP: a CFD Code for Plasma & Reactive Flows", WARP version
       17apr22a compiled on Apr 23 2017 at 19:56:11 by parent on WAFL101 using
       gcc 4.9.2 with OPENMP threads. WARP is a Copyright (c) 1998-2017 of
       Bernard Parent. Copying and distribution of WARP is prohibited.
  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th
       Computational Fluid Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations
       with the CSCM Implicit Upwind Navier-Stokes Method", Proceedings of the
       8th Computational Fluid Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  RW MacCormack. "Iterative Modified Approximate Factorization", Computers
       and Fluids 30:917-925, 2001.
  [4]  B Parent, SO Macheret, and MN Shneider. "Electron and Ion Transport
       Equations in Computational Weakly-Ionized Plasmadynamics", Journal of
       Computational Physics 259:51-69, 2014.
  [5]  B Parent, SO Macheret, and MN Shneider. "Modeling Weakly-Ionized Plasmas
       in Magnetic Field: A New Computationally-Efficient Approach", Journal
       of Computational Physics 300:779-799, 2015.
  [6]  BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for
       Calculating Thermodynamic Properties of Individual Species", NASA TP
       2002-211556, 2002.

}

theta1=rad(0);
theta2=rad(0);

is=1;  js=1; 
ie=60; je=60;
js1=10;
js2=20;
is1=10;
is2=50;

L=0.001;
H=0.001;

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, L,0.0e0);
  Point(ie,je, L,H);
  Point(is,je, 0.0e0,H);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
  Translate(is2,js,ie,je,0.0,tan(theta2)*(_x(is2,js)-_x(is1,js)));
  Join(is1,js,is2,je, i, GG, 0.5,1,1);
  Rotate(is,js,ie,je, 0.0,0.0,theta1);
);


Bdry(
  DriftDiffusion(
    {
    _________________________________________________________________________________________

    Bdry Condition Type      Number    Description
    _________________________________________________________________________________________

    BDRY_WALL                0         Wall (either dielectric or electrode)
    BDRY_OUTFLOW             1         Outflow
    _________________________________________________________________________________________
    }
    Cut(is,js,ie,js2);
    All(BDRY_WALL);
    Faces(BDRY_WALL,BDRY_WALL,  BDRY_WALL,BDRY_WALL);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_OUTFLOW);
    }
  );
  Epotential(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   Number     Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0          Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2          Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1          Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
    Cut(is1,js1,is2,js2);
    Cut(is,js2-2,is1,js2);
    All(BDRYEMF_DIELECTRIC);
    Region(is,js2-2,is1,js2,BDRYEMF_ELECTRODE);
    {Faces(BDRYEMF_ELECTRODE,BDRYEMF_ELECTRODE,  BDRYEMF_DIELECTRIC,BDRYEMF_DIELECTRIC);}
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRYEMF_ELECTRODE);
    }
  );
);
 
 
Model(
  DriftDiffusion(
    Te=10000.0;       {K}
    CONSTANT_TE=FALSE;
    Ti=300.0;         {K}
    gamma=0.1;        {the secondary emission coefficient}
    Nminbdry=1e8;     {the min number density for the charged species at the bdry nodes in 1/m3}
    Nemin=1e6;        {1/m3}
    Nimin=1e6;        {1/m3}
    Nkmax=1e19;       {1/m3}
    Temin=1000;       {K}
    Temax=60000;      {K}
    sigmadiv=1e-20;   {S/m}
    aref=300.0;       {reference speed of sound in m/s used when conditioning Dstar eigenvalues  }
    zetaD=1.0;        {conditions the Dstar eigenvalues for the charged species}
  );
  Epotential(
    Te_buffer=0.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,T+Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Ediv=10.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
    Jmax=20000000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,je, 1.0 );
    SetSolidConductivity(is,js, ie,je, 10000.0 {S/m});
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
    Lc=sqrt((_x(is2,js)-_x(is1,js))^2+(_y(is2,js)-_y(is1,js))^2);
    SetElectroMotiveForce(is1,js, is2,js1, 1000*cos(theta1+theta2)/Lc {V/m},1000*sin(theta1+theta2)/Lc {V/m}, 1e99{max power in W/m3});
  );
);


Init(
  DriftDiffusion(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   N[1]..N[ns], Te   
    _______________________________________________________________________________________

    }
    N_eminus=1e10; {1/m3}
    N_N2plus=1e10; {1/m3}
    N_N2=0.75e24; {1/m3}
    Te=3000; {electron temperature in K}
    All(INIT_TYPE1,N_eminus,N_N2plus,N_N2,Te);
    {
    Bdry(WALL, INIT_TYPE1,N_eminus,N_N2plus,N_N2,Te);
    Region(is,js,  ie,je, INIT_TYPE1,N_eminus,N_N2plus,N_N2,Te);
    }
  );
  Epotential(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
    phi=0.0; {V}
    All(INITEMF_TYPE1,phi);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,  ie,je,INITEMF_TYPE1,phi);
    }
  );
);


Cycle(
  DriftDiffusion(
    xiverge=1e-3;         {residual convergence threshold}
    zetaGammai=0.1;       {factor multiplying the pseudotime step of the ion species transport equations
                           when PRECONDITIONER is set to TRUE} 
    zetaGammae=0.01;      {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode when PRECONDITIONER is set to TRUE} 
    relaxNi_bdry=1.0;     {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.2;    {the electron density relaxation factor at the boundary }
    relaxTe=0.7;          {the electron temperature relaxation factor }
    aref=300.0;           {reference speed of sound in m/s when determining the pseudotime step  }
    Nref=1e18;            {reference number density in 1/m3}
    Teref=5000;           {reference electron temperature in K}
    Uref[1]=Nref;   
    Uref[2]=Nref;   
    Uref[3]=Nref;   
    Uref[4]=Teref;   
  );
  Epotential(
    xiverge_emfield=1e-2; {residual convergence threshold for the potential equation}
    sigmaref=3e-10; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.0;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALEIGENVALUE;
    if (iter==1,
      CFL=10;
    );
    CFL=min(CFL*1.05,2.5);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    Lc=L;      {characteristic length scale in meters used to solve the emfield equation}
    relaxEMF=0.8; {relaxation factor forced on the update of the emfield variables}
    UpdateEMField(Lc*3,relaxEMF,ADI);
    UpdateEMField(Lc*100,relaxEMF,IMAF,60); {optional extra parameters:  tsemfmethod [ADI, DDADI, etc; default: 0] and numsubiter_tsemf [default: 4] if supported}
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
  );
);


Post(
  xstation[1]=0.1; {m}
  xstation[2]=0.2; {m}
  xstation[3]=0.3; {m}
  numsteps=300;
  qmin=1.0; {m/s, as small a value as possible}
  Pback_min=400; {Pa}
  Pback_max=40000; {Pa}
  Aback=1.0; {m2/m}
  for (cnt,1,3,
    XSTATION_Set(xstation[cnt]);
    Pback=XSTATION_Pback(Aback, Pback_min, Pback_max, numsteps, qmin);
    Fpot=XSTATION_Fpot(Pback, numsteps, qmin);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag(numsteps);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("x      = %E m\n"
           "Pback  = %E Pa\n"
           "Fpot   = %E Ns/kg\n"
           "mdot   = %E kg/ms\n"
           "htstar = %E J/kg\n"
           "Tstag  = %E K\n"
           "Pstag  = %E Pa\n"
           "Pstar  = %E Pa\n"
           "T      = %E K\n"
           "q      = %E m/s\n"
           "rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(is,js, ie,je, dim);
  );
  printf("Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  printf("Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  printf("Qbeam     = %+E W/m\n",_Qbeam(is,js, ie,je));
  printf("EdotJ     = %+E W/m\n",_EdotJ(is,js, ie,je));
  printf("Wemfield  = %+E W/m\n",_Wemfield(is,js, ie,je)); {Wemfield=Femfield dot Vn}
  printf("\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js, ie,je, "post.01", "tecplot", POSTGRIDONLY);
  }
);

{
  _______________________________________________________________________________________________

  WARP: a CFD Code for Plasma Aerodynamics [a]
  _______________________________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block DDADI [2,1]
  EM Field Integration                    DDADI iterative [3]
  Convection Derivative Discretization    None
  Time Derivative Discretization          BDF First-Order
  Fluid Transport Model                   Drift-Diffusion
  Chemical Model                          N2 Plasma 3 species 3 reactions
  Beam Model                              None
  EM Field Model                          Ohm's-law based potential equation [4]
  Thermodynamic Model                     NASA Glenn Polynomials [5]
  Number of Dimensions                    2
  Number of Flux Components               4
  Number of Species                       3
  Number of Charged Species               2
  List of Species                         e-, N2+, N2
  _______________________________________________________________________________________________

  [a]  Parent, B. "Weakly-ionized Airflow Resolver and Post-processor: a CFD Code for Plasma
       Aerodynamics", WARP version HEAD compiled on Jul 21 2016 at 20:30:59 using gcc 4.8.4 with
       OPENMP threads with assertions. WARP is a Copyright (c) 1998-2016 of Bernard Parent.
       Copying and distribution of WARP is prohibited.
  [1]  MacCormack, R.W., "A New Implicit Algorithm for Fluid Flow," 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  Bardina, J. and Lombard, C.K. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  MacCormack, R.W. "Iterative Modified Approximate Factorization", Computers and Fluids
       30:917-925, 2001.
  [4]  Parent, B., Macheret, S.O., and Shneider, M.N. "Electron and Ion Transport Equations in
       Computational Weakly-Ionized Plasmadynamics", Journal of Computational Physics 259:51-69,
       2014.
  [5]  McBride, B.J., Zehe, M.J., and Gordon, S. "NASA Glenn Coefficients for Calculating
       Thermodynamic Properties of Individual Species", NASA TP 2002-211556, 2002.

}

epsilonr=1.0; {for the dielectric only }
  freq=1000000; {Hz} {was 50000,1000000}
  Vpp=20000;{V} {was 50000,20000}
  numcycle=3;
  tmax=numcycle/freq; {was 1e-5}  {simulation time span in seconds}
itermax=100;
  CFLmin=0.7;
  CFLmax=3.0;

mf=1;

is=1;  js=1; 
im=round(40*mf);
ie=round(50*mf); je=round(25*mf);

L=1e-3;
H=5e-4;

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, L,0.0e0);
  Point(ie,je, L,H);
  Point(is,je, 0.0e0,H);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
);


Bdry(
  DriftDiffusion(
    {
    _________________________________________________________________________________________

    Bdry Condition Type      Number    Description
    _________________________________________________________________________________________

    WALL                     0         Wall (either dielectric or electrode)
    OUTFLOW                  1         Outflow
    _________________________________________________________________________________________
    }
    Cut(im,js,  ie,je);
    All(WALL);
    Faces(WALL,WALL,  WALL,WALL);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  OUTFLOW);
    }
  );
  Epotential(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   Number     Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0          Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2          Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1          Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
    All(BDRYEMF_DIELECTRIC);
    Faces(BDRYEMF_ELECTRODE,BDRYEMF_ELECTRODE,  BDRYEMF_DIELECTRIC,BDRYEMF_DIELECTRIC);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRYEMF_ELECTRODE);
    }
  );
);
 
 
Model(
 
  DriftDiffusion(
    Te=10000.0;       {the electron temperature in K}
    CONSTANT_TE=FALSE; {fix the electron temperature to a constant}
    Ti=300.0;         {the ions and neutrals temperature in K}
    gamma=0.1;        {the secondary emission coefficient }
    Nminbdry=1e8;     {the number density for the charged species at the bdry nodes in 1/m3}
    Nemin=1e6;        {the minimum allowed number density for the electrons in 1/m3}
    Nkmin=1e6;        {the minimum allowed number density for the other charged species in 1/m3}
    Nkmax=1e19;       {the maximum allowed number density for the charged species in 1/m3}
    Temin=200;        {the minimum allowed electron temperature in K}
    Temax=60000;       {the maximum allowed electron temperature in K}
    sigmadiv=1e-20;   {minimum value for conductivity when it appears on denominator in S/m }
    aref=300.0;       {reference speed of sound in m/s used when conditioning Dstar eigenvalues  }
    zetaD=1.0;        {conditions the Dstar eigenvalues for the charged species}
  );
 
  Epotential(
    Te_buffer=80.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,T+Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Ediv=100.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
    Jmax=2000000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,je, 1.0 );
    SetRelativePermittivity(im+1,js, ie,je, epsilonr );
    {SetRelativePermittivity(im-7,js, im-3,je, epsilonr*3 );{for testing only}}
    SetSolidConductivity(is,js, ie,je, 0.0 {S/m});
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
  );
);


Init(
  DriftDiffusion(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    1                            N[1]..N[ns], Te   
    _______________________________________________________________________________________

    }
    N_eminus=1e10;
    N_N2plus=N_eminus*0.75;
    N_N2=1.931e24;

    Te=10000; {electron temperature in K}
    All(1,N_eminus,N_N2plus,N_N2,Te);
    {
    Bdry(WALL, 1,N_eminus,N_N2plus,N_N2,Te);
    Region(is,js,  ie,je, 1,N_eminus,N_N2plus,N_N2,Te);
    }
  );
  Epotential(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
    phi=0; {V}
    All(1,phi);
    {
    Bdry(BDRYEMF_ELECTRODE, 1,phi);
    Region(is,js,  ie,je,1,phi);
    }
  );
);


Cycle(
  DriftDiffusion(
    xiverge=1e2;         {residual convergence threshold}
    zetaGammai=0.1;       {factor multiplying the pseudotime step of the ion species transport equations
                           when PRECONDITIONER is set to TRUE} 
    zetaGammae=0.01;      {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode when PRECONDITIONER is set to TRUE} 
    relaxNi_bdry=1.0;     {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.2;    {the electron density relaxation factor at the boundary }
    relaxTe=0.1;          {the electron temperature relaxation factor }
    aref=300.0;           {reference speed of sound in m/s when determining the pseudotime step  }
    Nref=1e18;            {reference number density in 1/m3}
    Teref=5000;           {reference electron temperature in K}
    Uref[1]=Nref;   
    Uref[2]=Nref;   
    Uref[3]=Nref*1e99;   
    Uref[4]=Teref*1e99;   
  );
  Epotential(
    xiverge_emfield=1e0; {residual convergence threshold for the potential equation}
    sigmaref=3e-10; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );
   DualTimeStepping(
    dt=tmax/(60*mf*numcycle);  {physical time step in seconds}
    sigma1=0.5;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALEIGENVALUE;
    if (iter==1,
      CFL=CFLmin;
      phiL=Vpp/2*sin((time+dt)/(tmax/numcycle)*2*pi);
      phiR=-phiL;
      Init(
        Epotential(
          Region(ie,js,ie,je,1,phiR);
          Region(is,js,is,je,1,phiL);
        );
      );
    );

    CFL=min(CFL*1.1,CFLmax);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,dt);
    Lc=L;  {characteristic length scale used to solve the emfield equation}
    relaxEMF=0.5;  {relaxation factor forced on the update of the emfield variables}
    
    UpdateEMField(Lc*30,relaxEMF,dt,TSEMF_ADI);
    for (cnt, 1,3,
      UpdateEMField(Lc,relaxEMF,dt,TSEMF_IMAF,10);
    );

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %6.0f %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,Lc,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
    if (iter>itermax || (ximax<xiverge && ximax_emfield<xiverge_emfield),
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
   );
   SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALEIGENVALUE;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.1,3.0);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    Lc=L;  {characteristic length scale used to solve the emfield equation}
    relaxEMF=0.7;  {relaxation factor forced on the update of the emfield variables}
    subiter_tsemf=4;  {number of subiterations performed when inverting the matrix within tsemf}
    for (cnt,0,4,
      UpdateEMField(Lc,relaxEMF,subiter_tsemf);
    );
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %6.0f %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,Lc,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
   );

);


Post(
  xstation[1]=0.0001;{m}
  xstation[2]=0.0002;{m}
  xstation[3]=0.0003;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2/m}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min,m (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min,m}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/ms\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js, ie,je);
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(dim);
  );
  printf("    Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("    Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("    Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  printf("    Qbeam     = %+E W/m\n",_Qbeam());
  printf("    EdotJ     = %+E W/m\n",_EdotJ());
  printf("    Wemfield  = %+E W/m\n",_Wemfield()); {Wemfield=Femfield dot Vn}
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

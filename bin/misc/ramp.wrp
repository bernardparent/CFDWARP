{
  Number of Dimensions    : nd           : 3

}

Minf=2.5;
Pinf=10000;
Tinf=240;

Minj=2.0;
Pinj=20000;
Tinj=700;

angleup=rad(25);
angledown=rad(25); 


Linj=0.1525/3;
Lmix=0.25/2;
Hinj=Linj*(tan(angleup)+tan(angledown));
Hinjstart=Hinj/20.0;
Hdom=Hinj*3.0;
Dinj=0.0127/2;
Ddom=0.0572/2;


mf=1.0;

is=1; 
im=round(30*mf);
ie=round(60*mf); 
js=1;  
jm=round(15*mf);
je=round(40*mf); 
ks=1;
km=round(10*mf);
ke=round(20*mf);
 

Grid(
  Size(is,js,ks, ie,je,ke);

  { grid injector}
  Point(is,js,ks, -Linj,tan(angledown)*Linj,0.0e0);
  Point(is,jm,ks, -Linj,tan(angledown)*Linj+Hinjstart,0.0e0);
  Point(im,js,ks, 0.0,0.0,0.0e0);
  Point(im,jm,ks, 0.0,Hinj,0.0);
  JoinCorners(is,js,ks,im,jm,ks, EE,0.5e0,1.0,1.0, EE,0.5e0,1.0,1.0, NO,0.5e0,1.0,1.0);
  Copy(is,js,ks,im,jm,ks, is,js,km);
  
  Translate(is,js,km,im,jm,km, 0.0,0.0,Dinj);
  Join(is,js,ks,im,jm,km, k, EE,0.5e0,1.0,1.0);

  {grid domain beside injector}
  Copy(is,js,ks,im,jm,ks, is,js,ke);
  Translate(is,js,ke,im,jm,ke, 0.0,0.0,Ddom);
  Join(is,js,km,im,jm,ke, k, GE,0.5e0,1.0,1.0);

  {grid domain above injector}
  Point(is,je,ks, -Linj,Hdom/2.0,0.0e0);
  Point(im,je,ks, 0.0,  Hdom,0.0);
  Point(is,je,ke, -Linj,Hdom/2.0,Ddom);
  Point(im,je,ke, 0.0,Hdom,Ddom);
  JoinCorners(is,je,ks, im,je,ke, EE,0.5e0,1.0,1.0, NO,0.5e0,1.0,1.0, EE,0.5e0,1.0,1.0);
  Join(is,jm,ks, im,je,ke, j, GE,0.5e0,1.0,1.0);

  {grid domain downstream of injection}
  Point(ie,js,ks, Lmix,0.0e0,0.0e0);
  Point(ie,je,ks, Lmix,Hdom,0.0e0);
  Point(ie,js,ke, Lmix,0.0e0,Ddom);
  Point(ie,je,ke, Lmix,Hdom,Ddom);
  JoinCorners(ie,js,ks, ie,je,ke,  NO,0.5,1,1,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
  Join(im,js,ks, ie,je,ke, i, GE, 0.5e0,1.0e0,1.0e0);

{  Rotate(is,js,ks,ie,je,ke,0,0,0,rad(40),z);}
);


Bdry(
  NavierStokesPerfect(
    {
    _________________________________________________________________________________________

    Boundary Condition Type    Number   Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC      0        Inflow, supersonic
    BDRY_OUTFLOWSUPERSONIC1    1        Outflow, supersonic, 1o
    BDRY_SYMMETRICAL1          2        Symmetrical, 1o (can be used as a "slip wall")
    BDRY_SYMMETRICAL2          3        Symmetrical, 2o (can be used as a "slip wall")
    BDRY_SYMMETRICAL3          8        Symmetrical, 3o (can be used as a "slip wall")
    BDRY_WALLTFIXED1            4        Wall, T specified
    BDRY_WALLADIABATIC1         5        Wall, adiabatic
    BDRY_INFLOWSUBSONIC1       6        Subsonic Inflow 1o (Constant Tstag, Pstag at inflow)
    BDRY_OUTFLOWSUBSONIC1      7        Subsonic Outflow 1o (Constant P at outflow)
    _________________________________________________________________________________________
    }
    { first, create cuts in the computational domain; a cut is a region 
     which is not computed by the solver }
    Cut(is{is},js{js},ks{ks},  im{ie},jm{je},km{ke});
    { second, apply a default boundary condition (BC) type to all boundary nodes }
    All(BDRY_SYMMETRICAL2{BC type});
    { impose BC type at faces i=is, i=ie, j=js, j=je, k=ks, k=ke}
    Faces(0,1,  BDRY_SYMMETRICAL2,0,  BDRY_SYMMETRICAL2,BDRY_SYMMETRICAL2);
    { apply BC type only to the boundary nodes in a specific region of the computational domain}
    Region(im,js,ks,  im,jm,km,  0{BC type});
    Region(im,je,ks,  ie,je,ke,  1{BC type});

  );
);
 
 
Model(
 
  NavierStokesPerfect(
    gamma=1.4;      {the specific heat ratio }
    R=286.0;        {the gas constant in J/kgK }
    eta=2e-5;       {the viscosity of the gas in kg/ms }
    kappa=0.03;     {the thermal conductivity of the gas in W/mK }
    Pmin=1.0e-2;    Pmax=9.9e99;   {min and max pressure allowed in the domain in Pa}
    Tmin=1.0e1;     Tmax=6.0e3;    {min and max temperature allowed in the domain in K}
    AXISYMMETRIC=FALSE;
  );
);
 
 
Init(
    NavierStokesPerfect(
      {
      ************************************************************
      *Initial Conditions Types:                                  
      ************************************************************
      *1, V[1]..V[nd],  P,  T     
      *2, M[1]..M[nd],  P,  T     
      ************************************************************
      }
      { Init all nodes in the domain}
      All(2,Minf,0.0,0.0,Pinf,Tinf);
      Region(im,js,ks,  ie,jm,km,
         2,Minj*cos(angleup),Minj*sin(angleup),0.0,Pinj,Tinj);
      
      {
        { Init bdry nodes numbered 3}
        Bdry(3, 1,0.0,0.0,0.0,0.0,0.0);
        { Init nodes in region}
        Region(3,3,3,  6,6,6,
         1,0.0,0.0,0.0,0.0,0.0);
      }
    );
);



Disc(
  NavierStokesPerfect(
    zetaA1=0.01e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.03e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
  );
  MUSCLplus(
    FLUX=FLUX_FDSplusMultiD;
    numiter=2;
    AVERAGING=AVERAGING_ARITH;
    AOWENO_TYPE=AOWENO_TYPE_COMPRESSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.95;
    INTERPOL=INTERPOL_AOWENO5;
    EIGENVALCOND=EIGENVALCOND_PASCAL;
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.9999;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_GNOFFO;
    POSFILTER=POSFILTER_NONE;
    POSFILTER_numiter=4;
  );

);


Cycle(
  NavierStokesPerfect(
    xiverge=3e2;          {residual convergence threshold}
    rhoref=Pinf/Tinf/287;            {reference density in kg/m3}
    aref=300.0;            {reference sound speed in m/s}
    Uref[1]=rhoref;            
    Uref[2]=rhoref*aref;       
    Uref[3]=rhoref*aref;   
    Uref[4]=rhoref*aref;   
    Uref[5]=rhoref*aref*aref;  
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.05,0.5);
    system("date");
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,k_ximax,clipinfo);
  );

  MultizoneSteady(
    if (mod(iter,50)==0,
      WriteDataFile();
    );
    sigma1=0.0;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.1,0.5);
    phi1=20;     {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,k_ximax,numzones_updated,numzones_total,clipinfo);
  );
  MultizoneMarching(
    if (mod(iter,50)==0,
      WriteDataFile();
    );
    sigma1=0.3;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.1,0.5);
    phi1=10*mf;         {maximum number of gridlines per zone in each dimension}
    phi2=6;          {minimum number of iterations before advancing the marching-window downstream boundary}
    phi3=22;         {minimum width of the marching window}
    varphiverge=1e4; {parameter related to the streamwise ellipticity sensor}
    entrance=1;      {force the marching window upstream boundary to be at least as high as entrance}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1,phi2,phi3,varphiverge,entrance);

    printf("%6.2f %4ld %4ld %6ld %9.3f   %E (%4ld,%4ld,%4ld) %3ld/%3ld    %s \n",
           CFL,window.is,window.ie,iter,effiter_U,ximax,i_ximax,
           j_ximax,k_ximax,numzones_updated,numzones_total,clipinfo);
  );

);



Post(
  xstation[1]=-Linj/2;{m}
  xstation[2]=Lmix/3;{m}
  xstation[3]=Lmix*2/3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2}0.01, {Pback_min,Pa}400, {Pback_max,Pa}40000, {numsteps}300,
                 {q_min (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/s\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js,ks, ie,je,ke);
  printf("\n");
  for (dim,1,3,
    Fshear[dim]=_Fshear(dim,BDRY_SYMMETRICAL3  );
    Fpressure[dim]=_Fpressure(dim,BDRY_SYMMETRICAL3  );
  );
  printf("    Fshear    = (%+E,%+E,%+E) N\n",Fshear[1],Fshear[2],Fshear[3]);
  printf("    Fpressure = (%+E,%+E,%+E) N\n",Fpressure[1],Fpressure[2],Fpressure[3]);
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);



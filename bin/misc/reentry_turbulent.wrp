{
  _______________________________________________________________________________________________

  WARP: a CFD Code for Plasma Aerodynamics [a]
  _______________________________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block DDADI [2,1]
  EM Field Integration                    none
  Convection Derivative Discretization    Positivity-Preserving FDS [3] Total Variation
                                          Diminishing 2nd Order [4]
  Time Derivative Discretization          Steady-State
  Fluid Transport Model                   Favre-Reynolds Multispecies
  Chemical Model                          Air Plasma 11s 31r Dunn-Kang [5]
  Beam Model                              None
  EM Field Model                          None
  Thermodynamic Model                     NASA Glenn Polynomials [6]
  Number of Dimensions                    2
  Number of Flux Components               16
  Number of Species                       11
  Number of Charged Species               6
  List of Species                         e-, O+, N+, O2+, N2+, NO+, O, N, NO, O2, N2
  _______________________________________________________________________________________________

  [a]  B Parent. "Weakly-ionized Airflow Resolver and Post-processor: a CFD Code for Plasma
       Aerodynamics", WARP version 17jan21a compiled on Jan 21 2017 at 17:16:16 using gcc 4.8.4
       with OPENMP threads. WARP is a Copyright (c) 1998-2017 of Bernard Parent. Copying and
       distribution of WARP is prohibited.
  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  B Parent. "Positivity-Preserving Flux Difference Splitting Schemes", Journal of
       Computational Physics 243:194-209, 2013.
  [4]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [5]  MG Dunn and SW Kang. "Theoretical and Experimental Studies of Reentry Plasmas", NASA
       CR-2232, 1973.
  [6]  BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.

}

  Mx=16;
My=0.0;
P=10200;
T=250;


CFLref=1.0;



meshtype=1; {set to 1 for gridline on axis of symmetry ; 
             set to 2 for no gridline on axis of symmetry ;}
meshfact=1.0;
sizefact=1.0;


is=1;  js=1; 
if (meshtype==1,
  ie=round(64*meshfact)+1; 
);
if (meshtype==2,
  ie=round(64*meshfact); 
);

je=round(32*meshfact)+1;
Rin_x=0.6*sizefact;
Rin_y=Rin_x/2.4;
Rout_x=Rin_x*1.38;
Rout_y=Rin_y*4.6;

Grid(
  Size(is,js, ie,je);

  if (meshtype==1 || meshtype==2,
    theta=-pi/2;
    dtheta=pi/(ie-is);
    im=(ie+is)/2;
    for (i,is,ie,
      theta=((abs(i-im)/(ie-im))^1.3)*pi/2;
      x_in=-sqrt(1/(1/sqr(Rin_x)+sqr(tan(theta)/Rin_y)));
      y_in=Rin_y*sqrt(1-sqr(x_in/Rin_x));
      if (i-im<0, y_in=-y_in;);
      Point(i,js, x_in,y_in);  
    );

    theta=-pi/2;
    dtheta=pi/(ie-is);
    im=(ie+is)/2;
    for (i,is,ie,
      theta=((abs(i-im)/(ie-im))^1.1)*pi/2;
      x_in=-sqrt(1/(1/sqr(Rout_x)+sqr(tan(theta)/Rout_y)));
      y_in=Rout_y*sqrt(1-sqr(x_in/Rout_x));
      if (i-im<0, y_in=-y_in;);
      Point(i,je, x_in,y_in);  
    );

    Join(is,js,ie,je,j,FE,0.8,Rin_x/300/meshfact,1);
  );
);




Bdry(
  FavreReynolds(
    {
    _________________________________________________________________________________________

    Boundary Condition Type          Number    Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC            0         Inflow, supersonic
    BDRY_INFLOWSUBSONIC1              7         Inflow, subsonic, Tstag, Pstag fixed
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1 16        Inflow, subsonic, Pstag, Massflow/Area fixed
    BDRY_OUTFLOWSUPERSONIC1           1         Outflow, supersonic
    BDRY_OUTFLOWSUBSONIC1             4         Outflow, subsonic, P fixed
    BDRY_OUTFLOWSUBSONICMFIXED1         15        Outflow, subsonic, M fixed
    BDRY_SYMMETRICAL2                14        Symmetrical, 2nd order
    BDRY_SYMMETRICAL1                9         Symmetrical, 1st order
    BDRY_WALLTFIXED1                  3         Wall, T specified
    BDRY_WALLADIABATIC1               6         Wall, Adiabatic
    BDRY_SLIPWALL1                         12        Slip wall, 1st order, Adiabatic
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    Faces(BDRY_OUTFLOWSUPERSONIC1,BDRY_OUTFLOWSUPERSONIC1,  BDRY_SLIPWALL1,BDRY_INFLOWSUPERSONIC);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
);
 
 
Model(
  FavreReynolds(
    TURBMODEL=TURBMODEL_KOMEGA2008;  {TURBMODEL_KOMEGA2008 [RECOMMENDED], TURBMODEL_KOMEGA1988, TURBMODEL_KEPSILON}
    DILATDISSIP=DILATDISSIP_WILCOX; {DILATDISSIP_WILCOX [RECOMMENDED], DILATDISSIP_SARKAR, DILATDISSIP_NONE}
    RAPCOMP=NO;     {Coakley rapid compression correction?}
    TURBSOURCE=NO; {solve the turbulence source terms?}
    REACTING=YES;   {Chemical reactions?}
    Prt=0.9e0;      {turbulent Prandtl number}
    Sct=1.0e0;      {turbulent Schmidt number}
    ADD_ETA_TO_ETAT_WITHIN_QK=NO;  {say NO for standard kinetic energy transport model}
    kdiv=1.0e-50;   {minimum magnitude of k in m2/s2 allowed when k appears on the denominator}
    psidiv=0.1e-3;   {minimum magnitude of psi allowed when psi appears on the denominator}
    Pmin=1.0e-2;    Pmax=9.9e99;   {min and max pressure allowed in the domain in Pa}
    Tmin=1.0e1;     Tmax=12.0e3;    {min and max temperature allowed in the domain in K}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature allowed on any wall boundary node in K}
    kmin=1.0e-10;   kmax=9.9e99;   {min and max TKE allowed in the domain in m2/s2}
    psimin=1e-10;   psimax=9.9e99; {min and max omega/epsilon allowed in the domain}
    wmin=1.0e-200;                  {min mass fraction allowed in the domain}
    zetaA1=0.1e0;     {conditions the eigenvalues of the A jacobian}
    EIGENVALCOND=EIGENVALCOND_PASCAL; {set the eigenvalue conditioning to EIGENVALCOND_PECLET, EIGENVALCOND_PASCAL [RECOMMENDED], or EIGENVALCOND_HARTEN}
    AXISYMMETRIC=NO;
  );
);


Init(
  FavreReynolds(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     k, psi
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     k, psi
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     k, psi
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     k, psi
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     k, psi
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], k, psi
    _______________________________________________________________________________________

    (a) In the freestream set psi to 110*q_infty for the k-omega models.
    (b) In the freestream make sure that 1E-5*q_infty^2/ReL<k<0.1*q_infty^2/ReL.
    }
    k=1e-6; {J/kg}
    psi=110*sqrt(Mx^2+My^2)*sqrt(1.4*287*T); {1/s for TURBMODEL_KOMEGA*}
    w_eminus=1.0e-30;
    w_Oplus=1.0e-30;
    w_Nplus=1.0e-30;
    w_O2plus=1.0e-30;
    w_N2plus=1.0e-30;
    w_NOplus=1.0e-30;
    w_O=1.0e-30;
    w_N=1.0e-30;
    w_NO=1.0e-30;
    w_O2=0.235;
    w_N2=0.765;
    All(INIT_TYPE2,Mx,My,P,T,w_eminus,w_Oplus,w_Nplus,w_O2plus,w_N2plus,w_NOplus,w_O,w_N,w_NO,w_O2,w_N2,k,psi);
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE2,Mx,My,P,T,w_eminus,w_Oplus,w_Nplus,w_O2plus,w_N2plus,w_NOplus,w_O,w_N,w_NO,w_O2,w_N2,k,psi);
    Region(is,js,  ie,je, INIT_TYPE2,Mx,My,P,T,w_eminus,w_Oplus,w_Nplus,w_O2plus,w_N2plus,w_NOplus,w_O,w_N,w_NO,w_O2,w_N2,k,psi);
    }
  );
);


Cycle(
  FavreReynolds(
    xiverge=1e-3;{residual convergence threshold}
    rhoref=1.0;  {reference density in kg/m3}
    aref=300.0;  {reference sound speed in m/s}
    kref=1e4;    {reference turbulence kinetic energy in m2/s2}
    psiref=1e8;  {reference specific dissipation rate of the TKE in 1/s if for TURBMODEL_KOMEGA*
                  reference dissipation rate of the TKE in m2/s3 for TURBMODEL_KEPSILON}
    Uref[1]=rhoref;   
    Uref[2]=rhoref;   
    Uref[3]=rhoref;   
    Uref[4]=rhoref;   
    Uref[5]=rhoref;   
    Uref[6]=rhoref;   
    Uref[7]=rhoref;   
    Uref[8]=rhoref;   
    Uref[9]=rhoref;   
    Uref[10]=rhoref;   
    Uref[11]=rhoref;   
    Uref[12]=rhoref*aref;   
    Uref[13]=rhoref*aref;   
    Uref[14]=rhoref*aref*aref;  
    Uref[15]=rhoref*kref;  
    Uref[16]=rhoref*psiref;  
  );
  MultizoneSteady(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.3;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.05,CFLref);
    phi1=20;      {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.5;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.01,2.3);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );
);


Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2/m}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min,m (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min,m}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/ms\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js, ie,je);
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
  );
  printf("    Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("    Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

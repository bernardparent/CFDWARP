{
  _______________________________________________________________________________________________

  WARP: a CFD Code for Plasma Aerodynamics [a]
  _______________________________________________________________________________________________

  Cycle Strategy                          Multizone [1]
  Pseudo-Time-Step Integration            Block Implicit ADI [2,3]
  Convection Derivative Discretization    Flux Difference Splitting 2nd-Order Parent [4]
  Time Derivative Discretization          Steady-State
  Fluid Transport Model                   Favre-Reynolds Multispecies
  Chemical Model                          Air Plasma 4 species 13 reactions
  Electron Beam Model                     None
  Electromagnetic Fields Model            None
  Thermodynamic Model                     NASA Glenn Polynomials [5]
  Number of Dimensions                    2
  Number of Flux Components               9
  Number of Species                       4
  Number of Charged Species               0
  List of Species                         O2, N2, O, N
  _______________________________________________________________________________________________

  [a]  Parent, B. "Weakly-ionized Airflow Resolver and Post-processor: a CFD Code for Plasma
       Aerodynamics", WARP version 16feb11a compiled on Feb 14 2016 at 18:52:56 using gcc 4.8.4
       with POSIX zone threads with assertions. WARP is a Copyright (c) 1998-2016 of Bernard
       Parent. Copying and distribution of WARP is prohibited.
  [1]  Parent, B. and Sislian, J.P. "The Use of Domain Decomposition in Accelerating the
       Convergence of Quasihyperbolic Systems", Journal of Computational Physics 179:140-169,
       2002.
  [2]  Briley, W.R. and McDonald, H., "On the Structure and Use of Linearized Block Implicit
       Schemes," Journal of Computational Physics 34:54-73, 1980.
  [3]  Beam, R.M. and Warming, R.F. "An Implicit Finite-Difference Algorithm for Hyperbolic
       Systems in Conservation-Law-Form", Journal of Computational Physics 22:87-110, 1976.
  [4]  Parent, B. "Multidimensional Flux Difference Splitting Schemes: Extension to Second-Order
       Accuracy", Journal of Computational Physics, submitted for publication, 2016.
  [5]  McBride, B.J., Zehe, M.J., and Gordon, S. "NASA Glenn Coefficients for Calculating
       Thermodynamic Properties of Individual Species", NASA TP 2002-211556, 2002.

}

Mx=7.3;
My=0.0;
P=10200;
T=2030;





meshtype=2; {set to 1 for gridline on axis of symmetry ; 
             set to 2 for no gridline on axis of symmetry ;}
meshfact=1.0;
sizefact=1.0;


is=1;  js=1; 
if (meshtype==1,
  ie=round(64*meshfact)+1; 
);
if (meshtype==2,
  ie=round(64*meshfact); 
);

je=round(32*meshfact)+1;
Rin_x=0.6*sizefact;
Rin_y=Rin_x/2.4;
Rout_x=Rin_x*1.38*3;
Rout_y=Rin_y*4.6*3;

Grid(
  Size(is,js, ie,je);

  if (meshtype==1 || meshtype==2,
    theta=-pi/2;
    dtheta=pi/(ie-is);
    im=(ie+is)/2;
    for (i,is,ie,
      theta=((abs(i-im)/(ie-im))^1.3)*pi/2;
      x_in=-sqrt(1/(1/sqr(Rin_x)+sqr(tan(theta)/Rin_y)));
      y_in=Rin_y*sqrt(1-sqr(x_in/Rin_x));
      if (i-im<0, y_in=-y_in;);
      Point(i,js, x_in,y_in);  
    );

    theta=-pi/2;
    dtheta=pi/(ie-is);
    im=(ie+is)/2;
    for (i,is,ie,
      theta=((abs(i-im)/(ie-im))^1.1)*pi/2;
      x_in=-sqrt(1/(1/sqr(Rout_x)+sqr(tan(theta)/Rout_y)));
      y_in=Rout_y*sqrt(1-sqr(x_in/Rout_x));
      if (i-im<0, y_in=-y_in;);
      Point(i,je, x_in,y_in);  
    );

    Join(is,js,ie,je,j,FE,0.8,Rin_x/300/meshfact,1);
  );
);



Bdry(
  FavreReynolds(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            Number    Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0         Inflow, supersonic
    BDRY_INFLOWSUBSONIC1               7         Inflow, subsonic, Tstag, Pstag fixed
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  16        Inflow, subsonic, Pstag, Massflow/Area fixed
    BDRY_OUTFLOWSUPERSONIC1            1         Outflow, supersonic
    BDRY_OUTFLOWSUBSONIC1              4         Outflow, subsonic, P fixed
    BDRY_OUTFLOWSUBSONICMFIXED1        15        Outflow, subsonic, M fixed
    BDRY_SYMMETRICAL2                  14        Symmetrical, 2nd order
    BDRY_SYMMETRICAL1                  9         Symmetrical, 1st order
    BDRY_WALLTFIXED1                    3         Wall, T specified
    BDRY_WALLADIABATIC1                 6         Wall, Adiabatic
    BDRY_SLIPWALL1                     12        Slip wall, 1st order, Adiabatic
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    Faces(1,1,  12,0);
    Faces(BDRY_OUTFLOWSUPERSONIC1,BDRY_OUTFLOWSUPERSONIC1,  BDRY_SYMMETRICAL2,BDRY_INFLOWSUPERSONIC);

    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
);
 
 
Model(
 
  FavreReynolds(
    TURBMODEL=TURBMODEL_KOMEGA1988;      {set TURBMODEL to 
                     - TURBMODEL_KOMEGA1988 for Wilcox k-omega model (1988)
                     - TURBMODEL_KOMEGA2008 for new Wilcox k-omega model (2008)
                     - TURBMODEL_KEPSILON for Launder-Sharma k-epsilon model}
    DILATDISSIP=DILATDISSIP_NONE; {the dilatational dissipation can be set to DILATDISSIP_WILCOX or DILATDISSIP_SARKAR or NO}
    RAPCOMP=NO;     {the rapid compression correction by Coakley et altrui? (either YES or NO)}
    TURBSOURCE=NO; {solve the turbulence source terms? if set to NO and if the turbulence 
                     kinetic energy k is set to zero in the freestream, then will solve the 
                     flow as laminar}
    
    REACTING=YES;   {reacting flow? say either YES or NO -> only effective when a chemical solver is used}
    Prt=0.9e0;      {the turbulent Prandtl number;
                      - recommended value of 0.9 in boundary layers
                      - recommended value of 0.5 in shear layers}
    Sct=1.0e0;      {the turbulent Schmidt number;
                      - set it to a value between 0.2 and 2}
    kdiv=1.0e0;     {minimum magnitude of k in m2/s2 allowed when k appears on the denominator;
                     make sure that kdiv is
                   - at most one tenth the maximum value of k in the boundary layer
                     profile exhibiting the lowest maximum k for supersonic flow
                   - at most one hundredth the maximum value of k in the boundary layer}
    ADD_ETA_TO_ETAT_WITHIN_QK=NO;  {say NO for standard kinetic energy transport model}
    psidiv=0.1e-3;   {minimum magnitude of psi allowed when psi appears on the denominator}
    Pmin=P/2;    Pmax=9.9e99;   {min and max pressure allowed in the domain in Pa}
    Tmin=T/3;     Tmax=30.0e3;    {min and max temperature allowed in the domain in K}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature allowed on any wall boundary node in K}
    kmin=1.0e-3;   kmax=9.9e99;   {min and max TKE allowed in the domain in m2/s2}
    psimin=1.0;   psimax=9.9e99; {min and max omega/epsilon allowed in the domain}
    wmin=1.0e-10;                  {min mass fraction allowed in the domain}
    
    AXISYMMETRIC=NO; {set to YES to solve axisymmetric problems in 2D}
  );
);


Init(
    FavreReynolds(
      {
      _______________________________________________________________________________________

      Initial Condition Type       Parameters
      _______________________________________________________________________________________

      INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     k, psi
      INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     k, psi
      INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     k, psi
      INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     k, psi
      INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     k, psi
      INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], k, psi
      _______________________________________________________________________________________

      (a) in the freestream inflow conditions, it is suggested to set psi to 10*(flow speed)
          for the 1988 k-omega model and 110*(flow speed) for the 2008 k-omega model
      (b) for hypersonic flows, the freestream value of psi can be further multiplied by
          up to 5 times if necessary
      }
      k=1e-2; {J/kg}
      psi=110*sqrt(Mx^2+My^2)*sqrt(1.4*287*T); {1/s for TURBMODEL=TURBMODEL_KOMEGA*}
      w_O=0.0001;
      w_N=0.0001;
      w_O2=0.235-w_O;
      w_N2=0.765-w_N;


      All(2,Mx,My,P,T,w_O2,w_N2,w_O,w_N,k,psi);
      {
      Bdry(BDRY_WALLTFIXED1, 2,Mx,My,P,T,w_O2,w_N2,w_O,w_N,k,psi);
      Region(is,js,  ie,je, 2,Mx,My,P,T,w_O2,w_N2,w_O,w_N,k,psi);
      }
    );
);



Disc(
  FavreReynolds(
    zetaA1=0.1e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.3e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
  );
  FDS(
    AVERAGING=AVERAGING_ROE;
    ACCURACY=ACCURACY_SECONDORDER;
    EIGENVALCOND=EIGENVALCOND_GNOFFO;
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.999;
    INTERPOL=INTERPOL_AOWENO7;
     
    EIGENVALCOND=EIGENVALCOND_PARENT;
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=4;
  );
  MUSCLplus(
    FLUX=FLUX_FDSplus;
    AVERAGING=AVERAGING_ARITH;
    numiter=2;
    AOWENO_TYPE=AOWENO_TYPE_COMPRESSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.95;
    INTERPOL=INTERPOL_WENO3;
    EIGENVALCOND=EIGENVALCOND_PASCAL;
  );
  CDFplus(
    xi[1]=0.5;
    xi[2]=0.5;
    xi[3]=0.5;
    xi[4]=0.5;
    xi[5]=0.5;
    xi[6]=0.5;
    xi[7]=0.5;
    xi[8]=0.25;
    xi[9]=0.25;
  );
  Trapezoidal(
    weightm1_convection=0.5;
    weightm1_default=0.0;
  );
);



Cycle(
  FavreReynolds(
    xiverge=1e3;  {residual convergence threshold}
    rhoref=1.0;  {reference density in kg/m3}
    aref=300.0;  {reference sound speed in m/s}
    kref=1e4;  {reference turbulence kinetic energy in m2/s2}
    psiref=1e8;  {reference specific dissipation rate of the TKE in 1/s if TURBMODEL=TURBMODEL_KOMEGA*
                  reference dissipation rate of the TKE in m2/s3 if TURBMODEL=TURBMODEL_KEPSILON}
    Uref[1]=rhoref;   
    Uref[2]=rhoref;   
    Uref[3]=rhoref;   
    Uref[4]=rhoref;   
    Uref[5]=rhoref*aref;   
    Uref[6]=rhoref*aref;   
    Uref[7]=rhoref*aref*aref;  
    Uref[8]=rhoref*kref;  
    Uref[9]=rhoref*psiref;  
  );
   Multizone(
    tmax=1e-4;   {simulation time span in seconds}
    dt=tmax/30/Mx*3;  {physical time step in seconds}
    sigma1=0.4;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.4;      {exponent of largest pseudotime step in all flux components}

    if (iter==1,
      if (time==0,
        CFL=0.01;
      ,{else}
        CFL=2.0;
      );
      PRECONDITIONER=PRECON_LOCALTIMESTEP;
    ,{else}
      PRECONDITIONER=PRECON_LOCALEIGENVALUE;
    );
    if (time==0,
      CFL=min(1.5,CFL*1.2);
    ,
      CFL=max(0.4,CFL/1.03);
    );
    phi1=20;     {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1,dt);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
    if (ximax<xiverge || iter>80,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
   );

  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.0;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.01;
    );
    CFL=min(CFL*1.05,1.0);
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );

   MultizoneSteady(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.0;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.01;
    );
    CFL=min(CFL*1.05,1.0);
    phi1=20;     {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
   );
);



Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2/m}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min,m (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min,m}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/ms\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js, ie,je);
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
  );
  printf("    Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("    Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

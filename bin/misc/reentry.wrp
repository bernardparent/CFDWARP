{
  ____________________________________________________________________________

  WARP: a CFD Code for Plasma Aerodynamics [a]
  ____________________________________________________________________________

  Cycle Strategy                          Multizone [1]
  Fluid Transport Integration             Block ADI [2,3]
  EM Field Integration                    none
  Convection Derivative Discretization    Positivity-Preserving FDS [4] Total
                                          Variation Diminishing 2nd Order [5]
  Time Derivative Discretization          Steady-State
  Fluid Transport Model                   Navier-Stokes Multispecies
  Chemical Model                          Air Plasma 11s 31r Dunn-Kang
  Beam Model                              None
  EM Field Model                          None
  Thermodynamic Model                     NASA Glenn Polynomials [6]
  Number of Dimensions                    2
  Number of Flux Components               14
  Number of Species                       11
  Number of Charged Species               6
  List of Species                         e-, O+, N+, O2+, N2+, NO+, O, N, NO,
                                          O2, N2
  ____________________________________________________________________________

  [a]  B Parent. "Weakly-ionized Airflow Resolver and Post-processor: a CFD
       Code for Plasma Aerodynamics", WARP version 17jan18a compiled on Jan
       18 2017 at 18:59:23 using gcc 4.8.4 with OPENMP threads. WARP is a
       Copyright (c) 1998-2017 of Bernard Parent. Copying and distribution of
       WARP is prohibited.
  [1]  B Parent and JP Sislian. "The Use of Domain Decomposition in
       Accelerating the Convergence of Quasihyperbolic Systems", Journal of
       Computational Physics 179:140-169, 2002.
  [2]  WR Briley and H McDonald. "On the Structure and Use of Linearized Block
       Implicit Schemes", Journal of Computational Physics 34:54-73, 1980.
  [3]  RM Beam and RF Warming. "An Implicit Finite-Difference Algorithm for
       Hyperbolic Systems in Conservation-Law-Form", Journal of Computational
       Physics 22:87-110, 1976.
  [4]  B Parent. "Positivity-Preserving Flux Difference Splitting Schemes",
       Journal of Computational Physics 243:194-209, 2013.
  [5]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume
       Flux Vector Splittings for the Euler Equations", AIAA Journal
       24:1453-1460, 1986.
  [6]  BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for
       Calculating Thermodynamic Properties of Individual Species", NASA TP
       2002-211556, 2002.

}


 Mx=10;
My=0.0;
P=300/Mx^2*16^2;
T=240;
Twall=2000;



CFLref=2.0;





meshtype=1; {set to 1 for gridline on axis of symmetry ; 
             set to 2 for no gridline on axis of symmetry ;}
meshfact=2.0;
sizefact=0.02;

dwall=30e-6/meshfact;

is=1;  js=1; 
is1=round(8*meshfact);
if (meshtype==1,
  ie1=is1+round(64*meshfact)+1; 
);
if (meshtype==2,
  ie1=is1+round(64*meshfact); 
);
ie=ie1+is1;

je=round(90*meshfact)+1;
Rin_x=0.6*sizefact;
Rin_y=Rin_x/0.3;
Rout_x=Rin_x*3.38;
Rout_y=Rin_y*2.8;



Grid(
  Size(is,js, ie,je);

  if (meshtype==1 || meshtype==2,
    theta=-pi/2;
    dtheta=pi/(ie1-is1);
    im=(ie1+is1)/2;
    for (i,is1,ie1,
      theta=((abs(i-im)/(ie1-im))^1.3)*pi/2;
      x_in=-sqrt(1/(1/sqr(Rin_x)+sqr(tan(theta)/Rin_y)));
      y_in=Rin_y*sqrt(1-sqr(x_in/Rin_x));
      if (i-im<0, y_in=-y_in;);
      Point(i,js, x_in,y_in);  
    );

    theta=-pi/2;
    dtheta=pi/(ie1-is1);
    im=(ie1+is1)/2;
    for (i,is1,ie1,
      theta=((abs(i-im)/(ie1-im))^1.1)*pi/2;
      x_in=-sqrt(1/(1/sqr(Rout_x)+sqr(tan(theta)/Rout_y)));
      y_in=Rout_y*sqrt(1-sqr(x_in/Rout_x));
      if (i-im<0, y_in=-y_in;);
      Point(i,je, x_in,y_in);  
    );

    Join(is1,js,ie1,je,j,FE,0.8,dwall,1);
  );

  Corners(is,js,is,je,sizefact,-Rin_y,sizefact,-Rout_y*1.15);
  JoinCorners(is,js,is1,je,EG,0.5,1.0,1.0,FE,0.8,dwall,1.0);

  Corners(ie,js,ie,je,sizefact,Rin_y,sizefact,Rout_y*1.15);
  JoinCorners(ie1,js,ie,je,GE,0.5,1.0,1.0,FE,0.8,dwall,1.0);
);



Bdry(
  NavierStokes(
    {
    _________________________________________________________________________________________

    Boundary Condition Type           Number  Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC             0       Inflow, supersonic
    BDRY_INFLOWSUBSONIC1              7       Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1 16      Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1           1       Outflow, supersonic, 1o
    BDRY_OUTFLOWSUBSONIC1             4       Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1       15      Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                 14      Symmetrical, 2o
    BDRY_SYMMETRICAL1                 9       Symmetrical, 1o
    BDRY_WALLTFIXED1                   3       Wall, T specified
    BDRY_WALLADIABATIC1                6       Wall, Adiabatic
    BDRY_SLIPWALL1                    12      Slip wall, Adiabatic, 1o
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    Faces(BDRY_OUTFLOWSUPERSONIC1,BDRY_OUTFLOWSUPERSONIC1,  BDRY_WALLADIABATIC1,BDRY_INFLOWSUPERSONIC);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
);
 
 
Model(
  NavierStokes(
    DIFFUSION=YES;  {if set to NO, the diffusion matrix K will be set to zero}
    REACTING=YES;   {Chemical reactions?}
    Pmin=1.0e1;    Pmax=9.9e99;   {min and max pressure allowed in the domain in Pa}
    Tmin=2.0e1;     Tmax=30.0e3;    {min and max temperature allowed in the domain in K}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature allowed on any wall boundary node in K}
    wmin=1.0e-200;                  {min mass fraction allowed in the domain}
    AXISYMMETRIC=NO; {set to YES to solve axisymmetric problems in 2D}
  );
  AirPlasma11s(
    CHEMMODEL=CHEMMODEL_DUNNKANG1973;
    TOWNSENDIONIZATION=FALSE; {include reactions function of EoverN}
    TOWNSENDIONIZATIONIMPLICIT=FALSE; {keep this to FALSE even if TOWNSENDIONIZATION=TRUE}
  );
);


Init(
  NavierStokes(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns]
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns]
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns]
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns]
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns]
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns]
    _______________________________________________________________________________________

    }
    w_eminus=1e-30;
    w_Oplus=1e-30;
    w_Nplus=1e-30;
    w_O2plus=1.0e-30;
    w_N2plus=1.0e-30;
    w_NOplus=1.0e-30;
    w_O=1.0e-30;
    w_N=1.0e-30;
    w_NO=1.0e-30;
    w_O2=0.235;
    w_N2=0.765;
    All(INIT_TYPE2,Mx,My,P,T,w_eminus,w_Oplus,w_Nplus,w_O2plus,w_N2plus,w_NOplus,w_O,w_N,w_NO,w_O2,w_N2);
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE2,Mx,My,P,Twall,w_eminus,w_Oplus,w_Nplus,w_O2plus,w_N2plus,w_NOplus,w_O,w_N,w_NO,w_O2,w_N2);
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE2,Mx,My,P,T,w_eminus,w_Oplus,w_Nplus,w_O2plus,w_N2plus,w_NOplus,w_O,w_N,w_NO,w_O2,w_N2);
    Region(is,js,  ie,je, INIT_TYPE2,Mx,My,P,T,w_eminus,w_Oplus,w_Nplus,w_O2plus,w_N2plus,w_NOplus,w_O,w_N,w_NO,w_O2,w_N2);
    }
  );
);


Disc(
  NavierStokes(
    zetaA1=0.3e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.1e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.95;
    INTERPOL=INTERPOL_TVD2_VANLEER;
     
    EIGENVALCOND=EIGENVALCOND_PARENT;
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=4;
  );
);


Cycle(
  NavierStokes(
    xiverge=1e-20;  {residual convergence threshold}
    rhoref=1.0;  {reference density in kg/m3}
    aref=300.0;  {reference sound speed in m/s}
    Uref[1]=rhoref;   
    Uref[2]=rhoref;   
    Uref[3]=rhoref;   
    Uref[4]=rhoref;   
    Uref[5]=rhoref;   
    Uref[6]=rhoref;   
    Uref[7]=rhoref;   
    Uref[8]=rhoref;   
    Uref[9]=rhoref;   
    Uref[10]=rhoref;   
    Uref[11]=rhoref;   
    Uref[12]=rhoref*aref;   
    Uref[13]=rhoref*aref;   
    Uref[14]=rhoref*aref*aref;  
  );
  MultizoneSteady(
    if (mod(iter,150)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.3;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.05,CFLref);
    phi1=20;      {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
  );
  SteadyState(
    if (mod(iter,150)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.2;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.01;
    );
    CFL=min(CFL*1.03,CFLref);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );
);


Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2/m}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min,m (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min,m}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/ms\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js, ie,je);
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
  );
  printf("    Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("    Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

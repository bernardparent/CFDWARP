{
  _______________________________________________________________________________________________

                                           C F D W A R P

                                CFD Code for Plasma & Reactive Flow
  _______________________________________________________________________________________________

  Version                          20dec08a
  Compiler                         gcc 8.3.0 with OPENMP threads with distributed memory MPI
  Compiled on                      Dec 15 2020 at 14:32:44
  Cycle Strategy                   Standard
  Fluid Relaxation                 Block DDADI [2,1]
  EM Field Relaxation              Implicit schemes based on approximate factorization including
                                   ADI [4], DDADI [2,1], and IMAF [3]
  Convection Discretization        Reconstruction-Evolution MUSCL with flux FVS [5], FDS [7],
                                   and primitive interpolation TVD [6], WENO [9], CWENO [11],
                                   AOWENO [10], and eigenvalue conditioning HARTEN, GNOFFO
                                   [12], PECLET [13], PASCAL [8], and PARENT positivity-
                                   preserving filter [14]
  Temporal Discretization          Steady-State
  Fluid Model                      Navier-Stokes with drift-diffusion plasma model [15]
  Thermodynamic Model              NASA Glenn Polynomials [16]
  Chemical Model                   Air Plasma 11s Dunn-Kang [17], Park [19], Lenard [18], Boyd
                                   [20]
  EM Field Model                   Electric field potential and fixed magnetic field [21,22]
  Beam Model                       None
  Number of Dimensions             2
  Number of Flux Components        16
  Number of Species                11
  Number of Charged Species        6
  List of Species                  e-, O+, N+, O2+, N2+, NO+, O, N, NO, O2, N2
  _______________________________________________________________________________________________

  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  RW MacCormack. "Iterative Modified Approximate Factorization", Computers and Fluids
       30:917-925, 2001.
  [4]  DW Peaceman and HH Rachford. "The Numerical Solution of Parabolic and Elliptic
       Differential Equations", J. Soc. Ind. Appl. Math. 3:28-41, 1955.
  [5]  JL Steger and RF Warming. "Flux Vector Splitting of the Inviscid Gasdynamic Equations
       with Application to Finite-Difference Methods", Journal of Computational Physics 40:263-
       293, 1981.
  [6]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [7]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [8]  B Parent. "Positivity-Preserving Dual Time Stepping Schemes for Gas Dynamics", Journal of
       Computational Physics 361:391-411, 2018.
  [9]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [10] DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [11] M Dumbser and M Kaser. "Arbitrary High Order Non-oscillatory Finite Volume Schemes on
       Unstructured Meshes for Linear Hyperbolic Systems", Journal of Computational Physics,
       221:693-723, 2007.
  [12] P Gnoffo and  JA White. "Computational Aerothermodynamic Simulation Issues on
       Unstructured Grids", 37th AIAA Thermophysics Conference, AIAA Paper 2004-2371, 2004.
  [13] B Parent. "Multidimensional High-Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, 55:141-152, 2017.
  [14] B Parent. "Making a Flux Positivity-Preserving: A General Purpose Filter for the Euler
       Equations", AIAA Paper 2019-0906, AIAA Scitech, San Diego CA, 2019.
  [15] B Parent, MN Shneider, and SO Macheret. "Detailed Modeling of Plasmas for Computational
       Aerodynamics", AIAA Journal, 54:898-911, 2016.
  [16] BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.
  [17] MG Dunn and SW Kang. "Theoretical and Experimental Studies of Reentry Plasmas", NASA CR-
       2232, 1973.
  [18] M Lenard. "Ionization of Cesium and Sodium Contaminated Air in the Hypersonic Slender
       Body Boundary Layer", General Electric Missile and Space Division Technical Report
       R64SD22, 1964.
  [19] C Park. "Review of Chemical-Kinetic Problems of Future NASA Missions, I: Earth Entries,"
       Journal of Thermophysics and Heat Transfer 7:385-398, 1993.
  [20] ID Boyd, "Modeling of associative ionization reactions in hypersonic rarefied flows,"
       Physics of Fluids 19:096102, 2007.
  [21] B Parent, MN Shneider, and SO Macheret. "Generalized Ohm's Law and Potential Equation in
       Computational Weakly-Ionized Plasmadynamics", Journal of Computational Physics 230:1439-
       1453, 2011.
  [22] B Parent, SO Macheret, and MN Shneider. "Modeling Weakly-Ionized Plasmas in Magnetic
       Field: A New Computationally-Efficient Approach", Journal of Computational Physics
       300:779-799, 2015.


}


Bz=0.1; {Tesla}
mf=0.5; 
gamma=0.1e0;    {secondary emission coefficient}
gamma_diel=0.1;
gamma_elect=300.0;
Twall=3000;     {wall temperature everywhere}
gamma=10; 
THERMIONICEMISSION=TRUE;
{
            work function   max operating temperature point
 graphite   4.6 eV          3800 K
 titanium   3.6 eV          1800 K
 tungsten with Barium oxyde
            1.56 eV         1750 K
 tungsten thoriated [1]
            2.64 eV         2900 K
            3.06 eV         3700 K

 [1] An experimental study of thoriated tungsten cathodes operating at different current 
     intensities in an atmospheric-pressure plasma torch. 
     J A Sillero et al 2010 J. Phys. D: Appl. Phys. 43 185204
}


is=1;
is1=is+round(mf*40); {start of electrode}
is2=is1+round(mf*20); {end of electrode}
is3=round(is2+mf*25);
ie=round(is3+mf*20);
js=1;
je=round(mf*100);

L=0.07*10;
Lbow=0.01;
H=0.1*10;

dwall=1e-6/mf;

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(is,je, 0.0e0,H);
  Point(is1,js, L*4/15,0.0e0);
  Point(is1,je, L*4/15,H);
  Point(is2,js, L*8/15,0.0e0);
  Point(is2,je, L*8/15,H);
  Point(is3,js, L,0.0e0);
  Point(is3,je, L,H);
  JoinCorners(is1,js, is2,je,  EE,0.5e0,1.0,1.0e0,  ff,0.3e0,dwall,dwall);
  JoinCorners(is,js, is1,je,  FG,0.8e0,dwall*5,1.0e0,  ff,0.3e0,dwall,dwall);
  JoinCorners(is2,js, is3,je,  GE,0.25e0,1.0e0,1.0e0,  ff,0.3e0,dwall,dwall);
  Point(ie,js, L+0.5*L,0-0.0*L);
  Point(ie,je, L+0.5*L,H+0.0*L);
  Join(ie,js,ie,je, j, ff,0.3e0,dwall,dwall);
  Join(is3,js,ie,je, i, GE,0.6,1.0,1.0);
);


Bdry(
  NavierStokesPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            ID   Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0    Inflow, supersonic, 1o
    BDRY_INFLOWSUBSONIC1               7    Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  g    Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1            1    Outflow, supersonic, 1o
    BDRY_OUTFLOWSUPERSONIC2            2    Outflow, supersonic, 2o
    BDRY_OUTFLOWSUBSONIC1              4    Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1        f    Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                  e    Symmetrical, 2o
    BDRY_SYMMETRICAL1                  9    Symmetrical, 1o
    BDRY_WALLTFIXED1                   3    Wall, T specified; param Twall[K]
    BDRY_WALLTFIXEDTHERMIONIC1         h    Wall, T specified; param Twall[K], workfunct[eV]
    BDRY_WALLTFIXEDCATALYTIC1          i    Wall, T specified; param Twall[K], _spec(O),_spec(O2),gammaO, ...
    BDRY_WALLADIABATIC1                6    Wall, Adiabatic
    BDRY_SLIPWALL1                     c    Slip wall, Adiabatic, 1o
    BDRY_FREESTREAM1                   5    Freestream, 1o, params Vx,Vy, P, T
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1,Twall,gamma_diel);
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_WALLTFIXED1,BDRY_WALLTFIXED1);
    Plane("j",js,BDRY_WALLTFIXED1,Twall,gamma_diel);
    Plane("j",je,BDRY_WALLTFIXED1,Twall,gamma_diel);
    if (THERMIONICEMISSION,
      Region(is1,js,is2,js,BDRY_WALLTFIXED1,Twall,gamma_elect);
      Region(is1,je,is2,je,BDRY_WALLTFIXED1,Twall,gamma_elect);
    );
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    Link(i1,j1,  i2,j2);
    Param(is,js,  ie,je,  BDRY_FREESTREAM1, Vx,Vy,P,T);
    }
  );
  EpotentialBfixed(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   ID   Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0    Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2    Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1    Extrapolated, similar to outflow, 1o
    _________________________________________________________________________________________

    }
    All(BDRYEMF_DIELECTRIC);
    Region(is1,js,  is2,je,  BDRYEMF_ELECTRODE);
    {
    Faces(BDRYEMF_ELECTRODE,BDRYEMF_ELECTRODE,  BDRYEMF_DIELECTRIC,BDRYEMF_DIELECTRIC);
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRYEMF_ELECTRODE);
    Link(i1,j1,  i2,j2);
    }
  );
);
 
 
Model(
  NavierStokesPlasma(
    TEMODEL=TEMODEL_TRANSPORT;
    TETRANSPORT_WEEE_TWOTEMPERATURE=FALSE;
    N2VIBMODEL=N2VIBMODEL_EQUILIBRIUM;
    N2VIBJOULEHEATING=NO;
    REACTING=YES;
    emfieldworkheatfact=1.0;   {factor multiplying the emfield work and heat source terms}
    sigmadiv=1e-10; {S/m}
    etdiv=1e-1;     {J/kg}
    Pmin=1.0e3;    Pmax=9.9e99;   {Pa}
    Tmin=1000;     Tmax=100000;    {K}
    Tvmin=Tmin;     Tvmax=Tmax;  {K}
    Temin=300;     Temax=5e6;  {K}
    Twmin=Tmin;     Twmax=Tmax;    {K}
    wmin=1.0e-9;                  {min mass fraction allowed in the domain for neutrals}
    chiimin=1e-10;  chiimax=1.0;    {min and max ion molar fraction}
    chiemin=1e-9;  chiemax=1.0;    {min and max electron molar fraction}
    Nminbdry=1e8;   {the minimum number density in 1/m3 for the charged species at the bdry nodes}
    AXISYMMETRIC=NO;
  );
  AirPlasma11s(
    CHEMMODEL=CHEMMODEL_PARENTPARK2021;
    ADDITIONALREACTION=FALSE; {include reactions function of EoverN}
    TOWNSENDIONIZATIONIMPLICIT=FALSE; {keep this to FALSE even if TOWNSENDIONIZATION=TRUE}
    QEISOURCETERMS=TRUE;
  );
  EpotentialBfixed(
    EFIELD_SPECIES_FRAME=TRUE;
    AXISYMMETRIC=NO;
    Te_buffer=300.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Jmax=1e11;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,je, 1.0 );
    SetSolidConductivity(is,js, ie,je, 0.0 {S/m});
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
    SetMagneticField(is,js, ie,je, 0{T},0{T},Bz{T});
    {make sure that (A_x,A_y,A_z) or (B_x,B_y,B_z) do not lie on top of a node }
    {AddMagnetDipole({A_x}0, {A_y}0, {A_z}0, {B_x}0, {B_y}0.01, {B_z}0, {Bd}1);} {add a dipole with the origin at A, and strength Bd at B}
    {AddMagnetDipoleRow({A_x}0, {A_y}0, {A_z}0, {B_x}0, {B_y}0.01, {B_z}0, {Bd}1, {numsteps}200);} {add a dipole row starting from A and ending at B, with Bd the flux}
  );
);


Init(
  NavierStokesPlasma(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     Tv, Te
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], Tv, Te
    _______________________________________________________________________________________

    }
    Species("e-","O+","N+","O2+","N2+","NO+","O","N","NO","O2","N2");

    Vx=5544; {m/s}
    Vy=0; {m/s}
    P=34832; {Pa}
    T=7832; {K}
    Tv=T; {K}
    Te=T; {K}
    chi_eminus=0.00264;
    chi_Oplus=0.00128;
    chi_Nplus=0.00115;
    chi_O2plus=2.14e-13;
    chi_N2plus=2.27e-5;
    chi_NOplus=0.0001;
    chi_O=0.2135;
    chi_N=0.7644;
    chi_NO=0.000166;
    chi_O2=1.51e-6;
    chi_N2=0.0168;    

    All(INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_Oplus,chi_Nplus,chi_O2plus,chi_N2plus,chi_NOplus,chi_O,chi_N,chi_NO,chi_O2,chi_N2,Tv,Te);
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_Ominus,chi_O2minus,chi_Oplus,chi_Nplus,chi_O2plus,chi_N2plus,chi_NOplus,chi_Csplus,chi_Cs,chi_O,chi_N,chi_NO,chi_O2,chi_N2,Tv,Te);
    Region(is,js,  ie,je, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_Ominus,chi_O2minus,chi_Oplus,chi_Nplus,chi_O2plus,chi_N2plus,chi_NOplus,chi_Csplus,chi_Cs,chi_O,chi_N,chi_NO,chi_O2,chi_N2,Tv,Te);
    }
  );
  EpotentialBfixed(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
    phi=0.0; {V}
    phi_bot=0.0;
    phi_top=0.0;
    All(INITEMF_TYPE1,phi);
    Region(is,js,  ie,js,INITEMF_TYPE1,phi_bot);
    Region(is,je,  ie,je,INITEMF_TYPE1,phi_top);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,  ie,je,INITEMF_TYPE1,phi);
    }
  );
);


Disc(
  NavierStokesPlasma(
    zetaA1=0.01e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.1e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
    zetaD=0.0;        {conditions the Dstar eigenvalues for the charged species}
    for (spec,1,numspec,
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONPLUS,
        betag[spec]=0.3;
        betaa[spec]=0.0;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONMINUS,
        betag[spec]=-0.5;
        betaa[spec]=0.5;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_ELECTRON,
        betag[spec]=-0.001; 
        betaa[spec]=0.999;
      );
    );
  );
  EpotentialBfixed(
    POTENTIAL=POTENTIAL_OHMBASED;
    Ediv=10;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.999;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_PECLET;
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=4;
  );
  CDFplus(
    for(flux,1,numflux,
      if (flux<=numspec+numdim+1,
        xi[flux]=0.5;
      );
      if (flux>numspec+numdim+1,
        xi[flux]=0.25;
      );
    );
  );
);


Cycle(
  NavierStokesPlasma(
    xiverge=1e-3;         {residual convergence threshold}
    zetaGammai=1.0;       {factor multiplying the pseudotime step of the ion species transport equations} 
    zetaGammae=1.0;       {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode}
    relaxNi_bdry=1.0;     {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.1;     {the electron density relaxation factor at the boundary }
    relaxTe=0.3;          {the electron temperature relaxation factor }
    rhoref=0.1;           {reference density in kg/m3}
    Tref=300.0;           {reference temperature in K}
    Teref=20000.0;        {reference electron temperature in K}
    Tvref=5000.0;         {reference vibrational temperature in K}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-1;            {average ion mass fraction}
    for (spec,1,numspec,
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONPLUS || SPECIESTYPE[spec]==SPECIESTYPE_IONMINUS,
        Uref[spec]=wion*rhoref;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_NEUTRAL,
        Uref[spec]=rhoref;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_ELECTRON,
        Uref[spec]=wion*1.8e-5*rhoref;
      );
    );
    for (dim,1,numdim,
      Uref[numspec+dim]=rhoref*aref;
    );
    Uref[numspec+numdim+1]=rhoref*aref*aref;
    Uref[numspec+numdim+2]=rhoref*700.0*Tvref;
    Uref[numspec+numdim+3]=rhoref*wion*414*Teref;
  );
  EpotentialBfixed(
    xiverge_emfield=1e-2; {residual convergence threshold for the potential equation}
    relaxEk=0.3; {relaxation factor for E in species frame}
    sigmaref=3e-6; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );
  SteadyState(
    if (mod(iter,100)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.0;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.001;
    );
    CFL=min(CFL*1.03,1.0);
    Model(
      EpotentialBfixed(
        SetMagneticField(is,js, ie,je, 0,0,min(Bz,Bz*iter/(mf*300))); 
      );
    );
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2);
    Lc=1000e44;      {characteristic length scale in meters used to solve the emfield equation}
    relaxEMF=0.8; {relaxation factor forced on the update of the emfield variables}
    if (iter>10,
       UpdateEMField(Lc,relaxEMF,TSEMF_IMAF,5);
       UpdateEMField(Lc,relaxEMF,TSEMF_SOR,100);
    );
{    UpdateEMField(Lc,relaxEMF,TSEMF_NEWTON);}
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
  );

  DualTimeStepping(
    tmax=10e-6;    {simulation time span in seconds}
    dt=tmax/300;   {physical time step in seconds}
    sigma1=0.0;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.15,0.7);
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2,dt);
    Lc=100e3;      {characteristic length scale in meters used to solve the emfield equation}
    relaxEMF=0.8; {relaxation factor forced on the update of the emfield variables}
    UpdateEMField(Lc,relaxEMF,dt,TSEMF_IMAF,40); 
    UpdateEMField(Lc,relaxEMF,dt,TSEMF_SOR,280); 
    
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
    if (iter>30,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );


);


Post(
  fprintf(postfilename,"\n");
  for (dim,1,2,
    Area[dim]=_Area(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(is,js, ie,je, dim);
  );
  fprintf(postfilename,"Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  fprintf(postfilename,"Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  fprintf(postfilename,"Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  fprintf(postfilename,"metotal   = %+E J/m\n",_metotal(is,js, ie,je));
  fprintf(postfilename,"m         = %+E J/m\n",_m(is,js, ie,je));
  fprintf(postfilename,"Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  fprintf(postfilename,"Qbeam     = %+E W/m\n",_Qbeam(is,js, ie,je));
  fprintf(postfilename,"EdotJ     = %+E W/m\n",_EdotJ(is,js, ie,je));
  fprintf(postfilename,"Wemfield  = %+E W/m\n",_Wemfield(is,js, ie,je)); {Wemfield=Femfield dot Vn}
  fprintf(postfilename,"\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js, ie,je, "post.01", "tecplot", POSTGRIDONLY);
  }
);

{
  _____________________________________________________________________________

  WARP: a CFD Code for Plasma & Reactive Flows [a]
  _____________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block DDADI [2,1]
  EM Field Integration                    none
  Convection Derivative Discretization    Positivity-Preserving FDS [3]
                                          ADER-WENO 6th Order [4]
  Time Derivative Discretization          Positivity-Preserving
                                          Cross-Difference Formula Parent
                                          First-Order [5]
  Fluid Transport Model                   Navier-Stokes Perfect Gas
  Chemical Model                          Air 1 species 0 reaction
  Beam Model                              None
  EM Field Model                          None
  Thermodynamic Model                     Perfect Gas
  Number of Dimensions                    2
  Number of Flux Components               4
  _____________________________________________________________________________

  [a]  B Parent. "WARP: a CFD Code for Plasma & Reactive Flows", WARP version
       17apr04a compiled on Apr  5 2017 at 14:22:43 by parent on WAFL101 using
       gcc 4.9.2 with OPENMP threads. WARP is a Copyright (c) 1998-2017 of
       Bernard Parent. Copying and distribution of WARP is prohibited.
  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th
       Computational Fluid Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations
       with the CSCM Implicit Upwind Navier-Stokes Method", Proceedings of the
       8th Computational Fluid Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  B Parent. "Positivity-Preserving Flux Difference Splitting Schemes",
       Journal of Computational Physics 243:194-209, 2013.
  [4]  DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes
       with Adaptive Order", Journal of Computational Physics 326:780-804,
       2016.
  [5]  B Parent. "Positive Coefficients, Cross Differences, and
       Dual-Time-Stepping Schemes", under review, 2017.

}

CASE1=1;
CASE2=2;
CASE3=3;
CASE4=4;
CASE5=5;


CASE=CASE4;


Vx=2000;

mf=1.0;
tf=1.0;

{
mf=0.5, T=K
mf=1.0, T=490.6K
mf=2.0, T=486.7K
mf=4.0, T=484.4K
mf=8.0, T=483.2K
}

is=1;  js=1; 
ie=round(52*mf+1); je=round(12*mf+1);

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, 1.0e0,0.0e0);
  Point(ie,je, 1.0e0,1.0e0);
  Point(is,je, 0.0e0,1.0e0);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
);


Bdry(
  NavierStokesPerfect(
    {
    _________________________________________________________________________________________

    Boundary Condition Type    Number   Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC      0        Inflow, supersonic
    BDRY_OUTFLOWSUPERSONIC1    1        Outflow, supersonic, 1o
    BDRY_SYMMETRICAL1          2        Symmetrical, 1o (can be used as a "slip wall")
    BDRY_SYMMETRICAL2          3        Symmetrical, 2o (can be used as a "slip wall")
    BDRY_WALLTFIXED1            4        Wall, T specified
    BDRY_WALLADIABATIC1         5        Wall, adiabatic
    BDRY_INFLOWSUBSONIC1       6        Subsonic Inflow 1o (Constant Tstag, Pstag at inflow)
    BDRY_OUTFLOWSUBSONIC1      7        Subsonic Outflow 1o (Constant P at outflow)
    _________________________________________________________________________________________
    }
    All(BDRY_OUTFLOWSUPERSONIC1);
    if (CASE==CASE2,
      Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_SYMMETRICAL2,BDRY_SYMMETRICAL2);
    ,{else}
      Faces(BDRY_OUTFLOWSUPERSONIC1,BDRY_INFLOWSUPERSONIC,  BDRY_SYMMETRICAL2,BDRY_SYMMETRICAL2);
    );
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
);
 
 
Model(
  NavierStokesPerfect(
    gamma=1.4;
    R=286.0;        {J/kgK }
    eta=2e-5;       {kg/ms}
    kappa=0.03;     {W/mK}
    Pmin=1.0e-2;    Pmax=9.9e99;   {Pa}
    Tmin=1.0e1;     Tmax=600.0e3;    {K}
    AXISYMMETRIC=FALSE;
    SetBodyForce(is,js, ie,je, 0.0{N/m3},0.0{N/m3});
    SetHeatDeposited(is,js, ie,je, 0.0 {W/m3});
    {
    AddHeatPoint(0.0{x,m},0.0{y,m}, 0.1{radius,m}, 0.0{W/m});
    }
  );
);


Init(
  NavierStokesPerfect(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  P,  T     
    INIT_TYPE2                   M[1]..M[nd],  P,  T     
    _______________________________________________________________________________________
    }
    if (CASE==CASE2,
      Vx=-Vx;
    );
    Vy=0;
    P=10000; {Pa}
    T=300; {K}
    All(INIT_TYPE1,Vx,Vy,P,T);
    if (CASE==CASE1,
      Region(round(is+(ie-is)/5),round(js+(je-js)/4),  round(is+(ie-is)/2),round(js+3*(je-js)/4),  INIT_TYPE1, Vx,Vy,P,T*3);
    );
    if (CASE==CASE2,
      Region(round(ie-(ie-is)/2),round(js+(je-js)/4), round(ie-(ie-is)/5) ,round(js+3*(je-js)/4),  INIT_TYPE1, Vx,Vy,P,T*3);
    );
    if (CASE==CASE3,
      for (i,round(is+(ie-is)/10),round(is+(ie-is)/2),
        Region(i,round(js+(je-js)/4),  i,round(js+3*(je-js)/4),  INIT_TYPE1, Vx,Vy,P,T+abs(200*sin(i/(ie-is)*2*pi)));
      );
    );
    if (CASE==CASE4,
      for (i,is,ie,
        if (mod(i,10)<4,
          Region(i,round(js+(je-js)/4),  i,round(js+3*(je-js)/4),  INIT_TYPE1, Vx,Vy,P,T*3);
        );
      );
    );
    if (CASE==CASE5,
      for (i,is,ie,
        if (mod(i,20)<8,
          Region(i,round(js+(je-js)/4),  i,round(js+3*(je-js)/4),  INIT_TYPE1, Vx,Vy,P,T*3);
        );
      );
    );

    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE2, Mx,My,P,T);
    Region(is,js,  ie,je,  INIT_TYPE2, Mx,My,P,T);
    }
  );
);



Disc(
  NavierStokesPerfect(
    zetaA1=0.0e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.2;
    zetaA3=0.1;
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.85;
    AOWENO_gammahi=0.85;
    INTERPOL=INTERPOL_AOWENO5;
    EIGENVALCOND=EIGENVALCOND_GNOFFO;
  );
  CDFplus(
    xi1=1.0;
    xi2=0.5;
    xi3=1.0;
  );
);


Cycle(
  NavierStokesPerfect(
    xiverge=1e0;          {residual convergence threshold}
    rhoref=1.0;            {reference density in kg/m3}
    aref=300.0;            {reference sound speed in m/s}
    Uref[1]=rhoref;            
    Uref[2]=rhoref*aref;       
    Uref[3]=rhoref*aref;   
    Uref[4]=rhoref*aref*aref;  
  );
  PredictorCorrector(
    tmax=5.3e-4*600/abs(Vx);    {simulation time span in seconds}
    dt=tmax/(60*mf*tf);   {physical time step in seconds}
    if (time>tmax-0.1*dt,
      WriteDataFile(outputfilename"."round(time/dt));
      exit(EXIT_SUCCESS);
    );
    if (mod(iter,50)==1,
      WriteDataFile(outputfilename"."round(time/dt));
    );
    UpdateFluid(dt);
    printf("%E %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           time,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );
  Multizone(
    tmax=6e-4*600/abs(Vx);    {simulation time span in seconds}
    dt=tmax/(60*mf*tf);   {physical time step in seconds}
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.4;   {exponent of maximum pseudotime step in all fluxes}
    phi1=20;      {maximum number of gridlines per zone in each dimension}
    if (iter==1,
      CFL=1.3;
    );
    CFL=min(CFL*1.2,2.5);
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2,phi1,dt);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
    if (ximax<xiverge || iter>30,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );

  DualTimeStepping(
    tmax=6e-4*600/abs(Vx);    {simulation time span in seconds}
    dt=tmax/(60*mf*tf);   {physical time step in seconds}
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.4;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=1.3;
    );
    CFL=min(CFL*1.2,2.5);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,dt);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
    if (ximax<xiverge || iter>30,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );
);


Post(
  xstation[1]=0.1; {m}
  xstation[2]=0.2; {m}
  xstation[3]=0.3; {m}
  numsteps=300;
  qmin=1.0; {m/s, as small a value as possible}
  Pback_min=400; {Pa}
  Pback_max=40000; {Pa}
  Aback=1.0; {m2/m}
  for (cnt,1,3,
    XSTATION_Set(xstation[cnt]);
    Pback=XSTATION_Pback(Aback, Pback_min, Pback_max, numsteps, qmin);
    Fpot=XSTATION_Fpot(Pback, numsteps, qmin);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag(numsteps);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("x      = %E m\n"
           "Pback  = %E Pa\n"
           "Fpot   = %E Ns/kg\n"
           "mdot   = %E kg/ms\n"
           "htstar = %E J/kg\n"
           "Tstag  = %E K\n"
           "Pstag  = %E Pa\n"
           "Pstar  = %E Pa\n"
           "T      = %E K\n"
           "q      = %E m/s\n"
           "rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,je, dim,BDRY_WALLTFIXED1);
  );
  printf("Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  printf("\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js, ie,je, "post.01", "tecplot", POSTGRIDONLY);
  }
);

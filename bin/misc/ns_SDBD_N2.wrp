
 

mf=1.0; {1.0, 1.41, 2.0, 2.82}

tf=1.0; {tf=2 works great, tf=1 not bad}
itermax=100;  {100 usually.}

dphimax=4000;

CFLfact=1;

is1=1;
is2=round(mf*18); {start of exposed electrode}
is3=is2+round(mf*23);
is4=is3+round(mf*70); {start of embedded electrode}
is5=is4+round(mf*300); {end of embedded electrode}
is6=is5+round(mf*18);
is=is1;
ie=is6;



js2=1; 
js3=js2+round(mf*12); {exposed electrode is between js3 and js4}
js4=js3+round(mf*9);  {start of plasma/gas}
js5=js4+round(mf*33);
js6=js5+round(mf*25);
js=js2;
je=js6;


xs1=-0.015;
xs2=-0.0051;
xs3=-0.001;
xs4=0;
xs5=0.0048;
xs6=0.015;
dx=(xs5-xs4)/(is5-is4)/6;
dy=dx/7;
ys0=-50e-6;
ys1=0.0;
ys2=37.5e-6;
ys3=0.3e-3-37.5e-6;
ys4=0.3e-3;
ys5=0.6e-3;
ys6=0.015;


Grid(
  Size(is,js, ie,je);
  printf("%ldx%ld..",ie-is+1,je-js+1);
  {left electrode}

  Corners    (is3,js2,is4,js3,  xs3,ys2,xs4,ys3);
  Corners    (is3,js3,is4,js4,  xs3,ys3,xs4,ys4);

  JoinCorners(is3,js3,is4,js4,  EF,0.5e0,1.0e0,dx,  EF,0.1e0,1.0e0,dy);
  JoinCorners(is3,js2,is4,js3,  EF,0.5e0,1.0e0,dx,  EG,0.5e0,1.0e0,1.0e0);


  Copy(is3,js2,is3,js4,is2,js2);
  Translate(is2,js2,is2,js4,xs2-xs3,0);
  Join(is2,js2, is3,js4,  i, EG,0.5e0,1.0e0,1.0e0);

  {left of left electrode}
  Copy(is3,js2,is3,js4,is1,js2);
  Translate(is1,js2,is1,js4,xs1-xs3,0);
  Join(is1,js2, is2,js4,  i, EG,0.66e0,1.0e0,1.0e0);


  {right electrode and dielectric}
  Copy(is4,js2,is4,js4,is5,js2);
  Translate(is5,js2,is5,js4,xs5-xs4,0);
  Join(is4,js2, is5,js4,  i, GE,0.5e0,1.0e0,1.0);



  {right of right electrode}
  Copy(is4,js2,is4,js4,is6,js2);
  Translate(is6,js2,is6,js4,xs6-xs4,0);
  Join(is5,js2, is6,js4,  i, GE,0.34e0,1.0e0,1.0e0);
  
  {copy js4 to js5}
  Copy(is,js4,ie,js4,is,js5);
  Translate(is,js5,ie,js5,0.0,ys5-ys4);
  Join(is,js4,ie,js5,j,GE,0.5e0,1.0e0,1.0e0);

  {copy js4 to je}
  Copy(is,js4,ie,js4,is,je);
  Translate(is,je,ie,je,0.0,ys6-ys4);
  Join(is,js5,ie,je,j,GE,0.2e0,1.0e0,1.0e0);
  
);



Bdry(
  DriftDiffusion(
    Cut(is,js2,  ie,js4);
    All(BDRY_WALL);
  );
  Epotential(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   Number     Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0          Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2          Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1          Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
    All(BDRYEMF_DIELECTRIC);
    {cut the exposed electrode}
    Cut(is2,js3,  is4,js4);
    Region(is2,js3,  is4,js4,  BDRYEMF_ELECTRODE);
    Region(is4,js2,  is5,js2,  BDRYEMF_ELECTRODE);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRYEMF_ELECTRODE);
    }
  );
);
 
 
Model(
  DriftDiffusion(
    Te=10000.0;       {K}
    CONSTANT_TE=FALSE;
    Ti=300.0;         {K}
    gamma=0.05;        {the secondary emission coefficient}
    Nminbdry=1e8;     {the min number density for the charged species at the bdry nodes in 1/m3}
    Nemin=1e6;        {1/m3}
    Nimin=1e6;        {1/m3}
    Nkmax=1e23;       {1/m3}
    Temin=100;       {K}
    Temax=60000;      {K}
    sigmadiv=1e-20;   {S/m}
  );
  Epotential(
    Te_buffer=3000.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,T+Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Jmax=2000000000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,js4, 5.0 );
    SetRelativePermittivity(is,js4, ie,je, 1.0 );
    SetSolidConductivity(is,js, ie,je, 0.0 {S/m});
   
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
  );
);


Init(
  DriftDiffusion(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   N[1]..N[ns], Te   
    _______________________________________________________________________________________

    }
    N_eminus=1e10; {1/m3}
    N_N2plus=1e10; {1/m3}
    N_N2=2.2e25; {1/m3}
    Te=3000; {electron temperature in K}
    All(INIT_TYPE1,N_eminus,N_N2plus,N_N2,Te);
    {
    Bdry(WALL, INIT_TYPE1,N_eminus,N_N2plus,N_N2,Te);
    Region(is,js,  ie,je, INIT_TYPE1,N_eminus,N_N2plus,N_N2,Te);
    }
  );
  Epotential(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
    phi=0.0; {V}
    All(INITEMF_TYPE1,phi);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,  ie,je,INITEMF_TYPE1,phi);
    }
  );
);


Disc(
  DriftDiffusion(
    aref=300.0;       {reference speed of sound in m/s used when conditioning Dstar eigenvalues  }
    zetaD=1.0;        {conditions the Dstar eigenvalues for the charged species}
  );
  Epotential(
    Ediv=10.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
  );
  MUSCLplus(
    FLUX=FLUX_FDSplus;
    AVERAGING=AVERAGING_ARITH;
    numiter=2;
    AOWENO_TYPE=AOWENO_TYPE_COMPRESSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.95;
    INTERPOL=INTERPOL_AOWENO5;
    EIGENVALCOND=EIGENVALCOND_PASCAL; 
  );
  CDFplus(
    xi1=0.5;
    xi2=0.5;
    xi3=0.5;
  );
);




Cycle(
  DriftDiffusion(
    xiverge=1e-3;         {residual convergence threshold}
    zetaGammai=1.0;       {factor multiplying the pseudotime step of the ion species transport equations
                           when PRECONDITIONER is set to PRECON_LOCALTIMESTEPPLASMA} 
    zetaGammae=1.0;      {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode when PRECONDITIONER is set to PRECON_LOCALTIMESTEPPLASMA} 
    relaxNi_bdry=1.0;     {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.8;     {the electron density relaxation factor at the boundary }
    relaxTe=0.9;          {the electron temperature relaxation factor }
    aref=300.0;           {reference speed of sound in m/s when determining the pseudotime step  }
    Nref=1e18;            {reference number density in 1/m3}
    Teref=5000;           {reference electron temperature in K}
    Uref[1]=Nref;   
    Uref[2]=Nref;   
    Uref[3]=Nref*1e99;   
    Uref[4]=Teref*1e99;   
  );
  Epotential(
    xiverge_emfield=1e-2; {residual convergence threshold for the potential equation}
    sigmaref=3e-6; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );
  DualTimeStepping(
    tmax=25e-6;    {simulation time span in seconds}
    dtref=20e-9/(mf*30*tf);   {physical time step in seconds}
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.3;   {exponent of maximum pseudotime step in all fluxes}
    if (time<20e-9,
      dphi=min(dphimax,time/9e-9*dphimax);
    ,{else}
      dphi=max(0.0,dphimax-(time-20e-9)*dphimax/15e-9);
    );
    printf("%ld  ",round(dphi));
    
    if (iter==1,
      Init(Epotential(
        Region(is2,js3,  is4,js4,  INITEMF_TYPE1,dphi/2);
        Region(is4,js2,  is5,js2,  INITEMF_TYPE1,-dphi/2);
      ););
    );
    if (time<40e-9,
      dt=dtref;   {physical time step in seconds}
      if (tf<1.8, 
        CFL=0.8; 
      ,{else} 
        CFL=1.0;
      );
      if (iter<6, CFL=0.0;);
    ,{else}
      if (iter==1, 
        dt=min(dt*1.8,0.6e-3/(330*mf*tf));
        CFL=0.2;
      ,{else}
        CFL=min(1.0,CFL*1.4);
      );
    );
    UpdateFluid(CFL*CFLfact,PRECON_LOCALTIMESTEP,sigma1,sigma2,dt);

    if (iter<2 || TRUE,
      UpdateEMField(1e99,1.0,dt,TSEMF_NEWTON); {optional extra parameters:  tsemfmethod [TSEMF_ADI, TSEMF_DDADI, TSEMF_IMAF, etc] and numsubiter_tsemf [default: 4] if supported}
    ,{else}
     for (cnt,0,0,
      Lc=1e-3*400;      {characteristic length scale in meters used to solve the emfield equation}
      relaxEMF=1.0; {relaxation factor forced on the update of the emfield variables}
      UpdateEMField(Lc,relaxEMF,dt,TSEMF_SOR,200); {optional extra parameters:  tsemfmethod [TSEMF_ADI, TSEMF_DDADI, TSEMF_IMAF, etc] and numsubiter_tsemf [default: 4] if supported}
      UpdateEMField(Lc*1e99,relaxEMF,dt,TSEMF_IMAF,20);
     );
    );
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL*CFLfact,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
    if (iter>itermax,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dtref));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );
);


Post(
{  xstation[1]=0.001; {m}
  xstation[2]=0.002; {m}
  xstation[3]=0.003; {m}
  numsteps=300;
  qmin=1.0; {m/s, as small a value as possible}
  Pback_min=400; {Pa}
  Pback_max=40000; {Pa}
  Aback=1.0; {m2/m}
  for (cnt,1,3,
    XSTATION_Set(xstation[cnt]);
    Pback=XSTATION_Pback(Aback, Pback_min, Pback_max, numsteps, qmin);
    Fpot=XSTATION_Fpot(Pback, numsteps, qmin);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag(numsteps);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("x      = %E m\n"
           "Pback  = %E Pa\n"
           "Fpot   = %E Ns/kg\n"
           "mdot   = %E kg/ms\n"
           "htstar = %E J/kg\n"
           "Tstag  = %E K\n"
           "Pstag  = %E Pa\n"
           "Pstar  = %E Pa\n"
           "T      = %E K\n"
           "q      = %E m/s\n"
           "rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
}
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(is,js, ie,je, dim);
  );
  printf("Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  printf("Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  printf("Qbeam     = %+E W/m\n",_Qbeam(is,js, ie,je));
  printf("EdotJ     = %+E W/m\n",_EdotJ(is,js, ie,je));
  printf("Wemfield  = %+E W/m\n",_Wemfield(is,js, ie,je)); {Wemfield=Femfield dot Vn}
  printf("metotal   = %+E J/m\n",_metotal(is,js4, ie,je)); {Wemfield=Femfield dot Vn}
  printf("m         = %+E kg/m\n",_m(is,js4, ie,je)); {Wemfield=Femfield dot Vn}
  printf("\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js, ie,je, "post.01", "tecplot", POSTGRIDONLY);
  }
);



{
  ____________________________________________________________________________

  WARP: a CFD Code for Plasma & Reactive Flows [a]
  ____________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block DDADI [2,1]
  EM Field Integration                    IMAF [3]
  Convection Derivative Discretization    Positivity-Preserving FDS [4] WENO
                                          Adaptive Order 3,5 [5]
  Time Derivative Discretization          Positivity-Preserving
                                          Cross-Difference Formula [6]
  Fluid Transport Model                   Navier-Stokes with drift-diffusion
                                          plasma model [7]
  Chemical Model                          Air Plasma 8 species 28 reactions
                                          Macheret [7]
  Beam Model                              None
  EM Field Model                          Potential based on Ohm's law [8]
  Thermodynamic Model                     NASA Glenn Polynomials [9]
  Number of Dimensions                    2
  Number of Flux Components               13
  Number of Species                       8
  Number of Charged Species               4
  List of Species                         e-, O2-, O2+, N2+, O, N, O2, N2
  ____________________________________________________________________________

  [a]  B Parent. "WARP: a CFD Code for Plasma & Reactive Flows", WARP version
       17sep04a compiled on Sep  4 2017 at 22:49:31 by parent on WAFL101
       using gcc 4.9.2 with OPENMP threads. WARP is a Copyright (c) 1998-2017
       of Bernard Parent. Copying and distribution of WARP is prohibited.
  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th
       Computational Fluid Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow
       Simulations with the CSCM Implicit Upwind Navier-Stokes Method",
       Proceedings of the 8th Computational Fluid Dynamics Conference, AIAA
       Paper 87-1114, 1987.
  [3]  RW MacCormack. "Iterative Modified Approximate Factorization",
       Computers and Fluids 30:917-925, 2001.
  [4]  B Parent. "Positivity-Preserving Flux Difference Splitting Schemes",
       Journal of Computational Physics 243:194-209, 2013.
  [5]  DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes
       with Adaptive Order", Journal of Computational Physics 326:780-804,
       2016.
  [6]  B Parent. "Positive Coefficients, Cross Differences, and
       Dual-Time-Stepping Schemes", under review, 2017.
  [7]  B Parent, MN Shneider, and SO Macheret. "Detailed Modeling of Plasmas
       for Computational Aerodynamics", AIAA Journal, 54:898-911, 2016.
  [8]  B Parent, SO Macheret, and MN Shneider. "Electron and Ion Transport
       Equations in Computational Weakly-Ionized Plasmadynamics", Journal of
       Computational Physics 259:51-69, 2014.
  [9]  BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for
       Calculating Thermodynamic Properties of Individual Species", NASA TP
       2002-211556, 2002.

}


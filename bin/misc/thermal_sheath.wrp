{
  _______________________________________________________________________________________________

                                           C F D W A R P

                                CFD Code for Plasma & Reactive Flow
  _______________________________________________________________________________________________

  Version                          19feb07a
  Compiler                         gcc 4.9.2 with OPENMP threads
  Compiled on                      Feb  7 2019 at 17:03:55 by parent on CLEO
  Cycle Strategy                   Standard
  Fluid Relaxation                 Block DDADI [2,1]
  EM Field Relaxation              Implicit schemes based on Gauss-Seidel sweeps including SOR
                                   [3,4] and SOR2
  Convection Discretization        Multidimensional MUSCL with flux FVS [5], FDS [7], and
                                   primitive interpolation TVD [6], WENO [9], CWENO [11],
                                   AOWENO [10], and eigenvalue conditioning HARTEN, GNOFFO
                                   [12], PECLET [13], PARENT [8], and PARENT positivity-
                                   preserving filter [14]
  Temporal Discretization          Steady-State
  Fluid Model                      Navier-Stokes with drift-diffusion plasma model [15]
  Thermodynamic Model              NASA Glenn Polynomials [16]
  Chemical Model                   Air Plasma 12 species 59 reactions Dung-Kang-Macheret [17,15]
  EM Field Model                   Potential based on Ohm's law [18]
  Beam Model                       None
  Number of Dimensions             2
  Number of Flux Components        17
  Number of Species                12
  Number of Charged Species        7
  List of Species                  e-, O2-, O+, N+, O2+, N2+, NO+, O, N, NO, O2, N2
  _______________________________________________________________________________________________

  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  DM Young. "Iterative Methods for Solving Partial Difference Equations of Elliptic Type",
       PhD thesis, Harvard University, May 1950.
  [4]  S Frankel, "Convergence Rates of Iterative Treatments of Partial Differential Equations",
       Mathematics of Computation 4:56-75, 1950.
  [5]  JL Steger and RF Warming. "Flux Vector Splitting of the Inviscid Gasdynamic Equations
       with Application to Finite-Difference Methods", Journal of Computational Physics 40:263-
       293, 1981.
  [6]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [7]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [8]  B Parent. "Positivity-Preserving Dual Time Stepping Schemes for Gas Dynamics", Journal of
       Computational Physics 361:391-411, 2018.
  [9]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [10] DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [11] M Dumbser and M Kaser. "Arbitrary High Order Non-oscillatory Finite Volume Schemes on
       Unstructured Meshes for Linear Hyperbolic Systems", Journal of Computational Physics,
       221:693-723, 2007.
  [12] P Gnoffo and  JA White. "Computational Aerothermodynamic Simulation Issues on
       Unstructured Grids", 37th AIAA Thermophysics Conference, AIAA Paper 2004-2371, 2004.
  [13] B Parent. "Multidimensional High-Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, 55:141-152, 2017.
  [14] B Parent. "Making a Flux Positivity-Preserving: A General Purpose Filter for the Euler
       Equatons", AIAA Paper 2019-0906, AIAA Scitech, San Diego CA, 2019.
  [15] B Parent, MN Shneider, and SO Macheret. "Detailed Modeling of Plasmas for Computational
       Aerodynamics", AIAA Journal, 54:898-911, 2016.
  [16] BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.
  [17] MG Dunn and SW Kang. "Theoretical and Experimental Studies of Reentry Plasmas", NASA CR-
       2232, 1973.
  [18] B Parent, SO Macheret, and MN Shneider. "Electron and Ion Transport Equations in
       Computational Weakly-Ionized Plasmadynamics", Journal of Computational Physics 259:51-
       69, 2014.


}

 Mx=25;
My=0.0;
P=300/Mx^2*16^2;
T=238;
Twall=3000;
Tmax_barrier=25000;
ADIABATIC_WALL=TRUE; {set to false for a fixed wall temperature set to Twall}





meshtype=2; {set to 1 for gridline on axis of symmetry ; 
             set to 2 for no gridline on axis of symmetry ;}
meshfact=1.0;
sizefact=0.02;

dsheath=50e-6;

is=1;  js=1; 
is1=round(8*meshfact);
if (meshtype==1,
  ie1=is1+round(64*meshfact)+1; 
);
if (meshtype==2,
  ie1=is1+round(64*meshfact); 
);
ie=ie1+is1;

js1=round(30*meshfact)+1;
je=round(90*meshfact)+1;
Rin_x=0.6*sizefact;
Rin_y=Rin_x/0.3;
Rout_x=Rin_x*3.38;
Rout_y=Rin_y*2.8;



Grid(
  Size(is,js, ie,je);

  if (meshtype==1 || meshtype==2,
    theta=-pi/2;
    dtheta=pi/(ie1-is1);
    im=(ie1+is1)/2;
    for (i,is1,ie1,
      theta=((abs(i-im)/(ie1-im))^1.3)*pi/2;
      x_in=-sqrt(1/(1/sqr(Rin_x)+sqr(tan(theta)/Rin_y)));
      y_in=Rin_y*sqrt(1-sqr(x_in/Rin_x));
      if (i-im<0, y_in=-y_in;);
      Point(i,js, x_in,y_in);  
    );

    theta=-pi/2;
    dtheta=pi/(ie1-is1);
    im=(ie1+is1)/2;
    for (i,is1,ie1,
      theta=((abs(i-im)/(ie1-im))^1.1)*pi/2;
      x_in=-sqrt(1/(1/sqr(Rout_x)+sqr(tan(theta)/Rout_y)));
      y_in=Rout_y*sqrt(1-sqr(x_in/Rout_x));
      if (i-im<0, y_in=-y_in;);
      Point(i,je, x_in,y_in);  
    );

    for (i,is1,ie1,
      L=sqrt((_x(is1,je)-_x(i,js))^2+(_y(i,je)-_y(i,js))^2);
      Point(i,js1,_x(i,js)+dsheath/L*(_x(i,je)-_x(i,js)),_y(i,js)+dsheath/L*(_y(i,je)-_y(i,js)));
      Join(i,js,i,js1,j,EE,0.5,1.0,1.0);
    );
    Join(is1,js1,ie1,je,j,GE,0.8,1,1);
  );

  Copy(is1,js,is1,je, is,js);
  Translate(is,js,is,je,sizefact*1.0,0);
  Translate(is,je,is,je,0,-sizefact*0.6);
  Join(is,js1,is,je,j,GE,0.8,1.0,1.0);
  Join(is,js,is1,je,i,EG,0.5,1.0,1.0);

  Copy(ie1,js,ie1,je, ie,js);
  Translate(ie,js,ie,je,sizefact*1.0,0);
  Translate(ie,je,ie,je,0,sizefact*0.6);
  Join(ie,js1,ie,je,j,GE,0.8,1.0,1.0);
  Join(ie1,js,ie,je,i,GE,0.5,1.0,1.0);

);


Bdry(
  NavierStokesPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            ID   Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0    Inflow, supersonic, 1o
    BDRY_INFLOWSUBSONIC1               7    Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  g    Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1            1    Outflow, supersonic, 1o
    BDRY_OUTFLOWSUPERSONIC2            2    Outflow, supersonic, 2o
    BDRY_OUTFLOWSUBSONIC1              4    Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1        f    Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                  e    Symmetrical, 2o
    BDRY_SYMMETRICAL1                  9    Symmetrical, 1o
    BDRY_WALLTFIXED1                   3    Wall, T specified
    BDRY_WALLADIABATIC1                6    Wall, Adiabatic
    BDRY_SLIPWALL1                     c    Slip wall, Adiabatic, 1o
    BDRY_FREESTREAM1                   5    Freestream, 1o, params Vx,Vy, P, T
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    if (ADIABATIC_WALL,
      Faces(BDRY_OUTFLOWSUPERSONIC1,BDRY_OUTFLOWSUPERSONIC1,  BDRY_WALLADIABATIC1,BDRY_INFLOWSUPERSONIC);
    ,{else}
      Faces(BDRY_OUTFLOWSUPERSONIC1,BDRY_OUTFLOWSUPERSONIC1,  BDRY_WALLTFIXED1,BDRY_INFLOWSUPERSONIC);
    );
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    Link(i1,j1,  i2,j2);
    Param(is,js,  ie,je,  BDRY_FREESTREAM1, Vx,Vy,P,T);
    }
  );
  Epotential(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   ID   Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0    Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2    Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1    Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
    All(BDRYEMF_DIELECTRIC);
    {
    Faces(BDRYEMF_ELECTRODE,BDRYEMF_ELECTRODE,  BDRYEMF_DIELECTRIC,BDRYEMF_DIELECTRIC);
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRYEMF_ELECTRODE);
    Link(i1,j1,  i2,j2);
    }
  );
);
 
 
Model(
  NavierStokesPlasma(
    TEMODEL=TEMODEL_LOCAL;
    N2VIBMODEL=N2VIBMODEL_MACHERET;
    N2VIBJOULEHEATING=YES;
    REACTING=YES;
    emfieldworkheatfact=1;
    sigmadiv=1e-4; {S/m}
    etdiv=1e2;     {J/kg}
    Pmin=1.0e2;    Pmax=9.9e99;   {Pa}
    Tmin=1.0e2;     Tmax=Tmax_barrier;    {K}
    Tvmin=Tmin;     Tvmax=30000;  {K}
    Temin=Tmin;     Temax=60.0e3;  {K}
    Twmin=Tmin;     Twmax=Tmax;    {K}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain for neutrals}
    wimin=1e-40;    wimax=0.5;    {min and max ion mass fraction}
    wemin=1e-20;    wemax=1e-4;    {min and max electron mass fraction}
    Nminbdry=1e8;   {the minimum number density in 1/m3 for the charged species at the bdry nodes}
    gamma=0.05e0;    {secondary emission coefficient}
    AXISYMMETRIC=NO;
  );
  Epotential(
    Te_buffer=3000.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,T+Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Jmax=200000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,je, 1.0 );
    SetSolidConductivity(is,js, ie,je, 0.0 {S/m});
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
  );
);


Init(
  NavierStokesPlasma(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     Tv, Te
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], Tv, Te
    _______________________________________________________________________________________

    }
    Vx=Mx*sqrt(1.4*286*T);
    Vy=My*sqrt(1.4*286*T);
    Tv=T; {K}
    Te=T; {K}
    chi_eminus=1e-10;
    chi_O2minus=1.0e-30;
    chi_Oplus=1e-30;
    chi_Nplus=1.0e-30;
    chi_O2plus=1.0e-30;
    chi_N2plus=1.0e-30;
    chi_NOplus=1.0e-10;
    chi_O=1.0e-30;
    chi_N=1.0e-30;
    chi_NO=1.0e-30;
    chi_O2=0.25;
    chi_N2=0.75;
    All(INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_Oplus,chi_Nplus,chi_O2plus,chi_N2plus,chi_NOplus,chi_O,chi_N,chi_NO,chi_O2,chi_N2,Tv,Te);
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE6,Vx,Vy,P,Twall,chi_eminus,chi_O2minus,chi_Oplus,chi_Nplus,chi_O2plus,chi_N2plus,chi_NOplus,chi_O,chi_N,chi_NO,chi_O2,chi_N2,Tv,Te);

    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_Oplus,chi_Nplus,chi_O2plus,chi_N2plus,chi_NOplus,chi_O,chi_N,chi_NO,chi_O2,chi_N2,Tv,Te);
    Region(is,js,  ie,je, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_Oplus,chi_Nplus,chi_O2plus,chi_N2plus,chi_NOplus,chi_O,chi_N,chi_NO,chi_O2,chi_N2,Tv,Te);
    }
  );
  Epotential(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
    phi=0.0; {V}
    All(INITEMF_TYPE1,phi);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,  ie,je,INITEMF_TYPE1,phi);
    }
  );
);


Disc(
  NavierStokesPlasma(
    zetaA1=0.3e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.3e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
    zetaD=1.0;        {conditions the Dstar eigenvalues for the charged species}
    betag[1]=-0.0010;
    betag[2]=-0.5000;
    betag[3]=1.0000;
    betag[4]=1.0000;
    betag[5]=1.0000;
    betag[6]=1.0000;
    betag[7]=1.0000;
    betaa[1]=0.9990;
    betaa[2]=0.5000;
    betaa[3]=0.0000;
    betaa[4]=0.0000;
    betaa[5]=0.0000;
    betaa[6]=0.0000;
    betaa[7]=0.0000;
  );
  Epotential(
    Ediv=1000.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
    POTENTIAL=POTENTIAL_OHMBASED;
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.95;
    INTERPOL=INTERPOL_WENO5;
     
    EIGENVALCOND=EIGENVALCOND_PARENT;
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=4;
  );
  
);


Cycle(
  NavierStokesPlasma(
    xiverge=1e-3;         {residual convergence threshold}
    zetaGammai=1.0;       {factor multiplying the pseudotime step of the ion species transport equations} 
    zetaGammae=1.0;       {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode}
    relaxNi_bdry=1.0;     {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.5;     {the electron density relaxation factor at the boundary }
    relaxTe=0.3;          {the electron temperature relaxation factor }
    rhoref=0.1;           {reference density in kg/m3}
    Tref=300.0;           {reference temperature in K}
    Teref=20000.0;        {reference electron temperature in K}
    Tvref=5000.0;         {reference vibrational temperature in K}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-7;            {average ion mass fraction}
    Uref[1]=wion*1.8e-5*rhoref;   
    Uref[2]=wion*rhoref;   
    Uref[3]=wion*rhoref;   
    Uref[4]=wion*rhoref;   
    Uref[5]=wion*rhoref;   
    Uref[6]=wion*rhoref;   
    Uref[7]=wion*rhoref;   
    Uref[8]=rhoref;   
    Uref[9]=rhoref;   
    Uref[10]=rhoref;   
    Uref[11]=rhoref;   
    Uref[12]=rhoref;   
    Uref[13]=rhoref*aref;   
    Uref[14]=rhoref*aref;   
    Uref[15]=rhoref*aref*aref;  
    Uref[16]=rhoref*700.0*Tvref;  
    Uref[17]=rhoref*wion*414*Teref;  
  );
  Epotential(
    xiverge_emfield=1e-2; {residual convergence threshold for the potential equation}
    sigmaref=3e-6; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );
  
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.01;
    );
    if (iter<5000*meshfact,
      CFLmax=0.8;
      sigma1=0.0;
      Model(
        NavierStokesPlasma(Tmax=8000; Temax=8000; emfieldworkheatfact=0.0;);
        Epotential(Jmax=200;);
      );
    );
    if (iter>=5000*meshfact && iter<9000*meshfact,
      CFLmax=0.5;
      sigma1=0.0;
      Model(
        NavierStokesPlasma(Tmax=(iter-5000*meshfact)/meshfact+8000; Temax=60000; emfieldworkheatfact=1.0;);
        Epotential(Jmax=200000;);
      );
    );
    if (iter>=9000*meshfact,
      CFLmax=1.0;
      sigma1=0.2;
      Model(
        NavierStokesPlasma(Tmax=(iter-5000*meshfact)/meshfact+8000; Temax=60000; emfieldworkheatfact=1.0;);
        Epotential(Jmax=200000;);
      );
    );
    
    if (iter>1000*meshfact,
      Model(NavierStokesPlasma(TEMODEL=TEMODEL_TRANSPORT;););
    );
    if (iter==round(5000*meshfact),CFL=0.03;);
    CFL=min(CFL*1.025,CFLmax);
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP2,sigma1,sigma2);
    Lc=1;      {characteristic length scale in meters used to solve the emfield equation}
    relaxEMF=0.7; {relaxation factor forced on the update of the emfield variables}
    if (iter>10*meshfact,
      UpdateEMField(Lc,relaxEMF,TSEMF_SOR,500);
      UpdateEMField(Lc,relaxEMF,TSEMF_SOR,500);
      UpdateEMField(Lc,relaxEMF,TSEMF_SOR,500); 
    );
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
  );
);


Post(
  for (dim,1,2,
    Area[dim]=_Area(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(is,js, ie,je, dim);
  );
  printf("Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  printf("metotal   = %+E J/m\n",_metotal(is,js, ie,je));
  printf("m         = %+E J/m\n",_m(is,js, ie,je));
  printf("Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  printf("Qbeam     = %+E W/m\n",_Qbeam(is,js, ie,je));
  printf("EdotJ     = %+E W/m\n",_EdotJ(is,js, ie,je));
  printf("Wemfield  = %+E W/m\n",_Wemfield(is,js, ie,je)); {Wemfield=Femfield dot Vn}
  printf("\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js, ie,je, "post.01", "tecplot", POSTGRIDONLY);
  }
);

{
  _______________________________________________________________________________________________

  WARP: a CFD Code for Plasma Aerodynamics [a]
  _______________________________________________________________________________________________

  Cycle Strategy                          Multizone Marching [1]
  Fluid Transport Integration             Block DDADI [3,2]
  EM Field Integration                    none
  Convection Derivative Discretization    FDS 2nd-Order Parent [4]
  Time Derivative Discretization          Steady-State
  Fluid Transport Model                   Favre-Reynolds Multispecies
  Chemical Model                          H2-Air 9 species 20 reactions Jachimowsky [5]
  Beam Model                              None
  EM Field Model                          None
  Thermodynamic Model                     NASA Glenn Polynomials [6]
  Number of Dimensions                    2
  Number of Flux Components               14
  Number of Species                       9
  Number of Charged Species               0
  List of Species                         H2, O2, H, O, OH, H2O, HO2, H2O2, N2
  _______________________________________________________________________________________________

  [a]  Parent, B. "Weakly-ionized Airflow Resolver and Post-processor: a CFD Code for Plasma
       Aerodynamics", WARP version 16oct10a compiled on Oct 10 2016 at 20:59:14 using gcc 4.8.4
       with OPENMP threads with assertions. WARP is a Copyright (c) 1998-2016 of Bernard Parent.
       Copying and distribution of WARP is prohibited.
  [1]  Parent, B. and Sislian, J.P. "The Use of Domain Decomposition in Accelerating the
       Convergence of Quasihyperbolic Systems", Journal of Computational Physics 179:140-169,
       2002.
  [2]  MacCormack, R.W., "A New Implicit Algorithm for Fluid Flow," 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [3]  Bardina, J. and Lombard, C.K. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [4]  Parent, B. "Multidimensional High Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, submitted for publication, 2016.
  [5]  Jachimowsky, C.J., "An Analytical Study of the Hydrogen-Air Reaction Mechanism With
       Application To Scramjet Combustion," NASA TP-2791, 1988.
  [6]  McBride, B.J., Zehe, M.J., and Gordon, S. "NASA Glenn Coefficients for Calculating
       Thermodynamic Properties of Individual Species", NASA TP 2002-211556, 2002.

}

{bug when reading interpolation file created with mf=2 and when mf is set to 0.9 --> check this}
mf=1.0;

is=1;  js=1; 
ie=round(180*mf); je=round(60*mf);

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, 1.0e0,0.0e0);
  Point(ie,je, 1.0e0,1.0e0);
  Point(is,je, 0.0e0,1.0e0);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
  Rotate(is,js, ie,je, 0.0,0.0, rad(15));
);


Bdry(
  FavreReynolds(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            Number    Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0         Inflow, supersonic
    BDRY_INFLOWSUBSONIC1               7         Inflow, subsonic, Tstag, Pstag fixed
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  16        Inflow, subsonic, Pstag, Massflow/Area fixed
    BDRY_OUTFLOWSUPERSONIC1            1         Outflow, supersonic
    BDRY_OUTFLOWSUBSONIC1              4         Outflow, subsonic, P fixed
    BDRY_OUTFLOWSUBSONICMFIXED1        15        Outflow, subsonic, M fixed
    BDRY_SYMMETRICAL2                  14        Symmetrical, 2nd order
    BDRY_SYMMETRICAL1                  9         Symmetrical, 1st order
    BDRY_WALLTFIXED1                    3         Wall, T specified
    BDRY_WALLADIABATIC1                 6         Wall, Adiabatic
    BDRY_SLIPWALL1                     12        Slip wall, 1st order, Adiabatic
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_SLIPWALL1,BDRY_INFLOWSUPERSONIC);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
);
 
 
Model(
 
  FavreReynolds(
    TURBMODEL=TURBMODEL_KOMEGA2008;      {set TURBMODEL to 
                     - TURBMODEL_KOMEGA1988 for Wilcox k-omega model (1988)
                     - TURBMODEL_KOMEGA2008 for new Wilcox k-omega model (2008)
                     - TURBMODEL_KEPSILON for Launder-Sharma k-epsilon model}
    DILATDISSIP=DILATDISSIP_NONE; {the dilatational dissipation can be set to DILATDISSIP_WILCOX or DILATDISSIP_SARKAR or NO}
    RAPCOMP=NO;     {the rapid compression correction by Coakley et altrui? (either YES or NO)}
    TURBSOURCE=YES; {solve the turbulence source terms? if set to NO and if the turbulence 
                     kinetic energy k is set to zero in the freestream, then will solve the 
                     flow as laminar}
    
    REACTING=YES;   {reacting flow? say either YES or NO -> only effective when a chemical solver is used}
    Prt=0.9e0;      {the turbulent Prandtl number;
                      - recommended value of 0.9 in boundary layers
                      - recommended value of 0.5 in shear layers}
    Sct=1.0e0;      {the turbulent Schmidt number;
                      - set it to a value between 0.2 and 2}
    kdiv=1.0e0;     {minimum magnitude of k in m2/s2 allowed when k appears on the denominator;
                     make sure that kdiv is
                   - at most one tenth the maximum value of k in the boundary layer
                     profile exhibiting the lowest maximum k for supersonic flow
                   - at most one hundredth the maximum value of k in the boundary layer}
    ADD_ETA_TO_ETAT_WITHIN_QK=NO;  {say NO for standard kinetic energy transport model}
    psidiv=0.1e-3;   {minimum magnitude of psi allowed when psi appears on the denominator}
    Pmin=1000.0;    Pmax=9.9e99;   {min and max pressure allowed in the domain in Pa}
    Tmin=200.0;     Tmax=6.0e3;    {min and max temperature allowed in the domain in K}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature allowed on any wall boundary node in K}
    kmin=1.0e-30;   kmax=9.9e99;   {min and max TKE allowed in the domain in m2/s2}
    psimin=1e-10;   psimax=9.9e99; {min and max omega/epsilon allowed in the domain}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain}
    
    AXISYMMETRIC=NO; {set to YES to solve axisymmetric problems in 2D}
  );
  H2Air9s(
    CHEMMODEL=CHEMMODEL_JACHIMOWSKI1988;
  );
  H2Air13s(
    CHEMMODEL=CHEMMODEL_JACHIMOWSKI1988;
  );
  H2AirPlasma13s(
    COMBUSTIONMODEL=COMBUSTIONMODEL_JACHIMOWSKI1988;
  );
  H2CsAirPlasma22s(
    COMBUSTIONMODEL=COMBUSTIONMODEL_JACHIMOWSKI1988;
    IONIZATIONMODEL=IONIZATIONMODEL_LENARD1964;
  );
  H2CsAirPlasma15s(
    COMBUSTIONMODEL=COMBUSTIONMODEL_JACHIMOWSKI1988;
  );
);


Init(
  FavreReynolds(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     k, psi
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     k, psi
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     k, psi
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     k, psi
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     k, psi
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], k, psi
    _______________________________________________________________________________________

    (a) in the freestream inflow conditions, it is suggested to set psi to 10*(flow speed)
        for the 1988 k-omega model and 110*(flow speed) for the 2008 k-omega model
    (b) for hypersonic flows, the freestream value of psi can be further multiplied by
        up to 5 times if necessary
    }
    Mx=4;
    My=0;
    P=10000; {Pa}
    T=700; {K}
    k=1e-6; {J/kg}
    psi=110*sqrt(Mx^2+My^2)*sqrt(1.4*287*T); {1/s for TURBMODEL=TURBMODEL_KOMEGA*}
    w_H2=0.03;
    w_O2=0.235;
    w_default=1e-30;
    w_N2=0.735;
    Species("H2","O2","N2","default");
    All(2,Mx,My,P,T,w_H2,w_O2,w_N2,w_default,k,psi);
    {
    Bdry(BDRY_WALLTFIXED1, 2,Mx,My,P,T,w_H2,w_O2,w_H,w_O,w_OH,w_H2O,w_HO2,w_H2O2,w_N2,k,psi);
    Region(is,js,  ie,je, 2,Mx,My,P,T,w_H2,w_O2,w_H,w_O,w_OH,w_H2O,w_HO2,w_H2O2,w_N2,k,psi);
    }
  );
);


Disc(
  FavreReynolds(
    zetaA1=0.1e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.3e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.999;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_PECLET;
    POSFILTER=POSFILTER_NONE;
    POSFILTER_numiter=4;
  );
);

Cycle(
  FavreReynolds(
    xiverge=1e-2;  {residual convergence threshold}
    rhoref=1.0;  {reference density in kg/m3}
    aref=300.0;  {reference sound speed in m/s}
    kref=1e4;  {reference turbulence kinetic energy in m2/s2}
    psiref=1e8;  {reference specific dissipation rate of the TKE in 1/s if TURBMODEL=TURBMODEL_KOMEGA*
                  reference dissipation rate of the TKE in m2/s3 if TURBMODEL=TURBMODEL_KEPSILON}
    for (spec,1,numspec,
      Uref[spec]=rhoref;
    );
    for (dim,1,numdim,
      Uref[numspec+dim]=rhoref*aref;
    );
    Uref[numspec+numdim+1]=rhoref*aref*aref;
    Uref[numspec+numdim+2]=rhoref*kref;  
    Uref[numspec+numdim+3]=rhoref*psiref;  

  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.2;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    system("date");
    CFL=min(CFL*1.1,1.0);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );
  MultizoneMarching(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.3;      {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.2;      {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALEIGENVALUE;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.1,0.5);
    phi1=20;         {maximum number of gridlines per zone in each dimension}
    phi2=6;          {minimum number of iterations before advancing the marching-window downstream boundary}
    phi3=17;         {minimum width of the marching window}
    varphiverge=1e4; {parameter related to the streamwise ellipticity sensor}
    entrance=1;      {force the marching window upstream boundary to be at least as high as entrance}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1,phi2,phi3,varphiverge,entrance);

    printf("%6.2f %4ld %4ld %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld    %s \n",
           CFL,window.is,window.ie,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
  );
);


Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2/m}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min,m (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min,m}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/ms\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js, ie,je);
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
  );
  printf("    Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("    Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

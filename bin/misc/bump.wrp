{
  Number of Dimensions    : nd           : 2

}

Mx=0.1;
My=0.0;
P=10000;
T=300;

sizefact=1;
L=0.8*sizefact;
H=0.3*sizefact;
xs_bump=0.3*sizefact;
xe_bump=0.5*sizefact;
Lbump=xe_bump-xs_bump;
Hbump=H/8;


meshfact=1;


is=1;  js=1; 
ie=round(61*meshfact); je=round(61*meshfact);

dwall=H/(je-js)/2.0;

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0);
  Point(ie,js, L,0.0e0);
  Point(ie,je, L,H);
  Point(is,je, 0.0e0,H);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
  for (i,is,ie,
    x=_x(i,js);
    if (x>xs_bump && x<xe_bump,
      Equation(i,js,i,js,y,y=(1+sin(-pi/2+(x-xs_bump)/Lbump*2*pi))*0.5*Hbump);
    ); 
  );
  Join(is,js,ie,je,j,FE,0.75,dwall,1.0);

);


Bdry(
  NavierStokesPerfect(
    {
    _________________________________________________________________________________________

    Boundary Condition Type    Number   Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC      0        Inflow, supersonic
    BDRY_OUTFLOWSUPERSONIC1    1        Outflow, supersonic, 1o
    BDRY_SYMMETRICAL1          2        Symmetrical, 1o (can be used as a "slip wall")
    BDRY_SYMMETRICAL2          3        Symmetrical, 2o (can be used as a "slip wall")
    BDRY_WALLTFIXED1            4        Wall, T specified
    BDRY_WALLADIABATIC1         5        Wall, adiabatic
    BDRY_INFLOWSUBSONIC1       6        Subsonic Inflow 1o (Constant Tstag, Pstag at inflow)
    BDRY_OUTFLOWSUBSONIC1      7        Subsonic Outflow 1o (Constant P at outflow)
    _________________________________________________________________________________________
    }
    { first, create cuts in the computational domain; a cut is a region 
     which is not computed by the solver }
    {Cut(im1,jm-1,  im3,jm);}
    { second, apply a default boundary condition (BC) type to all boundary nodes }
    All(3{BC type});
    { impose BC type at faces i=is, i=ie, j=js, j=je}
    Faces(BDRY_INFLOWSUBSONIC1,BDRY_OUTFLOWSUBSONIC1,  BDRY_SYMMETRICAL3,BDRY_SYMMETRICAL2);
    { apply BC type only to the boundary nodes in a specific region of the computational domain}
    { Region(10{is},10{js},  17{ie},17{je},  3{BC type});}
  );
);
 
 
Model(
 
  NavierStokesPerfect(
    gamma=1.4;    {the specific heat ratio }
    R=286.0;      {the gas constant in J/kgK }
    eta=2e-5;     {the viscosity of the gas in kg/ms }
    kappa=0.0;        {the thermal conductivity of the gas in W/mK }
    Pmin=1.0e-2;    Pmax=9.9e99;   {min and max pressure allowed in the domain}
    Tmin=1.0e1;     Tmax=6.0e3;    {min and max temperature allowed in the domain}
    
    AXISYMMETRIC=FALSE;
  );
);
 
 
Init(
    NavierStokesPerfect(
      {
      ************************************************************
      *Initial Conditions Types:                                  
      ************************************************************
      *1, v[0]..v[nd-1],  P,  T     
      *2, M[0]..M[nd-1],  P,  T     
      ************************************************************
      }
      { Init all nodes in the domain}
      All(2,Mx,My,P,T);
      {
        { Init bdry nodes numbered 3}
        Bdry(3, 1,0.0,0.0,0.0,0.0);
        { Init nodes in region}
        Region(3,3,  6,6,
         1,0.0,0.0,0.0,0.0);
      }
    );
);


Disc(
  NavierStokesPerfect(
    zetaA1=0.0e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.3e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
  );
  MUSCL(
    EIGENVALCOND=EIGENVALCOND_PECLET; 
    AVERAGING=AVERAGING_ROE;
    FLUX=FLUX_FDS;
    AOWENO_TYPE=AOWENO_TYPE_COMPRESSIVE;
    AOWENO_gammalo=0.999;
    AOWENO_gammahi=0.999;
    INTERPOL=INTERPOL_AOWENO7;
  );
);





Cycle(
  NavierStokesPerfect(
    xiverge=1e-2/sizefact;          {residual convergence threshold}
    rhoref=1.0;            {reference density in kg/m3}
    aref=300.0;            {reference sound speed in m/s}
    Uref[1]=rhoref;            
    Uref[2]=rhoref*aref;       
    Uref[3]=rhoref*aref;   
    Uref[4]=rhoref*aref*aref;  
  );
  MultizoneSteady(
    if (mod(iter,50)==0,
      WriteDataFile();
    );
    sigma1=0.4;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.1,3.0);
    phi1=200;     {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile();
    );
    sigma1=0.4;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.11,3.0);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    { dtau=1e-7; {time step imposed on all nodes in seconds}
      UpdateFluidConstantTimeStep(dtau); }
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );

);



Post(
  printf("\n");
  printf("    Fshear    = (%+E,%+E) N/m\n",_Fshear(is,js,ie,je,1,BDRY_SYMMETRICAL2  ),_Fshear(is,js,ie,je,2,BDRY_SYMMETRICAL2  ));
  printf("    Fpressure = (%+E,%+E) N/m\n",_Fpressure(is,js,ie,je,1,BDRY_SYMMETRICAL2  ),_Fpressure(is,js,ie,je,2,BDRY_SYMMETRICAL2  ));
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

{
  _______________________________________________________________________________________________

  WARP: a CFD Code for Plasma & Reactive Flows [a]
  _______________________________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block DDADI [2,1]
  EM Field Integration                    DDADI [2,1]
  Convection Derivative Discretization    FDS [3] WENO Adaptive Order 3,5 [4]
  Time Derivative Discretization          Steady-State
  Fluid Transport Model                   Favre-Reynolds with drift-diffusion plasma model [5]
  Chemical Model                          Air Plasma 8 species 28 reactions Macheret [5]
  Beam Model                              Fixed Electron Beam Energy Deposition
  EM Field Model                          Potential based on the Generalized Ohm's law [6,7]
  Thermodynamic Model                     NASA Glenn Polynomials [8]
  Number of Dimensions                    2
  Number of Flux Components               15
  Number of Species                       8
  Number of Charged Species               4
  List of Species                         e-, O2-, O2+, N2+, O, N, O2, N2
  _______________________________________________________________________________________________

  [a]  B Parent. "WARP: a CFD Code for Plasma & Reactive Flows", WARP version 17apr30c compiled
       on May  1 2017 at 22:43:30 by parent on CLEO using gcc 4.9.2 with OPENMP threads. WARP is
       a Copyright (c) 1998-2017 of Bernard Parent. Copying and distribution of WARP is
       prohibited.
  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [4]  DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [5]  B Parent, MN Shneider, and SO Macheret. "Detailed Modeling of Plasmas for Computational
       Aerodynamics", AIAA Journal, 54:898-911, 2016.
  [6]  B Parent, MN Shneider, and SO Macheret. "Generalized Ohm's Law and Potential Equation in
       Computational Weakly-Ionized Plasmadynamics", Journal of Computational Physics
       230:1439-1453, 2011.
  [7]  B Parent, SO Macheret, and MN Shneider. "Modeling Weakly-Ionized Plasmas in Magnetic
       Field: A New Computationally-Efficient Approach", Journal of Computational Physics
       300:779-799, 2015.
  [8]  BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.

}




Bz=0.8; 
dphi=0.0;
L=0.2;
H=0.02;
Qbeam=1e5;
LbeamoverL=0.2;
N_eminus=1e7;
N_O2minus=N_eminus*0.01;
N_N2plus=(N_O2minus+N_eminus)*0.75;
N_O2plus=(N_O2minus+N_eminus)*0.25;
N_O2=0.25*2.414e24;
N_N2=0.75*2.414e24;
N_O=N_O2/1e5;
N_N=N_N2/1e5;
Nn=N_O2+N_N2;
Vmag=600.0;
theta=rad(0);
Vx=Vmag*cos(theta);
Vy=Vmag*sin(theta);
P=10000;
T=300;
Te=5000.0;

meshfact=1.0;

dwall=1e-5/meshfact;

is=1;    
ie=round(meshfact*60); 
 
js=1;
je=round(meshfact*60);

is1=round((is+ie)/2)-round((is+ie)*LbeamoverL/2);
is2=round((is+ie)/2)+round((is+ie)*LbeamoverL/2);


Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, L,0.0e0);
  Point(ie,je, L,H);
  Point(is,je, 0.0e0,H);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  FF,0.5e0,dwall,dwall); 
  Rotate(is,js,ie,je, 0.0,0.0,theta);
);


Bdry(
  FavreReynoldsPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            Number     Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0          Inflow, supersonic
    BDRY_INFLOWSUBSONIC1               7          Inflow, subsonic, Tstag, Pstag fixed
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  16         Inflow, subsonic, Pstag, Massflow/Area fixed
    BDRY_OUTFLOWSUPERSONIC1            1          Outflow, supersonic
    BDRY_OUTFLOWSUBSONIC1              4          Outflow, subsonic, P fixed
    BDRY_OUTFLOWSUBSONICMFIXED1        15         Outflow, subsonic, M fixed
    BDRY_SYMMETRICAL2                  14         Symmetrical, 2nd order
    BDRY_SYMMETRICAL1                  9          Symmetrical, 1st order
    BDRY_WALLTFIXED1                    3          Wall, T specified
    BDRY_WALLADIABATIC1                 6          Wall, Adiabatic
    BDRY_SLIPWALL1                     12         Slip wall, 1st order, Adiabatic
    _________________________________________________________________________________________
    }
    Twall=T;
    All(BDRY_WALLTFIXED1,Twall{BC type});
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_WALLTFIXED1,BDRY_WALLTFIXED1);
  );

  EpotentialBfixed(
    {
    _________________________________________________________________________________________

    EMF Bdry Condition Type       Number     Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0          Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2          Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1          Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
    All(BDRYEMF_DIELECTRIC);
    Region(is1,js,is2,js,BDRYEMF_ELECTRODE);
    Region(is1,je,is2,je,BDRYEMF_ELECTRODE);
{    Faces(BDRYEMF_DIELECTRIC,BDRYEMF_DIELECTRIC,BDRYEMF_ELECTRODE,BDRYEMF_ELECTRODE);}
  );
);
 
 
Model(
 
  FavreReynoldsPlasma(
    TURBMODEL=TURBMODEL_KOMEGA1988;      {set TURBMODEL to 
                     - TURBMODEL_KOMEGA1988 for Wilcox k-omega model (1988)
                     - TURBMODEL_KOMEGA2008 for new Wilcox k-omega model (2008)
                     - TURBMODEL_KEPSILON for Launder-Sharma k-epsilon model}
    DILATDISSIP=DILATDISSIP_NONE; {the dilatational dissipation can be set to DILATDISSIP_WILCOX or DILATDISSIP_SARKAR or NO}
    RAPCOMP=NO;     {the rapid compression correction by Coakley et altrui? (either YES or NO)}
    MHDTURB=NO;    {MHD source terms to the k and epsilon transport equations by Kenjeres and Hanjalic}
    TURBSOURCE=YES; {solve the turbulence source terms? if set to NO and if the turbulence 
                     kinetic energy k is set to zero in the freestream, then will solve the 
                     flow as laminar}
    N2VIBMODEL=N2VIBMODEL_MACHERET;      {solve the nitrogen vibration energy source terms? YES or NO 
                     If NO, the nitrogen vibrational energy source terms are set to zero}
    TEMODEL=TEMODEL_LOCAL;
    N2VIBJOULEHEATING=YES; {solve the nitrogen vibration energy joule heating source terms? YES or NO } 
    REACTING=YES;
    emfieldworkheatfact=1.0;
    Prt=0.9e0;      {the turbulent Prandtl number;
                      - recommended value of 0.9 in boundary layers
                      - recommended value of 0.5 in shear layers}
    Sct=1.0e0;      {the turbulent Schmidt number;
                      - set it to a value between 0.2 and 2}
    kdiv=0.001;     {set kdiv to as low a value as possible and
                   - at most one tenth the maximum value of k in the boundary layer
                     profile exhibiting the lowest maximum k for supersonic flow
                   - at most one hundredth the maximum value of k in the boundary layer}
    ADD_ETA_TO_ETAT_WITHIN_QK=NO;  {say NO for standard kinetic energy transport model}
    psidiv=0.1e-3;   {set psidiv to as low a positive value as possible}
    sigmadiv=1e-10;  {set sigmadiv to as low a positive value as possible}
    etdiv=1e-1;
    Pmin=5000;    Pmax=9.9e99;   {min and max pressure allowed in the domain}
    Tmin=200;     Tmax=14e3;    {min and max temperature allowed in the domain}
    Tvmin=Tmin;     Tvmax=Tmax;    {min and max vibrational temperature allowed in the domain}
    Temin=Tmin;     Temax=58000;    {min and max wall temperature allowed on any wall boundary node}
    Twmin=Tmin;     Twmax=Temax;    {min and max wall temperature allowed on any wall boundary node}
    kmin=1.0e-7;   kmax=9.9e99;   {min and max TKE allowed in the domain}
    psimin=1e-10;   psimax=9.9e99; {min and max omega/epsilon allowed in the domain}
    wmin=1.0e-30;                  {min mass fraction allowed in the domain for the neutrals}
    chiimin=1e-15;    chiimax=1.0e0;                {min and max ion mass fraction }
    chiemin=1e-12;    chiemax=1.0e0;                {min and max electron mass fraction }
    Nminbdry=1e12;  {the number density for the charged species at the bdry nodes}
    gamma=1e0;   {secondary emission coefficient used to calculate the electron density at the cathode or dielectric}
    AXISYMMETRIC=NO; {not tested yet!!}
  );
 
  EpotentialBfixed(
    Te_buffer=300.0; {when determining mue: Te=max(Te,T+Te_buffer);  
                      needed to prevent convergence hangs where |E| becomes close to 0;
                      set to as little a value as possible}
    Ediv=10.0; {a small positive number in V/m, needed to prevent a division by zero when
                 discretizing the electron pressure gradients within the potential equation}
    Jmax=40000.0; {the maximum current density in A/m2 expected in the domain; this will affect only
                  the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetSolidConductivity(is,js, ie,je, 1e-7);
    SetElectroMotiveForce(is,js, ie,je, 0.0 {V/m}, 0.0 {V/m}, 1e99{W/m3});
    SetMagneticField(is, js, ie, je, 
                       {B_x}0.0, {B_y}0.0, {B_z}Bz);
    {make sure that (A_x,A_y,A_z) or (B_x,B_y,B_z) do not lie on top of a node }
    {AddMagnetDipole({A_x}0, {A_y}0, {A_z}0, {B_x}0, {B_y}0.01, {B_z}0, {Bd}1);} {add a dipole with the origin at A, and strenght Bd at B}
    {AddMagnetDipoleRow({A_x}0, {A_y}0, {A_z}0, {B_x}0, {B_y}0.01, {B_z}0, {Bd}1, {numsteps}200);} {add a dipole row starting from A and ending at B, with Bd the flux}

  );
 
  EbeamFixed(
    SetQbeam(is, js, ie, je,   {Qbeam, W/m3}Qbeam/1000);
    SetQbeam(is1-6, js, is2+6, je,   {Qbeam, W/m3}Qbeam/100);
    SetQbeam(is1-5, js, is2+5, je,   {Qbeam, W/m3}Qbeam/10);
    
    SetQbeam(is1-4, js, is2+4, je,   {Qbeam, W/m3}Qbeam);
  );
);
 
 
Init(
    FavreReynoldsPlasma(
      {
      _______________________________________________________________________________________

      Initial Condition Type       Parameters
      _______________________________________________________________________________________

      INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     k, psi, Tv, Te
      INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     k, psi, Tv, Te
      INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     k, psi, Tv, Te
      INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     k, psi, Tv, Te
      INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     k, psi, Tv, Te
      INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], k, psi, Tv, Te
      _______________________________________________________________________________________

      (a) in the freestream inflow conditions, it is suggested to set psi to 10*(flow speed)
          for the 1988 k-omega model and 110*(flow speed) for the 2008 k-omega model
      (b) for hypersonic flows, the freestream value of psi can be further multiplied by
          up to 5 times if necessary
      }
      All(INIT_TYPE6,Vx,Vy,P,T,N_eminus/Nn,N_O2minus/Nn,N_O2plus/Nn,N_N2plus/Nn,N_O/Nn,N_N/Nn,N_O2/Nn,N_N2/Nn,0.1,10*Vx,T,Te);
    );
    EpotentialBfixed(
      {
      _________________________________________________________________________________________

      EMF Initial Condition Type             Parameters
      _________________________________________________________________________________________

      INITEMF_TYPE1                          phi
      _________________________________________________________________________________________

      }
      All(INITEMF_TYPE1,dphi);
      Region(is1,js,is2,js,INITEMF_TYPE1,0.0);
      Region(is1,je,is2,je,INITEMF_TYPE1,dphi);
    );
);


Disc(
  FavreReynoldsPlasma(
    zetaA1=0.0e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.3e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
    zetaD=1.0;        {conditions the Dstar eigenvalues for the charged species}
    betag[1]=-0.0010;
    betag[2]=-0.5000;
    betag[3]=1.0000;
    betag[4]=1.0000;
    betaa[1]=0.9990;
    betaa[2]=0.5000;
    betaa[3]=0.0000;
    betaa[4]=0.0000;
  );
  EpotentialBfixed(
    POTENTIAL=POTENTIAL_OHMBASED;
    Ediv=10.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ARITH;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.85;
    AOWENO_gammahi=0.85;
    INTERPOL=INTERPOL_AOWENO5;
    EIGENVALCOND=EIGENVALCOND_PECLET;
    POSFILTER=POSFILTER_NONE;
    POSFILTER_numiter=4;
     
  );
);





Cycle(
  FavreReynoldsPlasma(
    xiverge=2e2;  {residual convergence threshold}
    zetaGammae=0.001; {0.001;}
    zetaGammai=0.1; {0.1;}
    relaxNi_bdry=0.6;    {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.2;    {the electron density relaxation factor at the boundary }
    relaxTe=0.1;
    rhoref=0.1;  {reference density in kg/m3}
    Tref=300.0;  {reference electron temperature in K}
    Tvref=5000.0;  {reference vibrational temperature in K}
    kref=1e4;  {reference turbulence kinetic energy in m2/s2}
    psiref=1e8;  {reference specific dissipation rate of the TKE in 1/s if TURBMODEL=TURBMODEL_KOMEGA*
                  reference dissipation rate of the TKE in m2/s3 if TURBMODEL=TURBMODEL_KEPSILON}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-4; {average ion mass fraction}
    
    Teref=5000.0;
    Uref[1]=wion*1.8e-5*rhoref*1e99;   
    Uref[2]=wion*rhoref*1e99;   
    Uref[3]=wion*rhoref*1e99;   
    Uref[4]=wion*rhoref*1e99;   
    Uref[5]=rhoref;   
    Uref[6]=rhoref;   
    Uref[7]=rhoref;   
    Uref[8]=rhoref;   
    Uref[9]=rhoref*aref*1e99;   
    Uref[10]=rhoref*aref*1e99;   
    Uref[11]=rhoref*aref*aref;  
    Uref[12]=rhoref*kref*1e99;  
    Uref[13]=rhoref*psiref*1e99;  
    Uref[14]=rhoref*700.0*Tvref*1e99;  
    Uref[15]=rhoref*wion*414*Teref*1e99;  
  );
  EpotentialBfixed(
    xiverge_emfield=1e-2; {residual convergence threshold for the potential equation}
    relaxEk=0.5; {relaxation factor for E in species frame}
    relaxphi_bdry=1.0; {relaxation factor for phi at the dielectric boundaries}
    sigmaref=0.001; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=dphi; {reference value for the electric field potential in Volts -> used to determine xi}
  );

  DualTimeStepping(
    tmax=1e-5;   {simulation time span in seconds}
    dt=tmax/30;  {physical time step in seconds}
    sigma1=0.3;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.3;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALEIGENVALUE;
    if (iter==1,
      if (time==0, CFL=0.1; , CFL=2.0;);
    );
    CFL=min(CFL*1.02,0.8);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,dt);
    Lc=2e-3;  {characteristic length scale used to solve the emfield equation}
    relaxEMF=0.5;  {relaxation factor forced on the update of the emfield variables}
    for (cnt,0,0,
      UpdateEMField(Lc*10,relaxEMF,dt);
      UpdateEMField(Lc*1,relaxEMF,dt);
      UpdateEMField(Lc*1,relaxEMF,dt);
    );
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %6.0f %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,Lc,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
    if (iter>20 || (ximax<xiverge && ximax_emfield<xiverge_emfield),
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );
   SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile();
    );
    sigma1=0.0;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.01;
    );
    CFL=min(CFL*1.03,0.5);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    Lc=1e3;  {characteristic length scale used to solve the emfield equation}
    relaxEMF=0.6;  {relaxation factor forced on the update of the emfield variables}
    subiter_tsemf=200;
    for (cnt,0,1,
      {UpdateEMField(Lc,relaxEMF,TSEMF_ADI);}
      UpdateEMField(Lc,relaxEMF,TSEMF_SOR,subiter_tsemf);
      {UpdateEMField(Lc,relaxEMF,TSEMF_DDADI);}
    );
    system("date");

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E %2.6f %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,effiter_U_emfield,Lc,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
   );
   MultizoneSteady(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALEIGENVALUE;
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.1,2.0);
    phi1=20;     {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1);

    Lc=1e-3;  {characteristic length scale used to solve the emfield equation}
    relaxEMF=0.8;  {relaxation factor forced on the update of the emfield variables}
    subiter_tsemf=4;  {number of subiterations performed when inverting the matrix within tsemf}
    for (cnt,0,3,
      UpdateEMField(Lc,relaxEMF,IMAF,subiter_tsemf);
    );
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld  %6.0f %E (%4ld,%4ld)%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,Lc,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
   );


);




Post(
  fprintf(postfilename,"\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,js, dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(is,js, ie,je, dim);
  );
  fprintf(postfilename,"    Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  fprintf(postfilename,"    Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  fprintf(postfilename,"    Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  fprintf(postfilename,"    Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  fprintf(postfilename,"    Qbeam     = %+E W/m\n",_Qbeam(is,js, ie,je));
  fprintf(postfilename,"    EdotJ     = %+E W/m\n",_EdotJ(is,js, ie,je));
  fprintf(postfilename,"    Wemfield  = %+E W/m\n",_Wemfield(is,js, ie,je)); {Wemfield=Femfield dot Vn}
  fprintf(postfilename,"\n");
  {
  WritePostFile(is,js, ie,je, "post.01", "tecplot",POSTFILE_ALL);
  WritePostFile(is,js, ie,je, "grid.01", "tecplot",POSTFILE_GRID);
  }
);


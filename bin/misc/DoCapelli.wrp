{
  _______________________________________________________________________________________________

                                           C F D W A R P

                      Computational Fluid Dynamics, Waves, Reactions, Plasmas
  _______________________________________________________________________________________________

  Version                          22jun25a
  Compiler                         gcc 8.3.0 with OPENMP threads
  Compiled on                      Jun 28 2022 at 15:32:33
  Cycle Strategy                   Standard
  Fluid Relaxation                 Block DDADI [2,1]
  EM Field Relaxation              Implicit schemes based on approximate factorization including
                                   ADI [4], DDADI [2,1], and IMAF [3]
  Convection Discretization        Reconstruction-Evolution MUSCL with flux FVS [5], FDS [7],
                                   and primitive interpolation TVD [6], WENO [9], CWENO [11],
                                   AOWENO [10], and eigenvalue conditioning HARTEN, GNOFFO
                                   [12], PECLET [13], PASCAL [8], and PARENT positivity-
                                   preserving filter [14]
  Temporal Discretization          Positivity-Preserving Cross-Difference Formula [8]
  Fluid Model                      Navier-Stokes with drift-diffusion plasma model [15]
  Thermodynamic Model              NASA Glenn Polynomials [16].
  Transport Model                  Dixon-Lewis [17]
  Chemical Model                   Ethylene Air Plasma 30 species  [zettervall2017a]
  EM Field Model                   Electric field potential [18]
  Beam Model                       None
  Number of Dimensions             2
  Number of Flux Components        24
  Number of Species                19
  Number of Charged Species        4
  List of Species                  e-, O2+, N2+, C2H4+, O2, N2, C2H4, N2(A3Sigma), N2(B3Pi),
                                   N2(ap1Sigma), N2(C3Pi), O(1D), O(1S), N, O, C2H3, H, NO, OH
  _______________________________________________________________________________________________

  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  RW MacCormack. "Iterative Modified Approximate Factorization", Computers and Fluids
       30:917-925, 2001.
  [4]  DW Peaceman and HH Rachford. "The Numerical Solution of Parabolic and Elliptic
       Differential Equations", J. Soc. Ind. Appl. Math. 3:28-41, 1955.
  [5]  JL Steger and RF Warming. "Flux Vector Splitting of the Inviscid Gasdynamic Equations
       with Application to Finite-Difference Methods", Journal of Computational Physics 40:263-
       293, 1981.
  [6]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [7]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [8]  B Parent. "Positivity-Preserving Dual Time Stepping Schemes for Gas Dynamics", Journal of
       Computational Physics 361:391-411, 2018.
  [9]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [10] DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [11] M Dumbser and M Kaser. "Arbitrary High Order Non-oscillatory Finite Volume Schemes on
       Unstructured Meshes for Linear Hyperbolic Systems", Journal of Computational Physics,
       221:693-723, 2007.
  [12] P Gnoffo and  JA White. "Computational Aerothermodynamic Simulation Issues on
       Unstructured Grids", 37th AIAA Thermophysics Conference, AIAA Paper 2004-2371, 2004.
  [13] B Parent. "Multidimensional High-Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, 55:141-152, 2017.
  [14] B Parent. "Making a Flux Positivity-Preserving: A General Purpose Filter for the Euler
       Equations", AIAA Paper 2019-0906, AIAA Scitech, San Diego CA, 2019.
  [15] B Parent, MN Shneider, and SO Macheret. "Detailed Modeling of Plasmas for Computational
       Aerodynamics", AIAA Journal, 54:898-911, 2016.
  [16] BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.
  [17] Dixon-Lewis, G., "Computer Modelling of Combustor Reactions", Springer Verlag, 1984.
  [18] B Parent, SO Macheret, and MN Shneider. "Electron and Ion Transport Equations in
       Computational Weakly-Ionized Plasmadynamics", Journal of Computational Physics 259:51-
       69, 2014.


}


{
Setup taken from:

Hyungrok Do, Seong-kyun Im, Mark A. Cappelli, M. Godfrey Mungal, Plasma assisted flame ignition of supersonic flows over a flat wall, Combustion and Flame Vol. 157, 2010, Pages 2298â€“2305
}
 
mf=1;
is=1;
is1=round(50*mf); {start of 1st electrode}
is2=is1+round(25*mf); {end of 1st electrode}
is3=is2+round(85*mf); {start of second electrode}
is4=is3+round(25*mf); {end of 2nd electrode}
ie=is4+round(30*mf);
js=1;
js1=round(80*mf);
je=js1+round(35*mf);


xs=0.0;
xs1=0.01;
xs2=0.012;
xs3=0.017;
xs4=0.019;
xe=0.029;

ys=0.0;
ys1=0.0007;
ye=0.015;

dwall=1e-6/mf;
dx=30e-6/mf;

Grid(
  Size(is,js, ie,je);


  {flow above 1st electrode}
  Corners(is1,js, is2,js1, xs1,ys,   xs2,ys1);
  JoinCorners(is1,js, is2,js1,  ff,0.5e0,dx,dx,  FE,0.2e0,dwall,1.0e0);
  
  {flow above 2nd electrode}
  Corners(is3,js,  is4,js1, xs3,ys,  xs4,ys1);
  JoinCorners(is3,js, is4,js1,  ff,0.5e0,dx,dx,  FE,0.2e0,dwall,1.0e0);


  {upstream of 1st electrode }
  Corners(is,js, is1,js1, xs,ys,  xs1,ys1);
  JoinCorners(is,js, is1,js1,  FG,0.5e0,dx,1.0,  FE,0.2e0,dwall,1.0e0);

  {downstream of 2nd electrode }
  Corners(is4,js, ie,js1, xs4,ys,  xe,ys1);
  JoinCorners(is4,js, ie,js1,  GE,0.5e0,1.0e0,1.0,  FE,0.2e0,dwall,1.0e0);
  
  {in-between electrodes}
  JoinCorners(is2,js, is3,js1, gg,0.5,1.0,1.0, FE,0.2e0,dwall,1.0e0);

  Copy(is,js1,ie,js1, is,je);
  Translate(is,je,ie,je, 0,ye-ys1);
  Join(is,js1,ie,je, j, GE, 0.5, 1.0, 1.0);
);


Bdry(
  NavierStokesPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            ID   Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0    Inflow, supersonic, 1o
    BDRY_INFLOWSUBSONIC1               7    Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  g    Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1            1    Outflow, supersonic, 1o
    BDRY_OUTFLOWSUPERSONIC2            2    Outflow, supersonic, 2o
    BDRY_OUTFLOWSUBSONIC1              4    Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1        f    Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                  e    Symmetrical, 2o
    BDRY_SYMMETRICAL1                  9    Symmetrical, 1o
    BDRY_WALLTFIXED1                   3    Wall, T specified; param Twall[K], gammaeminus
    BDRY_WALLTFIXEDTHERMIONIC1         h    Wall, T specified; param Twall[K], workfunct[eV]
    BDRY_WALLTFIXEDCATALYTIC1          i    Wall, T specified; param Twall[K], gammaeminus, specO,specO2,gammaO, ...
    BDRY_WALLTFIXEDINJECTION1          j    Wall, T specified; param Twall[K], gammaeminus, specCs,mdotCs[kg/m2s]
    BDRY_WALLADIABATIC1                6    Wall, Adiabatic
    BDRY_SLIPWALL1                     c    Slip wall, Adiabatic, 1o
    BDRY_FREESTREAM1                   5    Freestream, 1o, params Vx,Vy, P, T
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    Plane("i",is,BDRY_INFLOWSUPERSONIC);
    Plane("i",ie,BDRY_OUTFLOWSUPERSONIC1);
    Twall=500.0; {K}
    gammaeminus=0.1; 
    Plane("j",js,BDRY_WALLTFIXED1,Twall,gammaeminus);
    Plane("j",je,BDRY_OUTFLOWSUPERSONIC1);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    Link(i1,j1,  i2,j2);
    }
  );
  Epotential(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   ID   Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0    Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2    Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1    Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
    All(BDRYEMF_DIELECTRIC);
    Region(is1,js,  is2,js,  BDRYEMF_ELECTRODE);
    Region(is3,js,  is4,js,  BDRYEMF_ELECTRODE);
    {
    Faces(BDRYEMF_ELECTRODE,BDRYEMF_ELECTRODE,  BDRYEMF_DIELECTRIC,BDRYEMF_DIELECTRIC);
    Cut(is,js,  ie,je);
    Link(i1,j1,  i2,j2);
    }
  );
);
 
 
Model(
  NavierStokesPlasma(
    TEMODEL=TEMODEL_TRANSPORT;
    TETRANSPORT_WEEE_TWOTEMPERATURE=FALSE;
    N2VIBMODEL=N2VIBMODEL_MACHERET;
    N2VIBJOULEHEATING=YES;
    REACTING=YES;
    emfieldworkheatfact=1.0;   {factor multiplying the emfield work and heat source terms}
    sigmadiv=1e-10; {S/m}
    etdiv=1e-1;     {J/kg}
    Pmin=1.0e2;    Pmax=9.9e99;   {Pa}
    Tmin=1.0e2;     Tmax=26.0e3;    {K}
    Tvmin=Tmin;     Tvmax=Tmax;  {K}
    Temin=3000.0;    Temax=1.0e5;  {K}
    Twmin=Tmin;     Twmax=Tmax;    {K}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain for neutrals}
    chiimin=1e-30;  chiimax=1.0;    {min and max ion molar fraction}
    chiemin=1e-12;  chiemax=1.0;    {min and max electron molar fraction}
    Nminbdry=1e8;   {the minimum number density in 1/m3 for the charged species at the bdry nodes}
    AXISYMMETRIC=NO;
  );
  C2H4AirPlasma30s(
    COMBUSTIONMODEL=COMBUSTIONMODEL_ZETTERVALL2017;
    IONIZATIONMODEL=IONIZATIONMODEL_ADAMOVICH;
  );
  Epotential(
    Te_buffer=300.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible but at least as high as 300 K}
    Jmax=20000000000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,je, 1.0 );
    SetSolidConductivity(is,js, ie,je, 0.0 {S/m});
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
    AXISYMMETRIC=NO;
  );
);


Init(
  NavierStokesPlasma(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     Tv, Te
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], Tv, Te
    _______________________________________________________________________________________

    }
    {RUN 1}
    {========================}
    Vx=1000; {m/s}
    P=25000; {Pa}
    T=900; {K}
    {------------------------}
    
    Vy=0; {m/s}
    Tv=T; {K}
    Te=T; {K}
    Species("C2H4","O2","N2","C2H4+","e-","default");
    chi_C2H4=0.05;
    chi_O2=(1-chi_C2H4)*0.21;
    chi_N2=(1-chi_C2H4)*0.79;
    chi_eminus=1e-12;
    chi_C2H4plus=1e-12;
    chi_default=1e-30;
    All(INIT_TYPE6,Vx,Vy,P,T,chi_C2H4,chi_O2,chi_N2,chi_C2H4plus,chi_eminus,chi_default,Tv,Te);
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE6,Vx,Vy,P,T,chi_O2,chi_N2,chi_eminus,chi_default,Tv,Te);
    Region(is,js,  ie,je, INIT_TYPE6,Vx,Vy,P,T,chi_O2,chi_N2,chi_eminus,chi_default,Tv,Te);
    }
  );
  Epotential(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
    phi=0.0; {V}
    All(INITEMF_TYPE1,phi);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,  ie,je,INITEMF_TYPE1,phi);
    }
  );
);


Disc(
  NavierStokesPlasma(
    zetaA1=0.3e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.2e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
    zetaD=0.0;        {conditions the Dstar eigenvalues for the charged species}
    for (spec,1,numspec,
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONPLUS,
        betag[spec]=0.9;
        betaa[spec]=0.1;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONMINUS,
        betag[spec]=-0.01;
        betaa[spec]=0.5;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_ELECTRON,
        betag[spec]=-0.001;
        betaa[spec]=0.999;
      );
    );
  );
  Epotential(
    POTENTIAL=POTENTIAL_OHMBASED;
    Ediv=10.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.999;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_PECLET;
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=4;
  );
  CDFplus(
    for(flux,1,numflux,
      if (flux<=numspec+numdim+1,
        xi[flux]=0.5;
      );
      if (flux>numspec+numdim+1,
        xi[flux]=0.25;
      );
    );
  );
);


Cycle(
  NavierStokesPlasma(
    xiverge=1e-3;         {residual convergence threshold}
    zetaGammai=1.0;       {factor multiplying the pseudotime step of the ion species transport equations} 
    zetaGammae=1.0;       {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode}
    relaxNi_bdry=1.0;     {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.2;     {the electron density relaxation factor at the boundary }
    relaxTe=1.0;          {the electron temperature relaxation factor }
    rhoref=0.1;           {reference density in kg/m3}
    Tref=300.0;           {reference temperature in K}
    Teref=20000.0;        {reference electron temperature in K}
    Tvref=5000.0;         {reference vibrational temperature in K}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-7;            {average ion mass fraction}
    for (spec,1,numspec,
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONPLUS || SPECIESTYPE[spec]==SPECIESTYPE_IONMINUS,
        Uref[spec]=wion*rhoref;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_NEUTRAL,
        Uref[spec]=rhoref;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_ELECTRON,
        Uref[spec]=wion*1.8e-5*rhoref;
      );
    );
    for (dim,1,numdim,
      Uref[numspec+dim]=rhoref*aref;
    );
    Uref[numspec+numdim+1]=rhoref*aref*aref;
    Uref[numspec+numdim+2]=rhoref*700.0*Tvref;
    Uref[numspec+numdim+3]=rhoref*wion*414*Teref;
  );
  Epotential(
    xiverge_emfield=1e-2; {residual convergence threshold for the potential equation}
    sigmaref=3e-6; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.01;
    );
    Init(Epotential(
      Region(is1,js,  is2,js,INITEMF_TYPE1,0);
      Region(is3,js,  is4,js,INITEMF_TYPE1,0);
    ););
    CFL=min(CFL*1.05,0.5);
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2);
    Lc=1e99;      {characteristic length scale in meters used to solve the emfield equation}
    relaxEMF=0.8; {relaxation factor forced on the update of the emfield variables}
    UpdateEMField(Lc,relaxEMF,TSEMF_SOR,50); {optional extra parameters:  tsemfmethod [TSEMF_ADI, TSEMF_DDADI, TSEMF_IMAF, etc] and numsubiter_tsemf [default: 4] if supported}
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
  );
  DualTimeStepping(
    sigma1=0.0;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.1;
    );
    {=================SETUP==================}
    numpulses=5;
    dischargeduration=10e-9; {seconds}
    pulsefrequency=50000; {Hz}
    dphimax=15000; {Volts}
    DRYRUN=FALSE;
    {----------------------------------------}
    
    
    pulseperiod=1/pulsefrequency; {seconds}
    tmax=numpulses*pulseperiod;    {simulation time span in seconds}

    tlocalperiod=(time/pulseperiod-floor(time/pulseperiod))*pulseperiod;

    dtref=dischargeduration/(mf*80);
    if (tlocalperiod<dischargeduration,
      dt=dischargeduration/(mf*80);   {physical time step in seconds}    
    ,{else}
      dt=(pulseperiod-dischargeduration)/(mf*50);  
    );
    
    dphi=max(0,min(min(dphimax,dphimax*tlocalperiod/dischargeduration*3),dphimax*(dischargeduration-tlocalperiod)/dischargeduration*3));
    
    if (DRYRUN,
      if (iter>1,
        IncreaseTimeLevel();
        printf("t=%E  dt=%E  tlocal=%E  dphi=%E \n",time,dt,tlocalperiod,dphi);
        if (time>tmax-0.1*dt,
          exit(EXIT_SUCCESS);
        );
      );
    ,{else}
      Init(Epotential(
        printf("%6.2Es %6.2EV ",tlocalperiod,dphi);
        Region(is1,js,  is2,js,INITEMF_TYPE1,-dphi/2);
        Region(is3,js,  is4,js,INITEMF_TYPE1,+dphi/2);
      ););
      CFL=min(CFL*1.2,0.5);
      UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2,dt);
      Lc=1e20;      {characteristic length scale in meters used to solve the emfield equation}
      relaxEMF=0.8; {relaxation factor forced on the update of the emfield variables}
      UpdateEMField(Lc,relaxEMF,dt,TSEMF_IMAF,4);
      UpdateEMField(Lc,relaxEMF,dt,TSEMF_SOR,200);
      UpdateEMField(Lc,relaxEMF,dt,TSEMF_SOR,200);
      printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
    
    
      if ((ximax<xiverge && ximax_emfield<xiverge_emfield) || iter>120,
        IncreaseTimeLevel();
        WriteDataFile(outputfilename"."round(time/dtref));
        printf("dt=%E time=%Es\n",dt,time);
        if (time>tmax-0.1*dt,
          exit(EXIT_SUCCESS);
        );
      );
    );
    
  );
);


Post(
  for (dim,1,2,
    Area[dim]=_Area(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(is,js, ie,je, dim);
  );
  fprintf(postfilename,"Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  fprintf(postfilename,"Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  fprintf(postfilename,"Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  fprintf(postfilename,"metotal   = %+E J/m\n",_metotal(is,js, ie,je));
  fprintf(postfilename,"m         = %+E J/m\n",_m(is,js, ie,je));
  fprintf(postfilename,"Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  fprintf(postfilename,"Qbeam     = %+E W/m\n",_Qbeam(is,js, ie,je));
  fprintf(postfilename,"EdotJ     = %+E W/m\n",_EdotJ(is,js, ie,je));
  fprintf(postfilename,"Wemfield  = %+E W/m\n",_Wemfield(is,js, ie,je)); {Wemfield=Femfield dot Vn}
  fprintf(postfilename,"\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js, ie,je, "post.01", "tecplot", POSTGRIDONLY);
  }
);

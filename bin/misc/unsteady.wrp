{
  Number of Dimensions    : nd           : 2

}


mf=1.0; 

is=1;  js=1; 
ie=round(40*mf); je=round(40*mf);
timelevels=round(25*mf);

Mx=3.0;
My=3.2;
L=0.2*Mx;
H=L/Mx*1.5;
P=10000;
T=300;
tmax=4e-4/Mx*4.0; 
FLUCTUATINGINFLOW=FALSE;
  
CFLfact=1.2;
CFLinit=0.1;
CFLfact_time0=0.2;

Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, L,0.0e0);
  Point(ie,je, L,H);
  Point(is,je, 0.0e0,H);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
);


Bdry(
  NavierStokesPerfect(
    {
    ******************************************************************  
    * Fluid Flow Boundary Conditions Types:                             
    ******************************************************************  
    *  0   : Inflow, supersonic                                         
    *  1   : Outflow, supersonic                                        
    *  2   : Slip wall, 1st order                                       
    *  3   : Slip wall, 2nd order                                       
    *  4   : Wall, T specified                                          
    *  5   : Wall, adiabatic                                            
    *  6   : Subsonic Inflow (Constant Tstag, Pstag at inflow)           
    *  7   : Subsonic Outflow (Constant P at outflow)                   
    *  104 : Wall, T specified, flux at the interface set to bdry flux  
    ******************************************************************  
    }
    { first, create cuts in the computational domain; a cut is a region 
     which is not computed by the solver }
    { Cut(10{is},10{js},  17{ie},17{je});}
    { second, apply a default boundary condition (BC) type to all boundary nodes }
    All(3{BC type});
    { impose BC type at faces i=is, i=ie, j=js, j=je}
    Faces(0,1,  2,2);
    { apply BC type only to the boundary nodes in a specific region of the computational domain}
    { Region(10{is},10{js},  17{ie},17{je},  3{BC type});}
  );
);
 
 
Model(
 
  NavierStokesPerfect(
    gamma=1.4;      {the specific heat ratio }
    R=286.0;        {the gas constant in J/kgK }
    eta=2e-5;       {the viscosity of the gas in kg/ms }
    kappa=0.03;     {the thermal conductivity of the gas in W/mK }
    Pmin=1.0e-4;    Pmax=9.9e99;   {min and max pressure allowed in the domain in Pa}
    Tmin=1.0e-2;     Tmax=13.0e3;    {min and max temperature allowed in the domain in K}
    zetaA1=0.15e0;   {conditions the convective waves of the A jacobian}
    zetaA2=0.2;
    zetaA3=0.2e0;   {conditions the eigenvalues of the inverted A jacobian (both acoustic and convective)}
    
    AXISYMMETRIC=FALSE;
    EIGENVALCOND=EIGENVALCOND_PASCAL;
  );
);
 
 
Init(
    NavierStokesPerfect(
      {
      ************************************************************
      *Initial Conditions Types:                                  
      ************************************************************
      *1, V[1]..V[nd],  P,  T     
      *2, M[1]..M[nd],  P,  T     
      ************************************************************
      }
      { Init all nodes in the domain}
      All(2,Mx,My,P,T);
      {
        { Init bdry nodes numbered 3}
        Bdry(3, 1,0.0,0.0,0.0,0.0);
        { Init nodes in region}
        Region(3,3,  6,6,
         1,0.0,0.0,0.0,0.0);
      }
    );
);


Cycle(
  NavierStokesPerfect(
    xiverge=1e2;          {residual convergence threshold}
    rhoref=1.0;            {reference density in kg/m3}
    aref=300.0;            {reference sound speed in m/s}
    Uref[1]=rhoref;            
    Uref[2]=rhoref*aref;       
    Uref[3]=rhoref*aref;   
    Uref[4]=rhoref*aref*aref;  
  );
  Multizone(
    sigma1=0.0;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    dt=tmax/timelevels;
    if (iter==1,
      CFL=CFLinit;
    );
    if (time==0,
      CFL=min(CFLfact_time0,CFL*1.2);
    ,
      CFL=min(CFLfact,CFL*1.2);
    );
    if (iter>48,
      CFL=0.1;
    );
    phi1=15;     {maximum number of gridlines per zone in each dimension}
    
    if (FLUCTUATINGINFLOW,
      Init(
        NavierStokesPerfect(
          Bdry(0, 2,Mx+time*1e4,My,P,T);
        );
      );
    );
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1,dt);
    {printf("anchor5 %ld\n",numzones_updated);}
    
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
    if (ximax<xiverge || iter>50,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );
  DualTimeStepping(
    sigma1=0.3;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.3;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    dt=tmax/timelevels;
    if (iter==1,
      CFL=CFLinit;
    );
    if (time==0,
      CFL=min(CFLfact_time0,CFL*1.2);
    ,
      CFL=min(CFLfact,CFL*1.2);
    );
    if (iter>280,
      CFL=0.1;
    );
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,dt);
    { dtau=1e-7; {pseudotime step in seconds}
      UpdateFluidConstantPseudotimeStep(dtau); }
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
    if (ximax<xiverge || iter>200,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );


);


Post(
  xcut[1]=0.1;
  xcut[2]=0.2;
  xcut[3]=0.3;
  {the following loop outputs to a file integrated properties at x=0.1,0.2,0.3}
  for (cnt,1,3,
    SetPostDomainToXcuts(xcut[cnt]);
    Pback=_BackPressure({Aback,m2}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min (as small a positive value as possible)}1.0);
    Fpot=_ThrustPotentialPerMassFlowRate(Pback,{numsteps}300, {q_min}1.0);
    mdotreacting=_MassFlowRateReacting(
        2       {rank of the reacting species},
        0.235*(1-0.02876){stoichio. mass fraction of reacting species},
        1       {rank of the species reacted with},
        0.02876 {stoichio. mass fraction of species reacted with});
    Fx=_MomentumForcePerMassFlowRate();  {momentum*crossarea/mdot}
    mdot=_MassFlowRate();
    Tstag=_MassFlowRateAveStagTemperature();
    Pstag=_MassFlowRateAveStagPressure({numsteps} 300);
    Pave=_MassFlowRateAvePressure();
    Tave=_MassFlowRateAveTemperature();
    qave=_MassFlowRateAveSpeed();
    rhoave=_MassFlowRateAveDensity();
    htstarave=_MassFlowRateAveTotalEnthalpy();
    fprintf("perfparam.txt",
            "x              =%E m\n"
            "Pback          =%E Pa\n"
            "Fpot           =%E Ns/kg\n"
            "mdotreacting   =%E kg/s\n"
            "mdot           =%E kg/s\n"
            "Tstag          =%E K\n"
            "Pstag          =%E Pa\n"
            "Pave           =%E Pa\n"
            "Tave           =%E K\n"
            "qave           =%E m/s\n"
            "rhoave         =%E kg/m3\n\n"
            ,xcut[cnt],Pback,Fpot,mdotreacting,mdot,Tstag,Pstag,Pave,Tave,qave,rhoave);
  );
  {here, reset the post domain from one xcut to the entire computational domain}
  ResetPostDomain();
  {then, restrict the post domain to the region between is,js and ie,je}
  RestrictPostDomainToRegion(is,js, ie,je);
  {output the body forces in the post domain to a file (both shear and pressure)}
  WriteBodyForcesFile("bodyforces.txt",3 {node type on the surface of the body});
  {write a post file that includes only the post domain}
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  {write a grid post file that includes only the post domain}
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
);

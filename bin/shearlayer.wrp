{
  _______________________________________________________________________________________________

                                           C F D W A R P

                      Computational Fluid Dynamics, Waves, Reactions, Plasmas
  _______________________________________________________________________________________________

  Version                          23oct02b
  Compiler                         gcc 8.3.0 with OPENMP threads with assertions
  Compiled on                      Oct  3 2023 at 21:54:30
  Cycle Strategy                   Standard
  Fluid Relaxation                 Block ADI [1,2]
  EM Field Relaxation              None
  Convection Discretization        Reconstruction-Evolution MUSCL with flux FVS [3], FDS [5],
                                   and primitive interpolation TVD [4], WENO [7], CWENO [9],
                                   AOWENO [8], and eigenvalue conditioning HARTEN, GNOFFO [10],
                                   PECLET [11], PASCAL [6], and PARENT positivity-preserving
                                   filter [12]
  Temporal Discretization          Steady-State
  Fluid Model                      Favre-Reynolds Multispecies
  Thermodynamic Model              NASA Glenn Polynomials [13].
  Transport Model                  Dixon-Lewis [14]
  Chemical Model                   Air 1 species 0 reaction
  EM Field Model                   None
  Beam Model                       None
  Number of Dimensions             2
  Number of Flux Components        6
  Number of Species                1
  Number of Charged Species        0
  List of Species                  Air
  _______________________________________________________________________________________________

  [1]  WR Briley and H McDonald. "On the Structure and Use of Linearized Block Implicit
       Schemes", Journal of Computational Physics 34:54-73, 1980.
  [2]  RM Beam and RF Warming. "An Implicit Finite-Difference Algorithm for Hyperbolic Systems
       in Conservation-Law-Form", Journal of Computational Physics 22:87-110, 1976.
  [3]  JL Steger and RF Warming. "Flux Vector Splitting of the Inviscid Gasdynamic Equations
       with Application to Finite-Difference Methods", Journal of Computational Physics 40:263-
       293, 1981.
  [4]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [5]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [6]  B Parent. "Positivity-Preserving Dual Time Stepping Schemes for Gas Dynamics", Journal of
       Computational Physics 361:391-411, 2018.
  [7]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [8]  DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [9]  M Dumbser and M Kaser. "Arbitrary High Order Non-oscillatory Finite Volume Schemes on
       Unstructured Meshes for Linear Hyperbolic Systems", Journal of Computational Physics,
       221:693-723, 2007.
  [10] P Gnoffo and  JA White. "Computational Aerothermodynamic Simulation Issues on
       Unstructured Grids", 37th AIAA Thermophysics Conference, AIAA Paper 2004-2371, 2004.
  [11] B Parent. "Multidimensional High-Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, 55:141-152, 2017.
  [12] B Parent. "Making a Flux Positivity-Preserving: A General Purpose Filter for the Euler
       Equations", AIAA Paper 2019-0906, AIAA Scitech, San Diego CA, 2019.
  [13] BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.
  [14] Dixon-Lewis, G., "Computer Modelling of Combustor Reactions", Springer Verlag, 1984.


}


Mx_top=2.7;
Mx_bot=2.0;

mf=1.0; 

is=1;   
im=round(mf*30);
ie=round(mf*70); 

js=1;
jm1=round(mf*30);
jm2=round(mf*40);
je=round(mf*70);

dwall=2e-5/mf;

Lbdry=0.02;
Lmix=1.0;

Htop=0.04;
Hbot=0.04;
dH=dwall*(jm2-jm1);



Grid(
  Size(is,js, ie,je);

  Corners(is,js,im,jm1, -Lbdry,-Hbot,0,-dH/2.0);
  JoinCorners(is,js, im,jm1,  FF,0.5e0,dwall*2,dwall*2,  EF,0.5e0,1.0e0,dwall);

  Corners(is,jm2,im,je, -Lbdry,dH/2.0,0,Htop);
  JoinCorners(is,jm2, im,je,  FF,0.5e0,dwall*2,dwall*2,  FE,0.5e0,dwall,1.0);

  JoinCorners(is,jm1, im,jm2, FF,0.5,dwall*2,dwall*2, GG,0.5e0, 1.0,1.0);

  Corners(ie,js,ie,je, Lmix,-Hbot,Lmix,Htop);
  JoinCorners(ie,js,ie,je, NO,0.5,1.0,1.0, EE,0.5,1.0,1.0);

  Join(im,js,ie,je, i, GE, 0.5, 1.0, 1.0);

);


Metrics(
  METRICSMODEL=METRICSMODEL_VIVIANDVINOKUR;
    {use METRICSMODEL_AXISYMMETRIC for 2D axisymmetric flow}
);


Block(
  Fluid(
    Cut(is,jm1,  im,jm2);
  );
);


Bdry(
  FavreReynolds(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            Number    Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0         Inflow, supersonic
    BDRY_INFLOWSUBSONIC1               7         Inflow, subsonic, Tstag, Pstag fixed
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  16        Inflow, subsonic, Pstag, Massflow/Area fixed
    BDRY_OUTFLOWSUPERSONIC1            1         Outflow, supersonic
    BDRY_OUTFLOWSUBSONIC1              4         Outflow, subsonic, P fixed
    BDRY_OUTFLOWSUBSONICMFIXED1        15        Outflow, subsonic, M fixed
    BDRY_SYMMETRICAL2                  14        Symmetrical, 2nd order
    BDRY_SYMMETRICAL1                  9         Symmetrical, 1st order
    BDRY_WALLTFIXED1                    3         Wall, T specified
    BDRY_WALLADIABATIC1                 6         Wall, Adiabatic
    BDRY_SLIPWALL1                     12        Slip wall, 1st order, Adiabatic
    _________________________________________________________________________________________
    }
    All(BDRY_OUTFLOWSUPERSONIC1);
    Plane("i",is,BDRY_INFLOWSUPERSONIC);

    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
);
 
 
Model(
  FavreReynolds(
    TURBMODEL=TURBMODEL_SST1994;  
    DILATDISSIP=DILATDISSIP_WILCOX; 
    RAPCOMP=NO;     {Coakley rapid compression correction}
    TURBSOURCE=YES; {solve the turbulence source terms?}
    REACTING=YES;   {Chemical reactions?}
    Prt=0.9e0;      {turbulent Prandtl number}
    Sct=1.0e0;      {turbulent Schmidt number}
    ADD_ETA_TO_ETAT_WITHIN_QK=NO;  {say NO for standard kinetic energy transport model}
    kdiv=1.0e-20;   {minimum magnitude of k in m2/s2 allowed when k appears on the denominator}
    psidiv=0.1e-3;   {minimum magnitude of psi allowed when psi appears on the denominator}
    Pmin=1.0e-2;    Pmax=9.9e99;   {min and max pressure allowed in the domain in Pa}
    Tmin=1.0e1;     Tmax=6.0e3;    {min and max temperature allowed in the domain in K}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature allowed on any wall boundary node in K}
    kmin=1.0e-10;   kmax=9.9e99;   {min and max TKE allowed in the domain in m2/s2}
    psimin=1e-10;   psimax=9.9e99; {min and max omega/epsilon allowed in the domain}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain}
    SetBodyForce(is,js, ie,je, 0.0{N/m3},0.0{N/m3});
    SetHeatDeposited(is,js, ie,je, 0.0 {W/m3});
  );
);


Init(
  FavreReynolds(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     k, psi
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     k, psi
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     k, psi
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     k, psi
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     k, psi
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], k, psi
    _______________________________________________________________________________________

    (a) in the freestream inflow conditions, it is suggested to set psi to 10*(flow speed)
        for the 1988 k-omega model and 110*(flow speed) for the 2008 k-omega model
    (b) for hypersonic flows, the freestream value of psi can be further multiplied by
        up to 5 times if necessary
    }
    My=0;
    P=10000; {Pa}
    T=300; {K}
    k=1e0; {J/kg}
    psi=110*sqrt(Mx_bot^2+My^2)*sqrt(1.4*287*T); {1/s for TURBMODEL_KOMEGA*}
    w_Air=1.000000;
    All(2,Mx_bot,My,P,T,w_Air,k,psi);
    psi=110*sqrt(Mx_top^2+My^2)*sqrt(1.4*287*T); {1/s for TURBMODEL_KOMEGA*}
    Region(is,jm2,  ie,je, 2,Mx_top,My,P,T,w_Air,k,psi);
    {
    Bdry(BDRY_WALLTFIXED1, 2,Mx,My,P,T,w_Air,k,psi);
    Region(is,js,  ie,je, 2,Mx,My,P,T,w_Air,k,psi);
    }
  );
);

Disc(
  FavreReynolds(
    zetaA1=0.1e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.2e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
  );
  MUSCL(
    FLUX=FLUX_FDSR;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.85;
    AOWENO_gammahi=0.85;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_PECLET;
    POSFILTER=POSFILTER_NONE;
    POSFILTER_numiter=4;
  );
);


Cycle(
  FavreReynolds(
    xiverge=1e-3;{residual convergence threshold}
    rhoref=1.0;  {reference density in kg/m3}
    aref=300.0;  {reference sound speed in m/s}
    kref=1e4;    {reference turbulence kinetic energy in m2/s2}
    psiref=1e8;  {reference specific dissipation rate of the TKE in 1/s if for TURBMODEL_KOMEGA*
                  reference dissipation rate of the TKE in m2/s3 for TURBMODEL_KEPSILON}
    for (spec,1,numspec,
      Uref[spec]=rhoref;
    );
    for (dim,1,numdim,
      Uref[numspec+dim]=rhoref*aref;
    );
    Uref[numspec+numdim+1]=rhoref*aref*aref;
    Uref[numspec+numdim+2]=rhoref*kref;  
    Uref[numspec+numdim+3]=rhoref*psiref;  
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.01;
    );
    CFL=min(CFL*1.01,2.5);
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%2ld %4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,flux_ximax,i_ximax,
           j_ximax,clipinfo);
  );
);


Post(
);

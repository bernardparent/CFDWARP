{
  _______________________________________________________________________________________________

                                           C F D W A R P

                                CFD Code for Plasma & Reactive Flow
  _______________________________________________________________________________________________

  Version                          20sep02a
  Compiler                         gcc 8.3.0 with OPENMP threads
  Compiled on                      Sep  3 2020 at 15:19:09
  Cycle Strategy                   Standard
  Fluid Relaxation                 Block ADI [1,2]
  EM Field Relaxation              None
  Convection Discretization        Reconstruction-Evolution MUSCL with flux FVS [3], FDS [5],
                                   and primitive interpolation TVD [4], WENO [7], CWENO [9],
                                   AOWENO [8], and eigenvalue conditioning HARTEN, GNOFFO [10],
                                   PECLET [11], PASCAL [6], and PARENT positivity-preserving
                                   filter [12]
  Temporal Discretization          Steady-State
  Fluid Model                      Navier-Stokes Multispecies
  Thermodynamic Model              NASA Glenn Polynomials [13]
  Chemical Model                   Air 5s Lenard [15], Dunn-Kang [14], Park [16], Boyd
                                   [boyd2007a]
  EM Field Model                   None
  Beam Model                       None
  Number of Dimensions             2
  Number of Flux Components        8
  Number of Species                5
  Number of Charged Species        0
  List of Species                  O, N, NO, O2, N2
  _______________________________________________________________________________________________

  [1]  WR Briley and H McDonald. "On the Structure and Use of Linearized Block Implicit
       Schemes", Journal of Computational Physics 34:54-73, 1980.
  [2]  RM Beam and RF Warming. "An Implicit Finite-Difference Algorithm for Hyperbolic Systems
       in Conservation-Law-Form", Journal of Computational Physics 22:87-110, 1976.
  [3]  JL Steger and RF Warming. "Flux Vector Splitting of the Inviscid Gasdynamic Equations
       with Application to Finite-Difference Methods", Journal of Computational Physics 40:263-
       293, 1981.
  [4]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [5]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [6]  B Parent. "Positivity-Preserving Dual Time Stepping Schemes for Gas Dynamics", Journal of
       Computational Physics 361:391-411, 2018.
  [7]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [8]  DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [9]  M Dumbser and M Kaser. "Arbitrary High Order Non-oscillatory Finite Volume Schemes on
       Unstructured Meshes for Linear Hyperbolic Systems", Journal of Computational Physics,
       221:693-723, 2007.
  [10] P Gnoffo and  JA White. "Computational Aerothermodynamic Simulation Issues on
       Unstructured Grids", 37th AIAA Thermophysics Conference, AIAA Paper 2004-2371, 2004.
  [11] B Parent. "Multidimensional High-Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, 55:141-152, 2017.
  [12] B Parent. "Making a Flux Positivity-Preserving: A General Purpose Filter for the Euler
       Equations", AIAA Paper 2019-0906, AIAA Scitech, San Diego CA, 2019.
  [13] BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.
  [14] MG Dunn and SW Kang. "Theoretical and Experimental Studies of Reentry Plasmas", NASA CR-
       2232, 1973.
  [15] M Lenard. "Ionization of Cesium and Sodium Contaminated Air in the Hypersonic Slender
       Body Boundary Layer", General Electric Missile and Space Division Technical Report
       R64SD22, 1964.
  [16] C Park. "Review of Chemical-Kinetic Problems of Future NASA Missions, I: Earth Entries,"
       Journal of Thermophysics and Heat Transfer 7:385-398, 1993.


}



caseno=1;

if(caseno==1,  Vx=7456.3; Pinf=0.0726; Tinf=192.3;  Twall=422;   scalefactsheath=1.0; {alt=? km} );
if(caseno==2,  Vx=7454.1; Pinf=0.163;  Tinf=188.7;  Twall=492;   scalefactsheath=1.0; {alt=? km} );
if(caseno==3,  Vx=7444.3; Pinf=0.231;  Tinf=186.87; Twall=587;   scalefactsheath=0.8; {alt=? km} );
if(caseno==4,  Vx=7415.9; Pinf=0.594;  Tinf=188.9;  Twall=690;   scalefactsheath=0.8; {alt=? km} ); 
if(caseno==5,  Vx=7360.2; Pinf=1.0524; Tinf=198.64; Twall=808;   scalefactsheath=0.5; {alt=? km} );
if(caseno==6,  Vx=7245.7; Pinf=2.1717; Tinf=206.82; Twall=928;   scalefactsheath=0.5; {alt=? km} );
if(caseno==7,  Vx=7049.2; Pinf=4.023;  Tinf=214.98; Twall=1078;  scalefactsheath=0.5; {alt=? km} ); 
if(caseno==8,  Vx=6720.3; Pinf=7.892;  Tinf=225.99; Twall=1251;  scalefactsheath=0.3; {alt=? km} );
if(caseno==9,  Vx=6223.4; Pinf=14.02;  Tinf=237.14; Twall=1413;  scalefactsheath=0.3; {alt=? km} );
if(caseno==10, Vx=5561.6; Pinf=23.60;  Tinf=248.12; Twall=1519;  scalefactsheath=0.3; {alt=? km} );



mf=1;

is=1;
im1=round(40*mf/2);
im2=round(120*mf/2);
im3=round(225*mf/2); 
im4=round(305*mf/2);
ie=round(345*mf/2);

{make sure no grid line falls on the axis of symmetry}
if (mod(im3-im2,2)==0,
 im3=im3+1;
);
{printf("im3=%d\n",im3);}
js=1;
jm1=round(10*mf/2);
jm2=round(100*mf/2);
je=round(160*mf/2);


Rin=1.35;
Hsheath=2.67E-03*scalefactsheath; {exit} {0.00173731 wall normal}
Rsheath=Rin+1.3E-3*scalefactsheath; {nose ends}
Rsheathstag=Rin+9.2E-4*scalefactsheath; {stagnation point}
Rout=6.85;
Rbow=Rin+0.213;
Rbowstag=Rin+0.14615;
Routstag=6.75;
H=6.3;
delta=50/180*pi; {wedge angle}
Lplate=(1.25*cos(pi/2-delta)-0.2892)/cos(delta); printf("Lplate=%.15E\n",Lplate);
phi=rad(0);
Lwake=0.4;
Hbdry=0.4686; {height of boundary layer at the domain exit}


dtheta=0.1/180*pi;



Tvinf=Tinf;
Teinf=Tinf;

gammaO=0.1;
gammaN=gammaO;

Grid(
  Size(is,js, ie,je);

  for (i,im2,im3,
    theta=-(pi/2-delta)+(i-im2)/(im3-im2)*(pi-2*delta);
    fact=abs(theta/(pi/2-delta))^3;
    Rbowx=Rbow*fact+Rbowstag*(1-fact);
    Rsheathx=Rsheath*fact+Rsheathstag*(1-fact);  
    Routx=Rout*fact+Routstag*(1-fact); 
    Point(i,js, -Rin*cos(theta),Rin*sin(theta));
    Point(i,jm1, -Rsheathx*cos(theta),Rsheathx*sin(theta));  
    Point(i,jm2, -Rbowx*cos(theta),Rbow*sin(theta));  
    Point(i,je, -Routx*cos(theta),Rout*sin(theta));  
  );

  Join(im2,js,im3,jm1,j,EE,0.5,1,1);
  Join(im2,jm1,im3,jm2,j,GE,0.2,1,1);
  Join(im2,jm2,im3,je,j,GE,0.9,1,1);

  Point(im4,js, Lplate*cos(delta)-Rin*cos(pi/2-delta), Lplate*sin(delta)+Rin*sin(pi/2-delta));
  Point(im4,jm1, Lplate*cos(delta)-Rin*cos(pi/2-delta), Lplate*sin(delta)+Rin*sin(pi/2-delta)+Hsheath);
  Point(im4,jm2, Lplate*cos(delta)-Rin*cos(pi/2-delta), Lplate*sin(delta)+Rin*sin(pi/2-delta)+Hbdry);
  Point(im4,je, Lplate*cos(delta)-Rin*cos(pi/2-delta), Lplate*sin(delta)+Rin*sin(pi/2-delta)+H);
  Join(im4,js,im4,jm1, j, EE,0.5,1.0,1.0);
  Join(im4,jm1,im4,jm2, j, GE,0.2,1.0,1.0);
  Join(im4,jm2,im4,je, j, GE,0.9,1.0,1.0);


  Point(im1,js, Lplate*cos(delta)-Rin*cos(pi/2-delta), -Lplate*sin(delta)-Rin*sin(pi/2-delta));
  Point(im1,jm1, Lplate*cos(delta)-Rin*cos(pi/2-delta), -Lplate*sin(delta)-Rin*sin(pi/2-delta)-Hsheath);
  Point(im1,jm2, Lplate*cos(delta)-Rin*cos(pi/2-delta), -Lplate*sin(delta)-Rin*sin(pi/2-delta)-Hbdry);
  Point(im1,je, Lplate*cos(delta)-Rin*cos(pi/2-delta), -Lplate*sin(delta)-Rin*sin(pi/2-delta)-H);
  Join(im1,js,im1,jm1, j, EE,0.5,1.0,1.0);
  Join(im1,jm1,im1,jm2, j, GE,0.2,1.0,1.0);
  Join(im1,jm2,im1,je, j, GE,0.9,1.0,1.0);

  

  
  

  {Point(ie,js,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake*cos(delta-phi),Lplate*sin(delta)-Lwake*sin(phi-delta));
  Point(ie,jm,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake*cos(delta-phi),Lplate*sin(delta)-Lwake*sin(phi-delta)+Hbdry*2);
  Point(ie,je,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake*cos(delta-phi),(Lplate+Lwake)*sin(delta)+H);
  Join(ie,js,ie,jm, j, FE,0.2,dywall*2,1.0);
  Join(ie,jm,ie,je, j, GE,0.9,1.0,1.0);}

  Point(ie,js,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake,Lplate*sin(delta)+Rin*sin(pi/2-delta));
  Point(ie,jm1,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake,Lplate*sin(delta)+Rin*sin(pi/2-delta)+Hsheath*2);
  Point(ie,jm2,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake,(Lplate+Lwake/cos(delta))*sin(delta)+Rin*sin(pi/2-delta)+Hbdry);
  Point(ie,je,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake,Lplate*sin(delta)+Rin*sin(pi/2-delta)+H);
  Join(ie,js,ie,jm1, j, EE,0.5,1.0,1.0);
  Join(ie,jm1,ie,jm2, j, GE,0.2,1.0,1.0);
  Join(ie,jm2,ie,je, j, GE,0.9,1.0,1.0);
  Join(im4,js,ie,je, i, EE, 0.5,1.0,1.0);



  {Point(is,js,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake*cos(delta-phi),-Lplate*sin(delta)+Lwake*sin(phi-delta));
  Point(is,jm,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake*cos(delta-phi),-Lplate*sin(delta)+Lwake*sin(phi-delta)-Hbdry*2);
  Point(is,je,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake*cos(delta-phi),-(Lplate+Lwake)*sin(delta)-H);
  Join(is,js,is,jm, j, FE,0.2,dywall*2,1.0);
  Join(is,jm,is,je, j, EE,0.5,1.0,1.0);}

  Point(is,js,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake,-(Lplate*sin(delta)+Rin*sin(pi/2-delta)));
  Point(is,jm1,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake,-(Lplate*sin(delta)+Rin*sin(pi/2-delta)+Hsheath*2));
  Point(is,jm2,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake,-((Lplate+Lwake/cos(delta))*sin(delta)+Rin*sin(pi/2-delta)+Hbdry));
  Point(is,je,Lplate*cos(delta)-Rin*cos(pi/2-delta)+Lwake,-(Lplate*sin(delta)+Rin*sin(pi/2-delta)+H));
  Join(is,js,is,jm1, j, EE,0.5,1.0,1.0);
  Join(is,jm1,is,jm2, j, GE,0.2,1.0,1.0);
  Join(is,jm2,is,je, j, GE,0.9,1.0,1.0);
  Join(is,js,im1,je, i, EE, 0.5,1.0,1.0);

  Join(im3,js,im4,je, i, GG,0.2,1,1);
  Join(im1,js,im2,je, i, GG,0.8,1,1);
);


Block(
  NavierStokesPlasma(
  );
  Epotential(
  );

);


Bdry(
  NavierStokesPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            ID   Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0    Inflow, supersonic, 1o
    BDRY_INFLOWSUBSONIC1               7    Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  g    Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1            1    Outflow, supersonic, 1o
    BDRY_OUTFLOWSUPERSONIC2            2    Outflow, supersonic, 2o
    BDRY_OUTFLOWSUBSONIC1              4    Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1        f    Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                  e    Symmetrical, 2o
    BDRY_SYMMETRICAL1                  9    Symmetrical, 1o
    BDRY_WALLTFIXED1                   3    Wall, T specified; param Twall[K], gammaeminus
    BDRY_WALLTFIXEDTHERMIONIC1         h    Wall, T specified; param Twall[K], workfunct[eV]
    BDRY_WALLTFIXEDCATALYTIC1          i    Wall, T specified; param Twall[K], gammaeminus, specO,specO2,gammaO, ...
    BDRY_WALLTFIXEDINJECTION1          j    Wall, T specified; param Twall[K], gammaeminus, specCs,mdotCs[kg/m2s]
    BDRY_WALLADIABATIC1                6    Wall, Adiabatic
    BDRY_SLIPWALL1                     c    Slip wall, Adiabatic, 1o
    BDRY_FREESTREAM1                   5    Freestream, 1o, params Vx,Vy, P, T
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    Plane("i",is,BDRY_OUTFLOWSUPERSONIC1);
    Plane("i",ie,BDRY_OUTFLOWSUPERSONIC1);
    gammeminus=0.1;
    Region(is+1,js,ie-1,js,BDRY_WALLTFIXEDCATALYTIC1,Twall,gammeminus,specO,specO2,gammaO,specN,specN2,gammaN);
    Plane("j",je,BDRY_INFLOWSUPERSONIC);
    Region(is,je,  im1-1,je, BDRY_OUTFLOWSUPERSONIC1);
    Region(im4+1,je,  ie,je,  BDRY_OUTFLOWSUPERSONIC1);
  );
  Epotential(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   ID   Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0    Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2    Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1    Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
    All(BDRYEMF_DIELECTRIC);
  );

);
 
 
Model(
  NavierStokesPlasma(
    TEMODEL=TEMODEL_TRANSPORT;
    TETRANSPORT_WEEE_TWOTEMPERATURE=FALSE;
    N2VIBMODEL=N2VIBMODEL_MACHERET;
    N2VIBJOULEHEATING=YES;
    INCLUDE_E_EFFECTS_ON_ION_MOBILITY=FALSE;
    INCLUDE_E_EFFECTS_ON_ELECTRON_MOBILITY=FALSE;
    SCHOTTKY_EFFECT=FALSE;
    REACTING=YES;
    emfieldworkheatfact=1.0;   {factor multiplying the emfield work and heat source terms}
    sigmadiv=1e-10; {S/m}
    etdiv=1e-1;     {J/kg}
    Pmin=1.0e-2;    Pmax=9.9e99;   {Pa}
    Tmin=1.0e1;     Tmax=35.0e3;    {K}
    Tvmin=Tmin;     Tvmax=Tmax;  {K}
    Temin=240;     Temax=60.0e3;  {K}
    Twmin=Tmin;     Twmax=Tmax;    {K}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain for neutrals}
    chiimin=1e-30;  chiimax=1.0;    {min and max ion molar fraction}
    chiemin=1e-12;  chiemax=1.0;    {min and max electron molar fraction}
    Nminbdry=1e8;   {the minimum number density in 1/m3 for the charged species at the bdry nodes}
    AXISYMMETRIC=YES;
    SetBodyForce(is,js, ie,je, 0.0{N/m3},0.0{N/m3});
    SetHeatDeposited(is,js, ie,je, 0.0 {W/m3});
    {
    AddHeatPoint(0.0{x,m},0.0{y,m}, 0.1{radius,m}, 0.0{W/m});
    }
    HEAT_DEPOSITED_TO_ELECTRONS=FALSE;
  );
  AirPlasma11s(
    CHEMMODEL=CHEMMODEL_DUNNKANG1973;
    ADDITIONALREACTION=FALSE; {include reactions function of EoverN}
    TOWNSENDIONIZATIONIMPLICIT=FALSE; {keep this to FALSE generally}
    QEISOURCETERMS=TRUE; {include electron energy cooling due to electron impact}
  );
  Epotential(
    Te_buffer=300.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible but at least as high as 300 K}
    Jmax=200000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,je, 1.0 );
    SetSolidConductivity(is,js, ie,je, 0.0 {S/m});
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
    AXISYMMETRIC=YES;
  );
);


Init(
  NavierStokesPlasma(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     Tv, Te
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], Tv, Te
    _______________________________________________________________________________________

    }
    Species("O2", "N2", "default");
    w_O2=0.2375;
    w_N2=0.7625;
    w_default=1e-30;
    All(INIT_TYPE5,Vx,0,Pinf,Tinf,w_O2,w_N2,w_default,Tvinf,Teinf);
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE6,Vx,Vy,P,T,chi_O2,chi_N2,chi_eminus,chi_default,Tv,Te);
    Region(is,js,  ie,je, INIT_TYPE6,Vx,Vy,P,T,chi_O2,chi_N2,chi_eminus,chi_default,Tv,Te);
    }
  );
  Epotential(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
    phi=0.0; {V}
    All(INITEMF_TYPE1,phi);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,  ie,je,INITEMF_TYPE1,phi);
    }
  );
);


Disc(
  NavierStokesPlasma(
    zetaA1=1.0e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.1e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
    zetaD=1.0;        {conditions the Dstar eigenvalues for the charged species}
    for (spec,1,numspec,
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONPLUS,
        betag[spec]=1.0;
        betaa[spec]=0.0;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONMINUS,
        betag[spec]=-0.01;
        betaa[spec]=0.5;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_ELECTRON,
        betag[spec]=-0.001;
        betaa[spec]=0.999;
      );
    );
  );
  Epotential(
    POTENTIAL=POTENTIAL_OHMBASED;
    Ediv=10.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.999;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_PECLET;
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=4;
  );
);


Cycle(
  FavreReynoldsTv(
    xiverge=1e-3;  {residual convergence threshold}
    rhoref=0.1;    {reference density in kg/m3}
    Tref=300.0;    {reference temperature in K}
    Tvref=5000.0;  {reference vibrational temperature in K}
    kref=1e4;      {reference turbulence kinetic energy in m2/s2}
    psiref=1e8;    {reference specific dissipation rate of the TKE in 1/s for TURBMODEL_KOMEGA*
                    reference dissipation rate of the TKE in m2/s3 for TURBMODEL_KEPSILON}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    for (spec,1,numspec,
      Uref[spec]=rhoref;
    );
    for (dim,1,numdim,
      Uref[numspec+dim]=rhoref*aref;
    );
    Uref[numspec+numdim+1]=rhoref*aref*aref;
    Uref[numspec+numdim+2]=rhoref*kref;  
    Uref[numspec+numdim+3]=rhoref*psiref;  
    Uref[numspec+numdim+4]=rhoref*700.0*Tvref;  
  );
  NavierStokes(
    xiverge=1e-3;  {residual convergence threshold}
    rhoref=1.0;  {reference density in kg/m3}
    aref=300.0;  {reference sound speed in m/s}
    for (spec,1,numspec,
      Uref[spec]=rhoref;
    );
    for (dim,1,numdim,
      Uref[numspec+dim]=rhoref*aref;
    );
    Uref[numspec+numdim+1]=rhoref*aref*aref;
  );
  NavierStokesPlasma(
    xiverge=1e-3;         {residual convergence threshold}
    zetaGammai=1.0;       {factor multiplying the pseudotime step of the ion species transport equations} 
    zetaGammae=1.0;       {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode}
    relaxNi_bdry=1.0;     {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.2;     {the electron density relaxation factor at the boundary }
    relaxTe=0.8;          {the electron temperature relaxation factor }
    rhoref=1;           {reference density in kg/m3}
    Tref=300.0;           {reference temperature in K}
    Teref=20000.0;        {reference electron temperature in K}
    Tvref=5000.0;         {reference vibrational temperature in K}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-7;            {average ion mass fraction}
    for (spec,1,numspec,
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONPLUS || SPECIESTYPE[spec]==SPECIESTYPE_IONMINUS,
        Uref[spec]=wion*rhoref;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_NEUTRAL,
        Uref[spec]=rhoref;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_ELECTRON,
        Uref[spec]=wion*1.8e-5*rhoref;
      );
    );
    for (dim,1,numdim,
      Uref[numspec+dim]=rhoref*aref;
    );
    Uref[numspec+numdim+1]=rhoref*aref*aref;
    Uref[numspec+numdim+2]=rhoref*700.0*Tvref;
    Uref[numspec+numdim+3]=rhoref*wion*414*Teref;
  );
  Epotential(
    xiverge_emfield=1e-2; {residual convergence threshold for the potential equation}
    sigmaref=3e-6; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );
  SteadyState(
    if (mod(iter,100)==0,
      WriteDataFile(outputfilename);
    );
    if(iter==10001,exit(EXIT_SUCCESS););
    sigma1=0.0;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.01;
    );
    if (iter<1000*mf,
      CFLmax=1.25;
    ,{else}
      CFLmax=1.5;
    );
    CFL=min(CFL*1.03,CFLmax);
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2);
    if (EMFIELD,
      if (iter<2000,
        Cycle(NavierStokesPlasma(relaxTe=0.1;););
      ,{else}
        Cycle(NavierStokesPlasma(relaxTe=0.5;););
      );
      Lc=1e99;      {characteristic length scale in meters used to solve the emfield equation}
      relaxEMF=0.8; {relaxation factor forced on the update of the emfield variables}
      UpdateEMField(Lc,relaxEMF,TSEMF_SOR,20); 
      UpdateEMField(Lc,relaxEMF,TSEMF_IMAF,2);
      {if(iter==6,exit(EXIT_SUCCESS););}
      printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
             CFL,iter,effiter_U,ximax,i_ximax,
             j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
    ,{else}
      printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
             CFL,iter,effiter_U,ximax,i_ximax,
             j_ximax,clipinfo);
    );
  );

);


Post(
  for(i,round(ie/2),ie,
    fprintf(postfilename,"%E %+E\n",_y(i,js),_Qheat(i,js, i,je, BDRY_WALLTFIXED1));
  );
);

{
  _______________________________________________________________________________________________

                                           C F D W A R P

                                CFD Code for Plasma & Reactive Flow
  _______________________________________________________________________________________________

  Version                          23may25a
  Compiler                         gcc 8.3.0 with OPENMP threads with assertions
  Compiled on                      May 28 2023 at 22:46:13
  Cycle Strategy                   Standard
  Fluid Relaxation                 Block DDADI [2,1]
  EM Field Relaxation              Implicit schemes based on approximate factorization including
                                   ADI [4], DDADI [2,1], and IMAF [3]
  Convection Discretization        Reconstruction-Evolution MUSCL with flux FVS [5], FDS [7],
                                   and primitive interpolation TVD [6], WENO [9], CWENO [11],
                                   AOWENO [10], and eigenvalue conditioning HARTEN, GNOFFO
                                   [12], PECLET [13], PASCAL [8], and PARENT positivity-
                                   preserving filter [14]
  Temporal Discretization          Steady-State
  Fluid Model                      Navier-Stokes with drift-diffusion plasma model [15]
  Thermodynamic Model              NASA Glenn Polynomials [16].
  Transport Model                  Dixon-Lewis [17]
  Chemical Model                   Air Plasma 8 species Macheret [18], Rajendran
  EM Field Model                   Electric field potential and fixed magnetic field [19,20]
  Beam Model                       Fixed Electron Beam Energy Deposition
  Number of Dimensions             2
  Number of Flux Components        13
  Number of Species                8
  Number of Charged Species        4
  List of Species                  e-, O2-, O2+, N2+, O, N, O2, N2
  _______________________________________________________________________________________________

  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  RW MacCormack. "Iterative Modified Approximate Factorization", Computers and Fluids
       30:917-925, 2001.
  [4]  DW Peaceman and HH Rachford. "The Numerical Solution of Parabolic and Elliptic
       Differential Equations", J. Soc. Ind. Appl. Math. 3:28-41, 1955.
  [5]  JL Steger and RF Warming. "Flux Vector Splitting of the Inviscid Gasdynamic Equations
       with Application to Finite-Difference Methods", Journal of Computational Physics 40:263-
       293, 1981.
  [6]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [7]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [8]  B Parent. "Positivity-Preserving Dual Time Stepping Schemes for Gas Dynamics", Journal of
       Computational Physics 361:391-411, 2018.
  [9]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [10] DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [11] M Dumbser and M Kaser. "Arbitrary High Order Non-oscillatory Finite Volume Schemes on
       Unstructured Meshes for Linear Hyperbolic Systems", Journal of Computational Physics,
       221:693-723, 2007.
  [12] P Gnoffo and  JA White. "Computational Aerothermodynamic Simulation Issues on
       Unstructured Grids", 37th AIAA Thermophysics Conference, AIAA Paper 2004-2371, 2004.
  [13] B Parent. "Multidimensional High-Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, 55:141-152, 2017.
  [14] B Parent. "Making a Flux Positivity-Preserving: A General Purpose Filter for the Euler
       Equations", AIAA Paper 2019-0906, AIAA Scitech, San Diego CA, 2019.
  [15] B Parent, MN Shneider, and SO Macheret. "Detailed Modeling of Plasmas for Computational
       Aerodynamics", AIAA Journal, 54:898-911, 2016.
  [16] BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.
  [17] Dixon-Lewis, G., "Computer Modelling of Combustor Reactions", Springer Verlag, 1984.
  [18] B Parent, SO Macheret, MN Shneider and N Harada. "Numerical Study of an Electron-Beam-
       Confined Faraday Accelerator", Journal of Propulsion and Power, 23(5):1023-1032, 2007.
  [19] B Parent, MN Shneider, and SO Macheret. "Generalized Ohm's Law and Potential Equation in
       Computational Weakly-Ionized Plasmadynamics", Journal of Computational Physics 230:1439-
       1453, 2011.
  [20] B Parent, SO Macheret, and MN Shneider. "Modeling Weakly-Ionized Plasmas in Magnetic
       Field: A New Computationally-Efficient Approach", Journal of Computational Physics
       300:779-799, 2015.


}


 

Bz=1.0; 
dphi=3500.0;
L=0.2;
H=0.02;
Qbeam=1e5;
LbeamoverL=0.2;
N_eminus=1e7;
N_O2minus=N_eminus*0.01;
N_N2plus=(N_O2minus+N_eminus)*0.75;
N_O2plus=(N_O2minus+N_eminus)*0.25;
N_O2=0.25*2.414e24;
N_N2=0.75*2.414e24;
N_O=N_O2/1e5;
N_N=N_N2/1e5;
Nn=N_O2+N_N2;
Vmag=600.0;
theta=rad(0);
Vx=Vmag*cos(theta);
Vy=Vmag*sin(theta);
P=10000;
T=300;
Te=5000.0;

meshfact=1.0;

dwall=1e-5/meshfact;

is=1;    
ie=round(meshfact*60); 
 
js=1;
je=round(meshfact*60);

is1=round((is+ie)/2)-round((is+ie)*LbeamoverL/2);
is2=round((is+ie)/2)+round((is+ie)*LbeamoverL/2);


Grid(
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, L,0.0e0);
  Point(ie,je, L,H);
  Point(is,je, 0.0e0,H);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  FF,0.5e0,dwall,dwall); 
  Rotate(is,js,ie,je, 0.0,0.0,theta);
);

Block(
  Fluid(
    {
    Cut(is,js,  ie,je);
    Link(i1,j1,  i2,j2);
    }
  );
  EMField(
    {
    Cut(is,js,  ie,je);
    Link(i1,j1,  i2,j2);
    }
  );
);


Bdry(
  NavierStokesPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            Number  Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0       Inflow, supersonic, 1o
    BDRY_INFLOWSUBSONIC1               7       Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  16      Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1            1       Outflow, supersonic, 1o
    BDRY_OUTFLOWSUBSONIC1              4       Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1        15      Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                  14      Symmetrical, 2o
    BDRY_SYMMETRICAL1                  9       Symmetrical, 1o
    BDRY_WALLTFIXED1                    3       Wall, T specified
    BDRY_WALLADIABATIC1                 6       Wall, Adiabatic
    BDRY_SLIPWALL1                     12      Slip wall, Adiabatic, 1o
    _________________________________________________________________________________________
    }
    Twall=300.0; {K}
    All(BDRY_WALLTFIXED1,Twall);
    Plane("i",is,BDRY_INFLOWSUPERSONIC);
    Plane("i",ie,BDRY_OUTFLOWSUPERSONIC1);
    gammaeminus=0.1; 
    Plane("j",js,BDRY_WALLTFIXED1,Twall,gammaeminus);
    Plane("j",je,BDRY_WALLTFIXED1,Twall,gammaeminus);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
  EpotentialBfixed(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   Number     Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0          Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2          Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1          Extrapolated, similar to outflow, 1o
    _________________________________________________________________________________________

    }
    All(BDRYEMF_DIELECTRIC);
    Region(is1,js,is2,js,BDRYEMF_ELECTRODE);
    Region(is1,je,is2,je,BDRYEMF_ELECTRODE);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRYEMF_ELECTRODE);
    }
  );
);
 
 
Model(
  NavierStokesPlasma(
    TEMODEL=TEMODEL_LOCAL;
    TETRANSPORT_WEEE_TWOTEMPERATURE=FALSE;
    N2VIBMODEL=N2VIBMODEL_MACHERET;
    N2VIBJOULEHEATING=YES;
    REACTING=YES;
    INCLUDE_E_EFFECTS_ON_ION_MOBILITY=YES; 
    INCLUDE_E_EFFECTS_ON_ELECTRON_MOBILITY=NO; 
    SCHOTTKY_EFFECT=NO;
    emissivity=0.0;            {emissivity coefficient of the gas mixture needed for radiation heat transfer}
    emfieldworkfact=1.0;   {factor multiplying the emfield work and heat source terms}
    emfieldheatfact=1.0;
    N2VIBJOULEHEATINGMODEL=N2VIBJOULEHEATINGMODEL_ALEKSANDROV;
    sigmadiv=1e-10; {S/m}
    etdiv=1e-1;     {J/kg}
    Pmin=5000;    Pmax=9.9e99;   {Pa}
    Tmin=200;     Tmax=14.0e3;    {K}
    Tvmin=Tmin;     Tvmax=Tmax;  {K}
    Temin=300.0;    Temax=60.0e3;  {K}
    Twmin=Tmin;     Twmax=Tmax;    {K}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain for neutrals}
    chiimin=1e-15;  chiimax=1e-4;    {min and max ion molar fraction}
    chiemin=1e-20;  chiemax=1e-4;    {min and max electron molar fraction}
    Nminbdry=1e12;   {the minimum number density in 1/m3 for the charged species at the bdry nodes}
    AXISYMMETRIC=NO;
    SetBodyForce(is,js, ie,je, 0.0{N/m3},0.0{N/m3});
    SetHeatDeposited(is,js, ie,je, 0.0 {W/m3});
    {
    AddHeatPoint(0.0{x,m},0.0{y,m}, 0.1{radius,m}, 0.0{W/m});
    }
    HEAT_DEPOSITED_TO_ELECTRONS=FALSE;
    QENSOURCETERMS=TRUE;
  );
  AirPlasma8s(
    CHEMMODEL=CHEMMODEL_MACHERET2007;
    QEISOURCETERMS=TRUE; {include electron energy cooling due to electron impact}
  );

  EpotentialBfixed(
    Te_buffer=3000.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,T+Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Jmax=40000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    EFIELD_SPECIES_FRAME=TRUE;  
    AXISYMMETRIC=NO;
    SetRelativePermittivity(is,js, ie,je, 1.0 );
    SetSolidConductivity(is,js, ie,je, 1e-7 {S/m});
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
    SetMagneticField(is,js, ie,je, 0{T},0{T},Bz{T});
    {make sure that (A_x,A_y,A_z) or (B_x,B_y,B_z) do not lie on top of a node }
    {AddMagnetDipole({A_x}0, {A_y}0, {A_z}0, {B_x}0, {B_y}0.01, {B_z}0, {Bd}1);} {add a dipole with the origin at A, and strength Bd at B}
    {AddMagnetDipoleRow({A_x}0, {A_y}0, {A_z}0, {B_x}0, {B_y}0.01, {B_z}0, {Bd}1, {numsteps}200);} {add a dipole row starting from A and ending at B, with Bd the flux}
  );
 
  EbeamFixed(
    SetQbeam(is, js, ie, je,   {Qbeam, W/m3}Qbeam/1000);
    SetQbeam(is1-6, js, is2+6, je,   {Qbeam, W/m3}Qbeam/100);
    SetQbeam(is1-5, js, is2+5, je,   {Qbeam, W/m3}Qbeam/10);
    
    SetQbeam(is1-4, js, is2+4, je,   {Qbeam, W/m3}Qbeam);
  );
);


Init(
  NavierStokesPlasma(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     Tv, Te
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], Tv, Te
    _______________________________________________________________________________________

    }
    Species("e-","O2+","N2+","O","N","O2","N2","O2-");
    chi_default=1e-30;
    All(INIT_TYPE6,Vx,Vy,P,T,N_eminus/Nn,N_O2plus/Nn,N_N2plus/Nn,N_O/Nn,N_N/Nn,N_O2/Nn,N_N2/Nn,N_O2minus/Nn,T,Te);

    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,Tv,Te);
    Region(is,js,  ie,je, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,Tv,Te);
    }
  );
  EpotentialBfixed(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
      All(INITEMF_TYPE1,dphi);
      Region(is1,js,is2,js,INITEMF_TYPE1,0.0);
      Region(is1,je,is2,je,INITEMF_TYPE1,dphi);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,  ie,je,INITEMF_TYPE1,phi);
    }
  );
);


Disc(
  NavierStokesPlasma(
    zetaA1=0.1e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.2e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
    zetaD=0.0;        {conditions the Dstar eigenvalues for the charged species}
    for (spec,1,numspec,
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONPLUS,
        betag[spec]=1.0;
        betaa[spec]=0.0;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONMINUS,
        betag[spec]=-0.01;
        betaa[spec]=0.5;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_ELECTRON,
        betag[spec]=-0.001;
        betaa[spec]=0.999;
      );
    );
  );
  EpotentialBfixed(
    POTENTIAL=POTENTIAL_OHMBASED;
    CURRENTEMFSTENCIL=CURRENTEMFSTENCIL_STANDARD;
    Ediv=1e99;        {set to a small positive value for upwinding of pressure gradients, and 
                       to a large positive value for standard differencing; upwinding can lead
                       to convergence hangs of the potential equation while central differences
                       can lead to spurrious oscillations.}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.85;
    AOWENO_gammahi=0.85;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_PECLET;
    POSFILTER=POSFILTER_NONE;
    POSFILTER_numiter=4;
  );
);



Cycle(  
  NavierStokesPlasma(
    xiverge=1e-3;         {residual convergence threshold}
    zetaGammai=1.0;       {factor multiplying the pseudotime step of the ion species transport equations} 
    zetaGammae=1.0;       {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode}
    relaxNi_bdry=1.0;     {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.2;     {the electron density relaxation factor at the boundary }
    relaxTe=0.3;          {the electron temperature relaxation factor }
    rhoref=0.1;           {reference density in kg/m3}
    Tref=300.0;           {reference temperature in K}
    Teref=20000.0;        {reference electron temperature in K}
    Tvref=5000.0;         {reference vibrational temperature in K}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-7;            {average ion mass fraction}
    for (spec,1,numspec,
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONPLUS || SPECIESTYPE[spec]==SPECIESTYPE_IONMINUS,
        Uref[spec]=wion*rhoref;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_NEUTRAL,
        Uref[spec]=rhoref;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_ELECTRON,
        Uref[spec]=wion*1.8e-5*rhoref;
      );
    );
    for (dim,1,numdim,
      Uref[numspec+dim]=rhoref*aref;
    );
    Uref[numspec+numdim+1]=rhoref*aref*aref;
    Uref[numspec+numdim+2]=rhoref*700.0*Tvref;
    Uref[numspec+numdim+3]=rhoref*wion*414*Teref;
  );
  EpotentialBfixed(
    xiverge_emfield=1e-2; {residual convergence threshold for the potential equation}
    relaxEk=0.5; {relaxation factor for E in species frame}
    sigmaref=3e-6; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );


  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.1;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.002;
    );
    if (iter<400,
      CFLmax=0.2;
    ,{else}
      CFLmax=0.3;
    );
    CFL=min(CFL*1.08,CFLmax);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    Lc=1e-3;  {characteristic length scale used to solve the emfield equation}
    relaxEMF=0.8;  {relaxation factor forced on the update of the emfield variables}
    subiter_tsemf=4;
    for (cnt,0,0,
      UpdateEMField(Lc,relaxEMF,TSEMF_IMAF,subiter_tsemf);
      {UpdateEMField(Lc,relaxEMF,TSEMF_DDADI);}
      UpdateEMField(Lc,relaxEMF,TSEMF_ADI);
    );

{    UpdateEMField(Lc*100,relaxEMF,TSEMF_NEWTON);}
    system("date");
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
  );
);


Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=XSTATION_Pback({Aback,m2/m}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min,m (as small a positive value as possible)}1.0);
    Fpot=XSTATION_Fpot(Pback,{numsteps}300, {q_min,m}1.0);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag({numsteps} 300);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/ms\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js, ie,je);
  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(dim);
  );
  printf("    Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("    Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("    Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  printf("    Qbeam     = %+E W/m\n",_Qbeam());
  printf("    EdotJ     = %+E W/m\n",_EdotJ());
  printf("    Wemfield  = %+E W/m\n",_Wemfield()); {Wemfield=Femfield dot Vn}
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);

{
  _______________________________________________________________________________________________

                                           C F D W A R P

                                CFD Code for Plasma & Reactive Flow
  _______________________________________________________________________________________________

  Version                          22jul09a
  Compiler                         gcc 8.3.0 with OPENMP threads
  Compiled on                      Jul 10 2022 at 19:16:15
  Cycle Strategy                   Standard
  Fluid Relaxation                 Block DDADI [2,1]
  EM Field Relaxation              Implicit schemes based on approximate factorization including
                                   ADI [4], DDADI [2,1], and IMAF [3]
  Convection Discretization        Reconstruction-Evolution MUSCL with flux FVS [5], FDS [7],
                                   and primitive interpolation TVD [6], WENO [9], CWENO [11],
                                   AOWENO [10], and eigenvalue conditioning HARTEN, GNOFFO
                                   [12], PECLET [13], PASCAL [8], and PARENT positivity-
                                   preserving filter [14]
  Temporal Discretization          Positivity-Preserving Cross-Difference Formula [8]
  Fluid Model                      Navier-Stokes with drift-diffusion plasma model [15]
  Thermodynamic Model              NASA Glenn Polynomials [16].
  Transport Model                  Dixon-Lewis [17]
  Chemical Model                   Air Plasma 11s Dunn-Kang [18], Park [20], Lenard [19], Boyd
                                   [21], Farbar [22], Parent-Dunn and Parent-Park [24], Kim [23]
  EM Field Model                   Electric field potential [25]
  Beam Model                       None
  Number of Dimensions             2
  Number of Flux Components        16
  Number of Species                11
  Number of Charged Species        6
  List of Species                  e-, O+, N+, O2+, N2+, NO+, O, N, NO, O2, N2
  _______________________________________________________________________________________________

  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th Computational Fluid
       Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow Simulations with the CSCM
       Implicit Upwind Navier-Stokes Method", Proceedings of the 8th Computational Fluid
       Dynamics Conference, AIAA Paper 87-1114, 1987.
  [3]  RW MacCormack. "Iterative Modified Approximate Factorization", Computers and Fluids
       30:917-925, 2001.
  [4]  DW Peaceman and HH Rachford. "The Numerical Solution of Parabolic and Elliptic
       Differential Equations", J. Soc. Ind. Appl. Math. 3:28-41, 1955.
  [5]  JL Steger and RF Warming. "Flux Vector Splitting of the Inviscid Gasdynamic Equations
       with Application to Finite-Difference Methods", Journal of Computational Physics 40:263-
       293, 1981.
  [6]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [7]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [8]  B Parent. "Positivity-Preserving Dual Time Stepping Schemes for Gas Dynamics", Journal of
       Computational Physics 361:391-411, 2018.
  [9]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [10] DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [11] M Dumbser and M Kaser. "Arbitrary High Order Non-oscillatory Finite Volume Schemes on
       Unstructured Meshes for Linear Hyperbolic Systems", Journal of Computational Physics,
       221:693-723, 2007.
  [12] P Gnoffo and  JA White. "Computational Aerothermodynamic Simulation Issues on
       Unstructured Grids", 37th AIAA Thermophysics Conference, AIAA Paper 2004-2371, 2004.
  [13] B Parent. "Multidimensional High-Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, 55:141-152, 2017.
  [14] B Parent. "Making a Flux Positivity-Preserving: A General Purpose Filter for the Euler
       Equations", AIAA Paper 2019-0906, AIAA Scitech, San Diego CA, 2019.
  [15] B Parent, MN Shneider, and SO Macheret. "Detailed Modeling of Plasmas for Computational
       Aerodynamics", AIAA Journal, 54:898-911, 2016.
  [16] BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.
  [17] Dixon-Lewis, G., "Computer Modelling of Combustor Reactions", Springer Verlag, 1984.
  [18] MG Dunn and SW Kang. "Theoretical and Experimental Studies of Reentry Plasmas", NASA CR-
       2232, 1973.
  [19] M Lenard. "Ionization of Cesium and Sodium Contaminated Air in the Hypersonic Slender
       Body Boundary Layer", General Electric Missile and Space Division Technical Report
       R64SD22, 1964.
  [20] C Park. "Review of Chemical-Kinetic Problems of Future NASA Missions, I: Earth Entries,"
       Journal of Thermophysics and Heat Transfer 7:385-398, 1993.
  [21] ID Boyd, "Modeling of associative ionization reactions in hypersonic rarefied flows,"
       Physics of Fluids 19:096102, 2007.
  [22] E Farbar, ID Boyd, and A Martin. "Numerical Prediction of Hypersonic Flowfields Including
       Effects of Electron Translational Nonequilibrium", Journal of Thermophysics and Heat
       Transfer, 24:593-606, 2013.
  [23] Kim, Jae Gang, and Sung Min Jo. "Modification of chemical-kinetic parameters for 11-air
       species in re-entry flows." International Journal of Heat and Mass Transfer 169:120950,
       2021.
  [24] Parent, B. and Thoguluva Rajendran, P. and Omprakas, A.. "Electron Losses in Hypersonic
       Flows." Physics of Fluids 34:016110, 2022.
  [25] B Parent, SO Macheret, and MN Shneider. "Electron and Ion Transport Equations in
       Computational Weakly-Ionized Plasmadynamics", Journal of Computational Physics 259:51-
       69, 2014.


}



{See experimental results in Starikovskii, A. Y., Nikipelov, A. A., Nudnova, M. M., and Roupassov, D. V., “SDBD plasma actuator with nanosecond pulseperiodic discharge,” Plasma Sources Science and Technology, Vol. 18, 2009, pp. 1–17.}
 
meshlevel=1;

mf=(1.41)^(-4+meshlevel); {1.0/1.41, 1.0, 1.41, 2.0, 2.82}
tf=1; {the time step factor: the higher, the more time steps to cover the discharge}
iterfact=0.6;

CFLfact=1.0;


dphimax=14000;
itermax=iterfact*200/sqrt(CFLfact/1.6);

is1=1;
is2=round(max(34,mf*28)); {start of exposed electrode}
is3=is2+round(mf*65);
is4=is3+round(mf*150); {start of embedded electrode}
is5=is4+round(mf*600); {end of embedded electrode}
is6=is5+round(max(34,mf*36));
is=is1;
ie=is6;



js2=1; 
js3=js2+round(mf*13); {exposed electrode is between js3 and js4}
js4=js3+round(mf*9);  {start of plasma/gas}
js5=js4+round(mf*33*6*1.25);
js6=js5+round(max(50,mf*50));
js=js2;
je=js6;


xs1=-0.015;
xs2=-0.0051;
xs3=-0.001;
xs4=0;
xs5=0.0048;
xs6=0.015;
dx=(xs5-xs4)/(is5-is4)/3;
dy=dx/4/6; {?}
ys0=-50e-6;
ys1=0.0;
ys2=37.5e-6;
ys3=0.3e-3-37.5e-6;
ys4=0.3e-3;
ys5=0.6e-3;
ys6=0.015;


Grid(
  Size(is,js, ie,je);
  printf("%ldx%ld..",ie-is+1,je-js+1);
  {left electrode}

  Corners    (is3,js2,is4,js3,  xs3,ys2,xs4,ys3);
  Corners    (is3,js3,is4,js4,  xs3,ys3,xs4,ys4);

  JoinCorners(is3,js3,is4,js4,  EF,0.5e0,1.0e0,dx,  EF,0.1e0,1.0e0,dy);
  JoinCorners(is3,js2,is4,js3,  EF,0.5e0,1.0e0,dx,  EG,0.5e0,1.0e0,1.0e0);


  Copy(is3,js2,is3,js4,is2,js2);
  Translate(is2,js2,is2,js4,xs2-xs3,0);
  Join(is2,js2, is3,js4,  i, EG,0.5e0,1.0e0,1.0e0);

  {left of left electrode}
  Copy(is3,js2,is3,js4,is1,js2);
  Translate(is1,js2,is1,js4,xs1-xs3,0);
  Join(is1,js2, is2,js4,  i, EG,0.66e0,1.0e0,1.0e0);


  {right electrode and dielectric}
  Copy(is4,js2,is4,js4,is5,js2);
  Translate(is5,js2,is5,js4,xs5-xs4,0);
  Join(is4,js2, is5,js4,  i, GE,0.5e0,1.0e0,1.0);



  {right of right electrode}
  Copy(is4,js2,is4,js4,is6,js2);
  Translate(is6,js2,is6,js4,xs6-xs4,0);
  Join(is5,js2, is6,js4,  i, GE,0.34e0,1.0e0,1.0e0);
  
  {copy js4 to js5}
  Copy(is,js4,ie,js4,is,js5);
  Translate(is,js5,ie,js5,0.0,ys5-ys4);
  Join(is,js4,ie,js5,j,GE,0.3e0,1.0e0,1.0e0);

  {copy js4 to je}
  Copy(is,js4,ie,js4,is,je);
  Translate(is,je,ie,je,0.0,ys6-ys4);
  Join(is,js5,ie,je,j,GE,0.4e0,1.0e0,1.0e0);
  
);


Block(
  Fluid(
    Cut(is,js2,  ie,js4);
  );
  EMField(
    Cut(is2,js2,  is4,js3);
  );
);



Bdry(
  NavierStokesPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            Number  Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0       Inflow, supersonic, 1o
    BDRY_INFLOWSUBSONIC1               7       Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  16      Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1            1       Outflow, supersonic, 1o
    BDRY_OUTFLOWSUPERSONIC2            2       Outflow, supersonic, 2o
    BDRY_OUTFLOWSUBSONIC1              4       Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1        15      Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                  14      Symmetrical, 2o
    BDRY_SYMMETRICAL1                  9       Symmetrical, 1o
    BDRY_WALLTFIXED                    3       Wall, T specified
    BDRY_WALLADIABATIC                 6       Wall, Adiabatic
    BDRY_SLIPWALL1                     12      Slip wall, Adiabatic, 1o
    _________________________________________________________________________________________
    }
    Twall=300.0;
    gammaeminus=0.1;
    All(BDRY_WALLTFIXED1,Twall,gammaeminus);
  );
  Epotential(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   Number     Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0          Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2          Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1          Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
    All(BDRYEMF_DIELECTRIC);
    Region(is2,js3,  is4,js3,  BDRYEMF_ELECTRODE);
    Region(is4,js2,  is5,js2,  BDRYEMF_ELECTRODE);
  );
);
 
 
Model(
  NavierStokesPlasma(
    TEMODEL=TEMODEL_TRANSPORT;
    TETRANSPORT_WEEE_TWOTEMPERATURE=FALSE;
    N2VIBMODEL=N2VIBMODEL_MACHERET;
    N2VIBJOULEHEATING=YES;
    INCLUDE_E_EFFECTS_ON_ION_MOBILITY=FALSE;
    INCLUDE_E_EFFECTS_ON_ELECTRON_MOBILITY=FALSE;
    N2VIBJOULEHEATINGMODEL=N2VIBJOULEHEATINGMODEL_ALEKSANDROV;
    SCHOTTKY_EFFECT=FALSE;    
    REACTING=YES;
    emfieldworkfact=1.0;
    emfieldheatfact=1.0;
    emissivity=0.0;
    sigmadiv=1e-18; {S/m}
    etdiv=1e-1;     {J/kg}
    Pmin=1.0e3;    Pmax=9.9e99;   {Pa}
    Tmin=1.0e2;     Tmax=12.0e3;    {K}
    Tvmin=Tmin;     Tvmax=10.0e3;  {K}
    Temin=300;     Temax=60.0e3;  {K}
    Twmin=Tmin;     Twmax=Tmax;    {K}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain for neutrals}
    chiimin=1e-30;  chiimax=1.0;    {min and max ion molar fraction}
    chiemin=1e-12;  chiemax=1.0;    {min and max electron molar fraction}
    Nminbdry=1e8;   {the minimum number density in 1/m3 for the charged species at the bdry nodes}
    gamma=0.05e0;    {secondary emission coefficient}
    AXISYMMETRIC=NO;
    SetBodyForce(is,js, ie,je, 0.0{N/m3},0.0{N/m3});
    SetHeatDeposited(is,js, ie,je, 0.0 {W/m3});
    {
    AddHeatPoint(0.0{x,m},0.0{y,m}, 0.1{radius,m}, 0.0{W/m});
    }
    HEAT_DEPOSITED_TO_ELECTRONS=FALSE;
    QENSOURCETERMS=TRUE;
  );
  AirPlasma11s(
    CHEMMODEL=CHEMMODEL_BOYD2007;
    ADDITIONALREACTION=TRUE; {include reactions function of EoverN}
    TOWNSENDIONIZATIONIMPLICIT=FALSE; {keep this to FALSE even if TOWNSENDIONIZATION=TRUE}
    QEISOURCETERMS=TRUE; {include electron energy cooling due to electron impact}
  );
  Epotential(
    Te_buffer=300.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,T+Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Jmax=2000000000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,js4, 5.0 );
    SetRelativePermittivity(is,js4, ie,je, 1.0 );
    SetSolidConductivity(is,js, ie,je, 0.0 {S/m});
    SetSolidConductivity(is2,js3,  is4,js4, 1000 {S/m});
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
    AXISYMMETRIC=NO;
  );
);


Init(
  NavierStokesPlasma(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     Tv, Te
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], Tv, Te
    _______________________________________________________________________________________

    }
    Vx=0; {m/s}
    Vy=0; {m/s}
    P=101300; {Pa}
    T=300; {K}
    Tv=T; {K}
    Te=300; {K}
    
    Species("O2","N2","e-","N2+","default");
    chi_eminus=1e-12;
    chi_N2plus=1e-12;
    chi_O2=0.21;
    chi_N2=0.79;
    chi_default=1e-30;    
    All(INIT_TYPE6,Vx,Vy,P,T,chi_O2,chi_N2,chi_eminus,chi_N2plus,chi_default,Tv,Te);
    {
    Bdry(BDRY_WALLTFIXED, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,Tv,Te);
    Region(is,js,  ie,je, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,Tv,Te);
    }
  );
  Epotential(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
    phi=0.0; {V}
    All(INITEMF_TYPE1,phi);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,  ie,je,INITEMF_TYPE1,phi);
    }
  );
);


USE_GAUSS_BASED_POTENTIAL=FALSE;

Disc(
  NavierStokesPlasma(
    zetaA1=0.3e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.1e0; {set to 0.25 usually}    {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
    zetaD=1.0;        {conditions the Dstar eigenvalues for the charged species}
    if (USE_GAUSS_BASED_POTENTIAL,
     for (flux,1,numflux,
      betag[flux]=0;
      betaa[flux]=0;
     );
    ,{else}
     for (spec,1,numspec,
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONPLUS,
        betag[spec]=1.0;
        betaa[spec]=0.0;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONMINUS,
        betag[spec]=-0.01;
        betaa[spec]=0.5;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_ELECTRON,
        betag[spec]=-0.001;
        betaa[spec]=0.999;
      );
     );
    );
  );
  Epotential(
    if (USE_GAUSS_BASED_POTENTIAL,
      POTENTIAL=POTENTIAL_GAUSSBASED;
    ,{else}
      POTENTIAL=POTENTIAL_OHMBASED;
    );
    Ediv=10.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_COMPRESSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.95;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_PARENT; 
    POSFILTER_numiter=4;
    POSFILTER=POSFILTER_PARENT;
  );
  Trapezoidal(
    weightm1_convection=0.5;
    weightm1_default=0.25;
  );
  CDFplus(
    for(flux,1,numflux,
      if (flux<=numspec+numdim+1,
        xi[flux]=0.5;
      );
      if (flux>numspec+numdim+1,
        xi[flux]=0.25;
      );
    );
  );
  BDF(
    STENCIL=STENCIL_BDF2;
  );
);




Cycle(
  NavierStokesPlasma(
    xiverge=1e-3;         {residual convergence threshold}
      zetaGammai=1.0;       {factor multiplying the pseudotime step of the ion species transport equations}
    zetaGammae=1.0;      {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode when PRECONDITIONER is set to PRECON_LOCALTIMESTEPPLASMA} 
    relaxNi_bdry=0.8;     {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.1;     {the electron density relaxation factor at the boundary }
    relaxTe=0.5;{0.5}          {the electron temperature relaxation factor }
    rhoref=0.1;           {reference density in kg/m3}
    Tref=300.0;           {reference temperature in K}
    Teref=20000.0;        {reference electron temperature in K}
    Tvref=5000.0;         {reference vibrational temperature in K}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-5;            {average ion mass fraction}
    for (spec,1,numspec,
      if (SPECIESTYPE[spec]==SPECIESTYPE_IONPLUS || SPECIESTYPE[spec]==SPECIESTYPE_IONMINUS,
        Uref[spec]=wion*rhoref;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_NEUTRAL,
        Uref[spec]=rhoref;
      );
      if (SPECIESTYPE[spec]==SPECIESTYPE_ELECTRON,
        Uref[spec]=wion*1.8e-5*rhoref;
      );
    );
    for (dim,1,numdim,
      Uref[numspec+dim]=rhoref*aref;
    );
    Uref[numspec+numdim+1]=rhoref*aref*aref;
    Uref[numspec+numdim+2]=rhoref*700.0*Tvref;
    Uref[numspec+numdim+3]=rhoref*wion*414*Teref;
  );
  Epotential(
    xiverge_emfield=1e-2; {residual convergence threshold for the potential equation}
    sigmaref=3e-6; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );
  DualTimeStepping(
    tmax=25e-6;    {simulation time span in seconds}
    dtref=20e-9/(mf*60*tf);   {physical time step in seconds}
    sigma1=0.0;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.0;   {exponent of maximum pseudotime step in all fluxes}
    if (time<20e-9,
      dphi=min(dphimax,time/9e-9*dphimax);
    ,{else}
      dphi=max(0.0,dphimax-(time-20e-9)*dphimax/15e-9);
    );
    printf("%ld  ",round(dphi));
    
    if (iter==1,
      Init(Epotential(
        Region(is2,js3,  is4,js3,  INITEMF_TYPE1,dphi/2);
        Region(is4,js2,  is5,js2,  INITEMF_TYPE1,-dphi/2);
      ););
    );
    EMFcntmax=0;
    if (time<40e-9,
      dt=dtref;   {physical time step in seconds}
      if (tf<1.8, 
        CFL=1.5*CFLfact; 
      ,{else} 
        CFL=2.0*CFLfact;
      );
      CFL=CFLfact; {?????}
      if (iter<3, 
        CFL=0.0;
      );
      itermax_local=itermax;
    ,{else}
      if (iter==1, 
        dt=min(dt*2,3*0.4e-4/(330*mf*tf));
        CFL=0.2;
      ,{else}
        CFL=min(3.0,min(CFLfact,CFL*1.4));
      );
      itermax_local=itermax;
      if (meshlevel>3, EMFcntmax=1;);
    );
    if (dphi==0 && iter==1 && time>30e-9,
      Model(Epotential(SetSolidConductivity(is2,js3,  is4,js4, 0 {S/m});););     
    );
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP2,sigma1,sigma2,dt);
    Lc=1e99;      {characteristic length scale in meters used to solve the emfield equation}
    relaxEMF=0.8; {relaxation factor forced on the update of the emfield variables}
    UpdateEMField(Lc,relaxEMF,dt,TSEMF_IMAF,2);
    UpdateEMField(Lc,relaxEMF,dt,TSEMF_SOR,60);
    UpdateEMField(Lc,relaxEMF,dt,TSEMF_SOR,60);
    
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
    if (iter>itermax_local,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dtref));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );
);


Post(

  printf("\n");
  for (dim,1,2,
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(is,js, ie,je, dim);
  );
  printf("Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  printf("Femfield  = (%+E,%+E) N/m\n",Femfield[1],Femfield[2]);
  printf("Qbeam     = %+E W/m\n",_Qbeam(is,js, ie,je));
  printf("EdotJ     = %+E W/m\n",_EdotJ(is,js, ie,je));
  printf("Wemfield  = %+E W/m\n",_Wemfield(is,js, ie,je)); {Wemfield=Femfield dot Vn}
  printf("metotal   = %+E J/m\n",_metotal(is,js4, ie,je)); {Wemfield=Femfield dot Vn}
  printf("m         = %+E kg/m\n",_m(is,js4, ie,je)); {Wemfield=Femfield dot Vn}
  printf("\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js, ie,je, "post.01", "tecplot", POSTGRIDONLY);
  }
);



{
  ____________________________________________________________________________

  WARP: a CFD Code for Plasma & Reactive Flows [a]
  ____________________________________________________________________________

  Cycle Strategy                          Standard Cycle
  Fluid Transport Integration             Block DDADI [2,1]
  EM Field Integration                    IMAF [3]
  Convection Derivative Discretization    Positivity-Preserving FDS [4] WENO
                                          Adaptive Order 3,5 [5]
  Time Derivative Discretization          Positivity-Preserving
                                          Cross-Difference Formula [6]
  Fluid Transport Model                   Navier-Stokes with drift-diffusion
                                          plasma model [7]
  Chemical Model                          Air Plasma 8 species 28 reactions
                                          Macheret [7]
  Beam Model                              None
  EM Field Model                          Potential based on Ohm's law [8]
  Thermodynamic Model                     NASA Glenn Polynomials [9]
  Number of Dimensions                    2
  Number of Flux Components               13
  Number of Species                       8
  Number of Charged Species               4
  List of Species                         e-, O2-, O2+, N2+, O, N, O2, N2
  ____________________________________________________________________________

  [a]  B Parent. "WARP: a CFD Code for Plasma & Reactive Flows", WARP version
       17sep04a compiled on Sep  4 2017 at 22:49:31 by parent on WAFL101
       using gcc 4.9.2 with OPENMP threads. WARP is a Copyright (c) 1998-2017
       of Bernard Parent. Copying and distribution of WARP is prohibited.
  [1]  RW MacCormack. "A New Implicit Algorithm for Fluid Flow", 13th
       Computational Fluid Dynamics Conference, AIAA Paper 97-2100, 1997.
  [2]  J Bardina and CK Lombard. "Three Dimensional Hypersonic Flow
       Simulations with the CSCM Implicit Upwind Navier-Stokes Method",
       Proceedings of the 8th Computational Fluid Dynamics Conference, AIAA
       Paper 87-1114, 1987.
  [3]  RW MacCormack. "Iterative Modified Approximate Factorization",
       Computers and Fluids 30:917-925, 2001.
  [4]  B Parent. "Positivity-Preserving Flux Difference Splitting Schemes",
       Journal of Computational Physics 243:194-209, 2013.
  [5]  DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes
       with Adaptive Order", Journal of Computational Physics 326:780-804,
       2016.
  [6]  B Parent. "Positive Coefficients, Cross Differences, and
       Dual-Time-Stepping Schemes", under review, 2017.
  [7]  B Parent, MN Shneider, and SO Macheret. "Detailed Modeling of Plasmas
       for Computational Aerodynamics", AIAA Journal, 54:898-911, 2016.
  [8]  B Parent, SO Macheret, and MN Shneider. "Electron and Ion Transport
       Equations in Computational Weakly-Ionized Plasmadynamics", Journal of
       Computational Physics 259:51-69, 2014.
  [9]  BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for
       Calculating Thermodynamic Properties of Individual Species", NASA TP
       2002-211556, 2002.

}


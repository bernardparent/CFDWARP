{
  _______________________________________________________________________________________________

                                           C F D W A R P

                                CFD Code for Plasma & Reactive Flow
  _______________________________________________________________________________________________

  Version                          22jul09a
  Compiler                         gcc 8.3.0 with OPENMP threads
  Compiled on                      Jul 10 2022 at 14:28:29
  Cycle Strategy                   Standard
  Fluid Relaxation                 Block ADI [1,2]
  EM Field Relaxation              None
  Convection Discretization        Reconstruction-Evolution MUSCL with flux FVS [3], FDS [5],
                                   and primitive interpolation TVD [4], WENO [7], CWENO [9],
                                   AOWENO [8], and eigenvalue conditioning HARTEN, GNOFFO [10],
                                   PECLET [11], PASCAL [6], and PARENT positivity-preserving
                                   filter [12]
  Temporal Discretization          Positivity-Preserving Cross-Difference Formula [6]
  Fluid Model                      Navier-Stokes Perfect Gas
  Thermodynamic Model              Perfect Gas
  Chemical Model                   Air 1 species 0 reaction
  EM Field Model                   None
  Beam Model                       None
  Number of Dimensions             2
  Number of Flux Components        4
  _______________________________________________________________________________________________

  [1]  WR Briley and H McDonald. "On the Structure and Use of Linearized Block Implicit
       Schemes", Journal of Computational Physics 34:54-73, 1980.
  [2]  RM Beam and RF Warming. "An Implicit Finite-Difference Algorithm for Hyperbolic Systems
       in Conservation-Law-Form", Journal of Computational Physics 22:87-110, 1976.
  [3]  JL Steger and RF Warming. "Flux Vector Splitting of the Inviscid Gasdynamic Equations
       with Application to Finite-Difference Methods", Journal of Computational Physics 40:263-
       293, 1981.
  [4]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [5]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [6]  B Parent. "Positivity-Preserving Dual Time Stepping Schemes for Gas Dynamics", Journal of
       Computational Physics 361:391-411, 2018.
  [7]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [8]  DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [9]  M Dumbser and M Kaser. "Arbitrary High Order Non-oscillatory Finite Volume Schemes on
       Unstructured Meshes for Linear Hyperbolic Systems", Journal of Computational Physics,
       221:693-723, 2007.
  [10] P Gnoffo and  JA White. "Computational Aerothermodynamic Simulation Issues on
       Unstructured Grids", 37th AIAA Thermophysics Conference, AIAA Paper 2004-2371, 2004.
  [11] B Parent. "Multidimensional High-Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, 55:141-152, 2017.
  [12] B Parent. "Making a Flux Positivity-Preserving: A General Purpose Filter for the Euler
       Equations", AIAA Paper 2019-0906, AIAA Scitech, San Diego CA, 2019.


}


{
Exact solution:
density peak is 6 kg/m3 and shock front is at R=1m at t=1s

References:

Pierre-Henri Maire, A High-Order Cell-Centered Lagrangian Scheme for Two-Dimensional Compressible Fluid Flows on Unstructured Meshes, Journal of Computational Physics, 228, 2009, 2391-2425

J.R. Kamm, F.X. Timmes, On efficient generation of numerically robust Sedov Solutions, Technical Report  LA-UR-07-2849 Los Alamos National Laboratory, 2007

}


 meshfact=1;
tf=4;

  is=1;  js=1;  ks=1;
  ie=is+2*round(64*meshfact); je=js+2*round(64*meshfact); 

Lx=1.25;
Ly=1.25;
Rgas=286.0;
gamma=7/5;
rhoinit=1.0;
Pinit=1e-6;
epsilon0=4*0.244816;
Vorigin=(2*Lx/(ie-is))*(2*Ly/(je-js));
Pcenter=(gamma-1)*rhoinit*epsilon0/Vorigin;

tmax=1.0;   {simulation time span in seconds}

CFLref=2.0; {use CFLref=0.5 for BDF2}
CFLref_firstiter=0.3;
itermax=50;

Grid(
  Size(is,js, ie,je);
  Point(is,js, -Lx,-Ly);
  Point(ie,js, Lx,-Ly);
  Point(ie,je, Lx,Ly);
  Point(is,je, -Lx,Ly);
  JoinCorners(is,js, ie,je,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
 { Rotate(is,js,ie,je, 0,0, rad(22));
});



Block(
  NavierStokesPerfect(
  );
);


Bdry(
  NavierStokesPerfect(
    {
    _________________________________________________________________________________________

    Boundary Condition Type    ID    Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC      0     Inflow, supersonic
    BDRY_OUTFLOWSUPERSONIC1    1     Outflow, supersonic, 1o
    BDRY_SYMMETRICAL1          2     Symmetrical, 1o
    BDRY_SYMMETRICAL2          3     Symmetrical, 2o
    BDRY_SYMMETRICAL3          8     Symmetrical, 3o
    BDRY_WALLTFIXED1           4     Wall, T specified, 1o, param Twall
    BDRY_WALLTFIXED2           a     Wall, T specified, 2o, param Twall
    BDRY_WALLADIABATIC1        5     Wall, adiabatic, 1o
    BDRY_WALLADIABATIC2        b     Wall, adiabatic, 2o
    BDRY_INFLOWSUBSONIC1       6     Subsonic Inflow 1o (Constant Tstag, Pstag at inflow)
    BDRY_OUTFLOWSUBSONIC1      7     Subsonic Outflow 1o (Constant P at outflow)
    BDRY_FREESTREAM1           9     Freestream, 1o, params Vx,Vy, P, T
    _________________________________________________________________________________________
    }
    All(BDRY_SYMMETRICAL1);
  );
);
 
 

Model(
  NavierStokesPerfect(
    ETAMODEL=ETAMODEL_CONSTANT;     
    eta=0;       {kg/ms}
    Pr=0.71;         
    R=Rgas;        {the gas constant in J/kgK }
    Pmin=1.0e-10;    Pmax=9.9e99;   {min and max pressure allowed in the domain in Pa}
    Tmin=1.0e-20;     Tmax=6.0e3;    {min and max temperature allowed in the domain in K}
    AXISYMMETRIC=FALSE;
    SetBodyForce(is,js, ie,je, 0.0{N/m3},0.0{N/m3});
    SetHeatDeposited(is,js, ie,je, 0.0 {W/m3});
  );
);
 
 
Init(
  NavierStokesPerfect(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  P,  T     
    INIT_TYPE2                   M[1]..M[nd],  P,  T     
    INIT_TYPE3                   V[1]..V[nd],  P,  rho   
    _______________________________________________________________________________________
    }
    All(INIT_TYPE1,0.0,0.0,Pinit,Pinit/Rgas/rhoinit);
    Region(round((ie+is)/2),round((je+js)/2), round((ie+is)/2),round((je+js)/2),
           INIT_TYPE1,0.0,0.0,Pcenter,Pcenter/Rgas/rhoinit);
  );
);



Disc(
  NavierStokesPerfect(
    zetaA1=0.05e0;   {conditions the convective waves of the A jacobian}
    zetaA2=0.3e0;
  );
  FDSplus(
    AVERAGING=AVERAGING_ROE;
    ACCURACY=ACCURACY_SECONDORDER;
    numiter=2;
    xi=1.99;
    EIGENVALCOND=EIGENVALCOND_GNOFFO;
  );
  FVSTVDplus(
    LIMITER=LIMITER_VANLEER;
    ACCURACY=ACCURACY_SECONDORDER;
    xi=1.99;
    EIGENVALCOND=EIGENVALCOND_GNOFFO;
  );
  FVSplus(
    numiter=4;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.85;
    AOWENO_gammahi=0.85;
    INTERPOL=INTERPOL_AOWENO5;
    EIGENVALCOND=EIGENVALCOND_PASCAL;
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=1-1e-4;
    INTERPOL=INTERPOL_AOWENO7;
     
    EIGENVALCOND=EIGENVALCOND_PARENT;
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=4;
  );
  MUSCLplus(
    FLUX=FLUX_FDSplusFilter;
    numiter=4;
    AVERAGING=AVERAGING_ARITH;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.9;
    AOWENO_gammahi=0.9;
    INTERPOL=INTERPOL_AOWENO5;
    EIGENVALCOND=EIGENVALCOND_PASCAL;
  );
  CDFplus(
    xi[1]=0.5; 
    xi[2]=0.5; 
    xi[3]=0.5; 
    xi[4]=0.5; 
  );
  Trapezoidal(
    weightm1_convection=0.5;
    weightm1_default=0.0;
  );
);




iterglob=0;

Cycle(
  NavierStokesPerfect(
    xiverge=1e-2;          {residual convergence threshold}
    rhoref=rhoinit;            {reference density in kg/m3}
    aref=300.0;            {reference sound speed in m/s}
    Uref[1]=rhoref;            
    Uref[2]=rhoref*aref;       
    Uref[3]=rhoref*aref;   
    Uref[4]=rhoref*aref*aref;  
  );
  DualTimeStepping(
    sigma1=0.3;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.3;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALEIGENVALUE;
    if (iter==1,
     if (time==0,
        dt=1e-4/meshfact/tf/2;
        CFL=0.01;
      ,{else}
        dt=min(dt*1.4,tmax/round(50*meshfact)/tf);
        CFL=CFLref;            
     );
    );
    if (time+dt>tmax, 
     dt=tmax-time;
    );    
    if (time==0,
      CFLmax=CFLref_firstiter;
    ,{else}
      CFLmax=CFLref;
    );
    if (iter<13,
      CFL=min(CFLmax,CFL*1.5);
    , {else}
      CFL=max(0.7,CFL*0.9);
    );
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,dt);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
    if (ximax<xiverge || iter>itermax,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        WriteDataFile(outputfilename);
        exit(EXIT_SUCCESS);
      );
    );
  );
  Multizone(
    sigma1=0.0;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
        
    if (iter==1,
     if (time==0,
        dt=1e-4/meshfact/tf/2;
        CFL=0.01;
      ,{else}
        dt=min(dt*1.4,tmax/round(50*meshfact)/tf);
        CFL=CFLref;            
     );
    );
    if (time+dt>tmax, 
     dt=tmax-time;
    );    
    if (time==0,
      CFLmax=CFLref_firstiter;
    ,{else}
      CFLmax=CFLref;
    );
    if (iter<13,
      CFL=min(CFLmax,CFL*1.5);
    , {else}
      CFL=max(0.3,CFL*0.9);
    );
    phi1=20*meshfact;     {maximum number of gridlines per zone in each dimension}
    iterglob=iterglob+1;        
    
    if (iter<13,
      CFL=min(CFLmax,CFL*1.5);
    , {else}
      CFL=max(0.7,CFL*0.9);
    );
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1,dt);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
    {printf("%6ld %6ld  %E \n",
           iter,iterglob,ximax);}
 
    if (ximax<xiverge || iter>itermax,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        WriteDataFile(outputfilename);
        exit(EXIT_SUCCESS);
      );
    );
  );
);



Post(
  xcut[1]=0.1;
  xcut[2]=0.2;
  xcut[3]=0.3;
  {the following loop outputs to a file integrated properties at x=0.1,0.2,0.3}
  for (cnt,1,3,
    SetPostDomainToXcuts(xcut[cnt]);
    Pback=_Pback({Aback,m2}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min (as small a positive value as possible)}1.0);
    Fpot=_Fpot(Pback,{numsteps}300, {q_min}1.0);
    mdotreacting=_mdotreacting(
        2       {rank of the reacting species},
        0.235*(1-0.02876){stoichio. mass fraction of reacting species},
        1       {rank of the species reacted with},
        0.02876 {stoichio. mass fraction of species reacted with});
    Fx=_Fx();  {momentum*crossarea/mdot}
    mdot=_mdot();
    Tstag=_MassFluxAveStagTemperature();
    Pstag=_MassFluxAveStagPressure({numsteps} 300);
    Pave=_MassFluxAvePressure();
    Tave=_MassFluxAveTemperature();
    qave=_MassFluxAveSpeed();
    rhoave=_MassFluxAveDensity();
    totalenthalpy=_MassFluxAveTotalEnthalpy();
    fprintf("perfparam.txt",
            "x           =%E m\n"
            "Pback       =%E Pa\n"
            "Fpot        =%E Ns/kg\n"
            "mdotreacting=%E kg/s\n"
            "mdot        =%E kg/s\n"
            "Tstag       =%E K\n"
            "Pstag       =%E Pa\n"
            "Pave        =%E Pa\n"
            "Tave        =%E K\n"
            "qave        =%E m/s\n"
            "rhoave      =%E kg/m3\n\n"
            ,xcut[cnt],Pback,Fpot,mdotreacting,mdot,Tstag,Pstag,Pave,Tave,qave,rhoave);
  );
  {here, reset the post domain from one xcut to the entire computational domain}
  ResetPostDomain();
  {then, restrict the post domain to the region between is,js and ie,je}
  RestrictPostDomainToRegion(is,js, ie,je);
  {output the body forces in the post domain to a file (both shear and pressure)}
  WriteBodyForcesFile("bodyforces.txt",3 {node type on the surface of the body});
  {write a post file that includes only the post domain}
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  {write a grid post file that includes only the post domain}
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
);
